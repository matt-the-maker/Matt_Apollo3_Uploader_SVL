
../gcc/redboard_artemis/bin/svl.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	f8 ff 05 10 69 cb 00 00 ed cb 00 00 f5 cb 00 00     ....i...........
    c010:	f5 cb 00 00 f5 cb 00 00 f5 cb 00 00 00 00 00 00     ................
	...
    c02c:	fd cb 00 00 fd cb 00 00 00 00 00 00 fd cb 00 00     ................
    c03c:	fd cb 00 00 fd cb 00 00 fd cb 00 00 fd cb 00 00     ................
    c04c:	fd cb 00 00 fd cb 00 00 fd cb 00 00 fd cb 00 00     ................
    c05c:	fd cb 00 00 fd cb 00 00 fd cb 00 00 fd cb 00 00     ................
    c06c:	fd cb 00 00 fd cb 00 00 89 ca 00 00 fd cb 00 00     ................
    c07c:	09 ca 00 00 79 ca 00 00 fd cb 00 00 fd cb 00 00     ....y...........
    c08c:	fd cb 00 00 fd cb 00 00 fd cb 00 00 d1 ca 00 00     ................
    c09c:	fd cb 00 00 fd cb 00 00 fd cb 00 00 fd cb 00 00     ................
    c0ac:	fd cb 00 00 fd cb 00 00 fd cb 00 00 fd cb 00 00     ................
    c0bc:	fd cb 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_uldivmod>:
    c100:	b953      	cbnz	r3, c118 <__aeabi_uldivmod+0x18>
    c102:	b94a      	cbnz	r2, c118 <__aeabi_uldivmod+0x18>
    c104:	2900      	cmp	r1, #0
    c106:	bf08      	it	eq
    c108:	2800      	cmpeq	r0, #0
    c10a:	bf1c      	itt	ne
    c10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c114:	f000 b80c 	b.w	c130 <__aeabi_idiv0>
    c118:	f1ad 0c08 	sub.w	ip, sp, #8
    c11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c120:	f001 fa5e 	bl	d5e0 <__udivmoddi4>
    c124:	f8dd e004 	ldr.w	lr, [sp, #4]
    c128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c12c:	b004      	add	sp, #16
    c12e:	4770      	bx	lr

0000c130 <__aeabi_idiv0>:
    c130:	4770      	bx	lr
    c132:	bf00      	nop

0000c134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c134:	b480      	push	{r7}
    c136:	b083      	sub	sp, #12
    c138:	af00      	add	r7, sp, #0
    c13a:	4603      	mov	r3, r0
    c13c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c13e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c142:	2b00      	cmp	r3, #0
    c144:	db0b      	blt.n	c15e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c146:	79fb      	ldrb	r3, [r7, #7]
    c148:	f003 021f 	and.w	r2, r3, #31
    c14c:	4907      	ldr	r1, [pc, #28]	; (c16c <__NVIC_EnableIRQ+0x38>)
    c14e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c152:	095b      	lsrs	r3, r3, #5
    c154:	2001      	movs	r0, #1
    c156:	fa00 f202 	lsl.w	r2, r0, r2
    c15a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c15e:	bf00      	nop
    c160:	370c      	adds	r7, #12
    c162:	46bd      	mov	sp, r7
    c164:	f85d 7b04 	ldr.w	r7, [sp], #4
    c168:	4770      	bx	lr
    c16a:	bf00      	nop
    c16c:	e000e100 	.word	0xe000e100

0000c170 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    c170:	b480      	push	{r7}
    c172:	b083      	sub	sp, #12
    c174:	af00      	add	r7, sp, #0
    c176:	4603      	mov	r3, r0
    c178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c17a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c17e:	2b00      	cmp	r3, #0
    c180:	db12      	blt.n	c1a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c182:	79fb      	ldrb	r3, [r7, #7]
    c184:	f003 021f 	and.w	r2, r3, #31
    c188:	490a      	ldr	r1, [pc, #40]	; (c1b4 <__NVIC_DisableIRQ+0x44>)
    c18a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c18e:	095b      	lsrs	r3, r3, #5
    c190:	2001      	movs	r0, #1
    c192:	fa00 f202 	lsl.w	r2, r0, r2
    c196:	3320      	adds	r3, #32
    c198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c19c:	f3bf 8f4f 	dsb	sy
}
    c1a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
    c1a2:	f3bf 8f6f 	isb	sy
}
    c1a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
    c1a8:	bf00      	nop
    c1aa:	370c      	adds	r7, #12
    c1ac:	46bd      	mov	sp, r7
    c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1b2:	4770      	bx	lr
    c1b4:	e000e100 	.word	0xe000e100

0000c1b8 <main>:
//
// Main
//
//*****************************************************************************
int main(void)
{
    c1b8:	b580      	push	{r7, lr}
    c1ba:	f6ad 2d28 	subw	sp, sp, #2600	; 0xa28
    c1be:	af00      	add	r7, sp, #0

    bool baud_valid = false;
    c1c0:	2300      	movs	r3, #0
    c1c2:	f887 3a27 	strb.w	r3, [r7, #2599]	; 0xa27
    uint32_t bl_baud = 0x00;
    c1c6:	2300      	movs	r3, #0
    c1c8:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
    uint8_t bl_buffer[BL_UART_BUF_LEN] = {0};
    c1cc:	f607 2328 	addw	r3, r7, #2600	; 0xa28
    c1d0:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
    c1d4:	2200      	movs	r2, #0
    c1d6:	601a      	str	r2, [r3, #0]
    c1d8:	3304      	adds	r3, #4
    c1da:	f640 12fc 	movw	r2, #2556	; 0x9fc
    c1de:	2100      	movs	r1, #0
    c1e0:	4618      	mov	r0, r3
    c1e2:	f001 f9ab 	bl	d53c <memset>

#define PLLEN_VER 1
    uint8_t packet_ver_buf[PLLEN_VER] = {SVL_VERSION_NUMBER};
    c1e6:	f607 2328 	addw	r3, r7, #2600	; 0xa28
    c1ea:	f5a3 6321 	sub.w	r3, r3, #2576	; 0xa10
    c1ee:	2205      	movs	r2, #5
    c1f0:	701a      	strb	r2, [r3, #0]
    svl_packet_t svl_packet_version = {CMD_VERSION, packet_ver_buf, PLLEN_VER, PLLEN_VER};
    c1f2:	f607 2328 	addw	r3, r7, #2600	; 0xa28
    c1f6:	f6a3 231c 	subw	r3, r3, #2588	; 0xa1c
    c1fa:	2201      	movs	r2, #1
    c1fc:	701a      	strb	r2, [r3, #0]
    c1fe:	f607 2328 	addw	r3, r7, #2600	; 0xa28
    c202:	f6a3 231c 	subw	r3, r3, #2588	; 0xa1c
    c206:	f107 0218 	add.w	r2, r7, #24
    c20a:	605a      	str	r2, [r3, #4]
    c20c:	f607 2328 	addw	r3, r7, #2600	; 0xa28
    c210:	f6a3 231c 	subw	r3, r3, #2588	; 0xa1c
    c214:	2201      	movs	r2, #1
    c216:	811a      	strh	r2, [r3, #8]
    c218:	f607 2328 	addw	r3, r7, #2600	; 0xa28
    c21c:	f6a3 231c 	subw	r3, r3, #2588	; 0xa1c
    c220:	2201      	movs	r2, #1
    c222:	815a      	strh	r2, [r3, #10]
    svl_packet_t svl_packet_blmode = {CMD_BLMODE, NULL, 0, 0};
    c224:	f607 2328 	addw	r3, r7, #2600	; 0xa28
    c228:	f6a3 2328 	subw	r3, r3, #2600	; 0xa28
    c22c:	2202      	movs	r2, #2
    c22e:	701a      	strb	r2, [r3, #0]
    c230:	f607 2328 	addw	r3, r7, #2600	; 0xa28
    c234:	f6a3 2328 	subw	r3, r3, #2600	; 0xa28
    c238:	2200      	movs	r2, #0
    c23a:	605a      	str	r2, [r3, #4]
    c23c:	f607 2328 	addw	r3, r7, #2600	; 0xa28
    c240:	f6a3 2328 	subw	r3, r3, #2600	; 0xa28
    c244:	2200      	movs	r2, #0
    c246:	811a      	strh	r2, [r3, #8]
    c248:	f607 2328 	addw	r3, r7, #2600	; 0xa28
    c24c:	f6a3 2328 	subw	r3, r3, #2600	; 0xa28
    c250:	2200      	movs	r2, #0
    c252:	815a      	strh	r2, [r3, #10]

    art_svl_ringbuf_init(&bl_rx_ringbuf, bl_buffer, BL_UART_BUF_LEN);
    c254:	f107 031c 	add.w	r3, r7, #28
    c258:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    c25c:	4619      	mov	r1, r3
    c25e:	482d      	ldr	r0, [pc, #180]	; (c314 <main+0x15c>)
    c260:	f000 ff72 	bl	d148 <art_svl_ringbuf_init>
    setup();
    c264:	f000 f866 	bl	c334 <setup>

    debug_printf("\n\nArtemis SVL Bootloader - DEBUG\n\n");
    c268:	482b      	ldr	r0, [pc, #172]	; (c318 <main+0x160>)
    c26a:	f000 fbc3 	bl	c9f4 <debug_printf>

    baud_valid = detect_baud_rate(&bl_baud); // Detects the baud rate. Returns true if a valid baud rate was found
    c26e:	f607 231c 	addw	r3, r7, #2588	; 0xa1c
    c272:	4618      	mov	r0, r3
    c274:	f000 f894 	bl	c3a0 <detect_baud_rate>
    c278:	4603      	mov	r3, r0
    c27a:	f887 3a27 	strb.w	r3, [r7, #2599]	; 0xa27
    if (baud_valid == false)
    c27e:	f897 3a27 	ldrb.w	r3, [r7, #2599]	; 0xa27
    c282:	f083 0301 	eor.w	r3, r3, #1
    c286:	b2db      	uxtb	r3, r3
    c288:	2b00      	cmp	r3, #0
    c28a:	d00e      	beq.n	c2aa <main+0xf2>
    {
        new_image_header * new_image = (new_image_header*)NEW_IMAGE_HEADER_LOCATION;
    c28c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    c290:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
        //new_image_header * current_image = (new_image_header*)CURRENT_IMAGE_HEADER_LOCATION;
        
        if((new_image->ready == 0xbeef))
    c294:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
    c298:	68db      	ldr	r3, [r3, #12]
    c29a:	f64b 62ef 	movw	r2, #48879	; 0xbeef
    c29e:	4293      	cmp	r3, r2
    c2a0:	d101      	bne.n	c2a6 <main+0xee>
        {
            update_from_flash();
    c2a2:	f000 facd 	bl	c840 <update_from_flash>
        }
        
        app_start(); // w/o valid baud rate jump t the app
    c2a6:	f000 fb6b 	bl	c980 <app_start>
    }

    start_uart_bl(bl_baud); // This will create a 23 us wide low 'blip' on the TX line (until possibly fixed)
    c2aa:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
    c2ae:	4618      	mov	r0, r3
    c2b0:	f000 f9b6 	bl	c620 <start_uart_bl>
    am_util_delay_us(200);  // At the minimum baud rate of 115200 one byte (10 bits with start/stop) takes 10/115200 or 87 us. 87+23 = 100, double to be safe
    c2b4:	20c8      	movs	r0, #200	; 0xc8
    c2b6:	f000 fc39 	bl	cb2c <am_util_delay_us>

    debug_printf("phase:\tconfirm bootloading entry\n");
    c2ba:	4818      	ldr	r0, [pc, #96]	; (c31c <main+0x164>)
    c2bc:	f000 fb9a 	bl	c9f4 <debug_printf>
    debug_printf("\tsending Artemis SVL version packet\n");
    c2c0:	4817      	ldr	r0, [pc, #92]	; (c320 <main+0x168>)
    c2c2:	f000 fb97 	bl	c9f4 <debug_printf>
    svl_packet_send(&svl_packet_version); // when baud rate is determined send the version packet
    c2c6:	f107 030c 	add.w	r3, r7, #12
    c2ca:	4618      	mov	r0, r3
    c2cc:	f000 fcec 	bl	cca8 <svl_packet_send>

    debug_printf("\twaiting for bootloader confirmation\n");
    c2d0:	4814      	ldr	r0, [pc, #80]	; (c324 <main+0x16c>)
    c2d2:	f000 fb8f 	bl	c9f4 <debug_printf>
    if (svl_packet_wait(&svl_packet_blmode) != 0)
    c2d6:	463b      	mov	r3, r7
    c2d8:	4618      	mov	r0, r3
    c2da:	f000 fddd 	bl	ce98 <svl_packet_wait>
    c2de:	4603      	mov	r3, r0
    c2e0:	2b00      	cmp	r3, #0
    c2e2:	d004      	beq.n	c2ee <main+0x136>
    { // wait for the bootloader to confirm bootloader mode entry
        debug_printf("\tno confirmation received\n");
    c2e4:	4810      	ldr	r0, [pc, #64]	; (c328 <main+0x170>)
    c2e6:	f000 fb85 	bl	c9f4 <debug_printf>
        app_start(); // break to app
    c2ea:	f000 fb49 	bl	c980 <app_start>
    }
    debug_printf("\tentering bootloader\n\n");
    c2ee:	480f      	ldr	r0, [pc, #60]	; (c32c <main+0x174>)
    c2f0:	f000 fb80 	bl	c9f4 <debug_printf>

    enter_bootload(); // Now we are locked in
    c2f4:	f000 f9fe 	bl	c6f4 <enter_bootload>
    am_util_delay_ms(10);
    c2f8:	200a      	movs	r0, #10
    c2fa:	f000 fbf9 	bl	caf0 <am_util_delay_ms>

    am_hal_reset_control(AM_HAL_RESET_CONTROL_SWPOI, 0); //Cause a system Power On Init to release as much of the stack as possible
    c2fe:	2100      	movs	r1, #0
    c300:	2001      	movs	r0, #1
    c302:	f001 ff05 	bl	e110 <am_hal_reset_control>

    debug_printf("ERROR - runoff");
    c306:	480a      	ldr	r0, [pc, #40]	; (c330 <main+0x178>)
    c308:	f000 fb74 	bl	c9f4 <debug_printf>
    while (1)
    {                                                    // Loop forever while sleeping.
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP); // Go to Deep Sleep.
    c30c:	2001      	movs	r0, #1
    c30e:	f001 ff49 	bl	e1a4 <am_hal_sysctrl_sleep>
    c312:	e7fb      	b.n	c30c <main+0x154>
    c314:	10000210 	.word	0x10000210
    c318:	0000ec24 	.word	0x0000ec24
    c31c:	0000ec48 	.word	0x0000ec48
    c320:	0000ec6c 	.word	0x0000ec6c
    c324:	0000ec94 	.word	0x0000ec94
    c328:	0000ecbc 	.word	0x0000ecbc
    c32c:	0000ecd8 	.word	0x0000ecd8
    c330:	0000ecf0 	.word	0x0000ecf0

0000c334 <setup>:
//
// Setup
//
//*****************************************************************************
void setup(void)
{
    c334:	b580      	push	{r7, lr}
    c336:	af00      	add	r7, sp, #0
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c338:	2100      	movs	r1, #0
    c33a:	2000      	movs	r0, #0
    c33c:	f001 fb7a 	bl	da34 <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c340:	480b      	ldr	r0, [pc, #44]	; (c370 <setup+0x3c>)
    c342:	f001 fb49 	bl	d9d8 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c346:	f001 fb6b 	bl	da20 <am_hal_cachectrl_enable>

    // Configure the stimer
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_OVERFLOW);
    c34a:	f44f 7080 	mov.w	r0, #256	; 0x100
    c34e:	f001 ff0f 	bl	e170 <am_hal_stimer_int_enable>
    NVIC_EnableIRQ(STIMER_IRQn);
    c352:	2016      	movs	r0, #22
    c354:	f7ff feee 	bl	c134 <__NVIC_EnableIRQ>
    am_hal_stimer_config(AM_HAL_STIMER_CFG_CLEAR | AM_HAL_STIMER_CFG_FREEZE);
    c358:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    c35c:	f001 fef8 	bl	e150 <am_hal_stimer_config>
    am_hal_stimer_config(AM_HAL_STIMER_HFRC_3MHZ);
    c360:	2001      	movs	r0, #1
    c362:	f001 fef5 	bl	e150 <am_hal_stimer_config>
#ifdef DEBUG
    start_uart_debug();
#endif

    // Enable interrupts.
    am_hal_interrupt_master_enable();
    c366:	f001 fe49 	bl	dffc <am_hal_interrupt_master_enable>
}
    c36a:	bf00      	nop
    c36c:	bd80      	pop	{r7, pc}
    c36e:	bf00      	nop
    c370:	0000ef34 	.word	0x0000ef34

0000c374 <unsetup>:
//
// Un-set-up
//
//*****************************************************************************
void unsetup(void)
{
    c374:	b580      	push	{r7, lr}
    c376:	af00      	add	r7, sp, #0
    disable_burst_mode();
    c378:	f001 f866 	bl	d448 <disable_burst_mode>

    // Deconfigure the stimer
    am_hal_stimer_int_disable(AM_HAL_STIMER_INT_OVERFLOW);
    c37c:	f44f 7080 	mov.w	r0, #256	; 0x100
    c380:	f001 ff00 	bl	e184 <am_hal_stimer_int_disable>
    NVIC_DisableIRQ(STIMER_IRQn);
    c384:	2016      	movs	r0, #22
    c386:	f7ff fef3 	bl	c170 <__NVIC_DisableIRQ>
    am_hal_stimer_config(AM_HAL_STIMER_CFG_CLEAR | AM_HAL_STIMER_CFG_FREEZE);
    c38a:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    c38e:	f001 fedf 	bl	e150 <am_hal_stimer_config>
    am_hal_stimer_config(AM_HAL_STIMER_NO_CLK);
    c392:	2000      	movs	r0, #0
    c394:	f001 fedc 	bl	e150 <am_hal_stimer_config>
#ifdef DEBUG
    stop_uart_debug();
#endif

    // Disable interrupts.
    am_hal_interrupt_master_disable();
    c398:	f001 fe34 	bl	e004 <am_hal_interrupt_master_disable>
}
    c39c:	bf00      	nop
    c39e:	bd80      	pop	{r7, pc}

0000c3a0 <detect_baud_rate>:
//
// Baud Rate Detect Phase
//
// ****************************************
bool detect_baud_rate(uint32_t *baud)
{
    c3a0:	b580      	push	{r7, lr}
    c3a2:	b088      	sub	sp, #32
    c3a4:	af00      	add	r7, sp, #0
    c3a6:	6078      	str	r0, [r7, #4]
    uint32_t bl_entry_timeout_ms = 200;
    c3a8:	23c8      	movs	r3, #200	; 0xc8
    c3aa:	613b      	str	r3, [r7, #16]
    uint32_t bl_entry_timeout_start = millis();
    c3ac:	f001 f81e 	bl	d3ec <millis>
    c3b0:	60f8      	str	r0, [r7, #12]
    bool baud_is_valid = false;
    c3b2:	2300      	movs	r3, #0
    c3b4:	77fb      	strb	r3, [r7, #31]
    bool timed_out = true;
    c3b6:	2301      	movs	r3, #1
    c3b8:	77bb      	strb	r3, [r7, #30]

    debug_printf("phase:\tdetect baud rate\n");
    c3ba:	488f      	ldr	r0, [pc, #572]	; (c5f8 <detect_baud_rate+0x258>)
    c3bc:	f000 fb1a 	bl	c9f4 <debug_printf>

    enable_burst_mode();
    c3c0:	f001 f828 	bl	d414 <enable_burst_mode>

    am_hal_gpio_pinconfig(BL_RX_PAD, g_AM_HAL_GPIO_INPUT_PULLUP);
    c3c4:	4b8d      	ldr	r3, [pc, #564]	; (c5fc <detect_baud_rate+0x25c>)
    c3c6:	6819      	ldr	r1, [r3, #0]
    c3c8:	2031      	movs	r0, #49	; 0x31
    c3ca:	f001 fc6f 	bl	dcac <am_hal_gpio_pinconfig>

    ap3_gpio_enable_interrupts(BL_RX_PAD, AM_HAL_GPIO_PIN_INTDIR_LO2HI);
    c3ce:	2100      	movs	r1, #0
    c3d0:	2031      	movs	r0, #49	; 0x31
    c3d2:	f001 f84f 	bl	d474 <ap3_gpio_enable_interrupts>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(BL_RX_PAD));
    c3d6:	f04f 0000 	mov.w	r0, #0
    c3da:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c3de:	f001 fdef 	bl	dfc0 <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(BL_RX_PAD));
    c3e2:	f04f 0000 	mov.w	r0, #0
    c3e6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c3ea:	f001 fd9f 	bl	df2c <am_hal_gpio_interrupt_enable>
    NVIC_EnableIRQ(GPIO_IRQn);
    c3ee:	200d      	movs	r0, #13
    c3f0:	f7ff fea0 	bl	c134 <__NVIC_EnableIRQ>

    while ((millis() - bl_entry_timeout_start) < bl_entry_timeout_ms)
    c3f4:	e0c9      	b.n	c58a <detect_baud_rate+0x1ea>
    {
        // try to detect baud rate

        // debug_printf("\ttime (ms):\t%d\n", millis());

        if (bl_baud_ticks_index == BL_BAUD_SAMPLES)
    c3f6:	4b82      	ldr	r3, [pc, #520]	; (c600 <detect_baud_rate+0x260>)
    c3f8:	781b      	ldrb	r3, [r3, #0]
    c3fa:	b2db      	uxtb	r3, r3
    c3fc:	2b05      	cmp	r3, #5
    c3fe:	f040 80c4 	bne.w	c58a <detect_baud_rate+0x1ea>
        {

            // compute differences between samples
            for (uint8_t indi = 0; indi < (BL_BAUD_SAMPLES - 1); indi++)
    c402:	2300      	movs	r3, #0
    c404:	777b      	strb	r3, [r7, #29]
    c406:	e010      	b.n	c42a <detect_baud_rate+0x8a>
            {
                bl_baud_ticks[indi] = bl_baud_ticks[indi + 1] - bl_baud_ticks[indi];
    c408:	7f7b      	ldrb	r3, [r7, #29]
    c40a:	3301      	adds	r3, #1
    c40c:	4a7d      	ldr	r2, [pc, #500]	; (c604 <detect_baud_rate+0x264>)
    c40e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c412:	7f7b      	ldrb	r3, [r7, #29]
    c414:	4a7b      	ldr	r2, [pc, #492]	; (c604 <detect_baud_rate+0x264>)
    c416:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c41a:	7f7b      	ldrb	r3, [r7, #29]
    c41c:	1a8a      	subs	r2, r1, r2
    c41e:	4979      	ldr	r1, [pc, #484]	; (c604 <detect_baud_rate+0x264>)
    c420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (uint8_t indi = 0; indi < (BL_BAUD_SAMPLES - 1); indi++)
    c424:	7f7b      	ldrb	r3, [r7, #29]
    c426:	3301      	adds	r3, #1
    c428:	777b      	strb	r3, [r7, #29]
    c42a:	7f7b      	ldrb	r3, [r7, #29]
    c42c:	2b03      	cmp	r3, #3
    c42e:	d9eb      	bls.n	c408 <detect_baud_rate+0x68>
            }

            float mean = 0.0;
    c430:	f04f 0300 	mov.w	r3, #0
    c434:	61bb      	str	r3, [r7, #24]
            for (uint8_t indi = 0; indi < (BL_BAUD_SAMPLES - 1); indi++)
    c436:	2300      	movs	r3, #0
    c438:	75fb      	strb	r3, [r7, #23]
    c43a:	e010      	b.n	c45e <detect_baud_rate+0xbe>
            {
                mean += bl_baud_ticks[indi];
    c43c:	7dfb      	ldrb	r3, [r7, #23]
    c43e:	4a71      	ldr	r2, [pc, #452]	; (c604 <detect_baud_rate+0x264>)
    c440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c444:	ee07 3a90 	vmov	s15, r3
    c448:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c44c:	ed97 7a06 	vldr	s14, [r7, #24]
    c450:	ee77 7a27 	vadd.f32	s15, s14, s15
    c454:	edc7 7a06 	vstr	s15, [r7, #24]
            for (uint8_t indi = 0; indi < (BL_BAUD_SAMPLES - 1); indi++)
    c458:	7dfb      	ldrb	r3, [r7, #23]
    c45a:	3301      	adds	r3, #1
    c45c:	75fb      	strb	r3, [r7, #23]
    c45e:	7dfb      	ldrb	r3, [r7, #23]
    c460:	2b03      	cmp	r3, #3
    c462:	d9eb      	bls.n	c43c <detect_baud_rate+0x9c>
            }
            mean /= (BL_BAUD_SAMPLES - 1);
    c464:	ed97 7a06 	vldr	s14, [r7, #24]
    c468:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    c46c:	eec7 7a26 	vdiv.f32	s15, s14, s13
    c470:	edc7 7a06 	vstr	s15, [r7, #24]

            if (mean < 3)
    c474:	edd7 7a06 	vldr	s15, [r7, #24]
    c478:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    c47c:	eef4 7ac7 	vcmpe.f32	s15, s14
    c480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c484:	d47b      	bmi.n	c57e <detect_baud_rate+0x1de>
            {
                // invalid
            }
            else if ((mean >= 4) && (mean <= 8))
    c486:	edd7 7a06 	vldr	s15, [r7, #24]
    c48a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
    c48e:	eef4 7ac7 	vcmpe.f32	s15, s14
    c492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c496:	db0f      	blt.n	c4b8 <detect_baud_rate+0x118>
    c498:	edd7 7a06 	vldr	s15, [r7, #24]
    c49c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    c4a0:	eef4 7ac7 	vcmpe.f32	s15, s14
    c4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c4a8:	d806      	bhi.n	c4b8 <detect_baud_rate+0x118>
            {
                *baud = 921600;
    c4aa:	687b      	ldr	r3, [r7, #4]
    c4ac:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
    c4b0:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c4b2:	2301      	movs	r3, #1
    c4b4:	77fb      	strb	r3, [r7, #31]
    c4b6:	e062      	b.n	c57e <detect_baud_rate+0x1de>
            }
            else if ((mean >= 10) && (mean <= 14))
    c4b8:	edd7 7a06 	vldr	s15, [r7, #24]
    c4bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    c4c0:	eef4 7ac7 	vcmpe.f32	s15, s14
    c4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c4c8:	db0f      	blt.n	c4ea <detect_baud_rate+0x14a>
    c4ca:	edd7 7a06 	vldr	s15, [r7, #24]
    c4ce:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
    c4d2:	eef4 7ac7 	vcmpe.f32	s15, s14
    c4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c4da:	d806      	bhi.n	c4ea <detect_baud_rate+0x14a>
            {
                *baud = 460800;
    c4dc:	687b      	ldr	r3, [r7, #4]
    c4de:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
    c4e2:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c4e4:	2301      	movs	r3, #1
    c4e6:	77fb      	strb	r3, [r7, #31]
    c4e8:	e049      	b.n	c57e <detect_baud_rate+0x1de>
            }
            else if ((mean >= 25) && (mean <= 30))
    c4ea:	edd7 7a06 	vldr	s15, [r7, #24]
    c4ee:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
    c4f2:	eef4 7ac7 	vcmpe.f32	s15, s14
    c4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c4fa:	db0f      	blt.n	c51c <detect_baud_rate+0x17c>
    c4fc:	edd7 7a06 	vldr	s15, [r7, #24]
    c500:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
    c504:	eef4 7ac7 	vcmpe.f32	s15, s14
    c508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c50c:	d806      	bhi.n	c51c <detect_baud_rate+0x17c>
            {
                *baud = 230400;
    c50e:	687b      	ldr	r3, [r7, #4]
    c510:	f44f 3261 	mov.w	r2, #230400	; 0x38400
    c514:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c516:	2301      	movs	r3, #1
    c518:	77fb      	strb	r3, [r7, #31]
    c51a:	e030      	b.n	c57e <detect_baud_rate+0x1de>
            }
            else if ((mean >= 45) && (mean <= 55))
    c51c:	edd7 7a06 	vldr	s15, [r7, #24]
    c520:	ed9f 7a39 	vldr	s14, [pc, #228]	; c608 <detect_baud_rate+0x268>
    c524:	eef4 7ac7 	vcmpe.f32	s15, s14
    c528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c52c:	db0f      	blt.n	c54e <detect_baud_rate+0x1ae>
    c52e:	edd7 7a06 	vldr	s15, [r7, #24]
    c532:	ed9f 7a36 	vldr	s14, [pc, #216]	; c60c <detect_baud_rate+0x26c>
    c536:	eef4 7ac7 	vcmpe.f32	s15, s14
    c53a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c53e:	d806      	bhi.n	c54e <detect_baud_rate+0x1ae>
            {
                *baud = 115200;
    c540:	687b      	ldr	r3, [r7, #4]
    c542:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    c546:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c548:	2301      	movs	r3, #1
    c54a:	77fb      	strb	r3, [r7, #31]
    c54c:	e017      	b.n	c57e <detect_baud_rate+0x1de>
            }
            else if ((mean >= 91) && (mean <= 111))
    c54e:	edd7 7a06 	vldr	s15, [r7, #24]
    c552:	ed9f 7a2f 	vldr	s14, [pc, #188]	; c610 <detect_baud_rate+0x270>
    c556:	eef4 7ac7 	vcmpe.f32	s15, s14
    c55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c55e:	db0e      	blt.n	c57e <detect_baud_rate+0x1de>
    c560:	edd7 7a06 	vldr	s15, [r7, #24]
    c564:	ed9f 7a2b 	vldr	s14, [pc, #172]	; c614 <detect_baud_rate+0x274>
    c568:	eef4 7ac7 	vcmpe.f32	s15, s14
    c56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c570:	d805      	bhi.n	c57e <detect_baud_rate+0x1de>
            {
                *baud = 57600;
    c572:	687b      	ldr	r3, [r7, #4]
    c574:	f44f 4261 	mov.w	r2, #57600	; 0xe100
    c578:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c57a:	2301      	movs	r3, #1
    c57c:	77fb      	strb	r3, [r7, #31]
            else
            {
                // invalid
            }

            if (baud_is_valid)
    c57e:	7ffb      	ldrb	r3, [r7, #31]
    c580:	2b00      	cmp	r3, #0
    c582:	d00c      	beq.n	c59e <detect_baud_rate+0x1fe>
            {
                timed_out = false;
    c584:	2300      	movs	r3, #0
    c586:	77bb      	strb	r3, [r7, #30]
            }

            break; // exit the timeout loop
    c588:	e009      	b.n	c59e <detect_baud_rate+0x1fe>
    while ((millis() - bl_entry_timeout_start) < bl_entry_timeout_ms)
    c58a:	f000 ff2f 	bl	d3ec <millis>
    c58e:	4602      	mov	r2, r0
    c590:	68fb      	ldr	r3, [r7, #12]
    c592:	1ad3      	subs	r3, r2, r3
    c594:	693a      	ldr	r2, [r7, #16]
    c596:	429a      	cmp	r2, r3
    c598:	f63f af2d 	bhi.w	c3f6 <detect_baud_rate+0x56>
    c59c:	e000      	b.n	c5a0 <detect_baud_rate+0x200>
            break; // exit the timeout loop
    c59e:	bf00      	nop
        }
    }

    am_hal_gpio_interrupt_disable(AM_HAL_GPIO_BIT(BL_RX_PAD));
    c5a0:	f04f 0000 	mov.w	r0, #0
    c5a4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c5a8:	f001 fce4 	bl	df74 <am_hal_gpio_interrupt_disable>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(BL_RX_PAD));
    c5ac:	f04f 0000 	mov.w	r0, #0
    c5b0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c5b4:	f001 fd04 	bl	dfc0 <am_hal_gpio_interrupt_clear>
    NVIC_DisableIRQ(GPIO_IRQn);
    c5b8:	200d      	movs	r0, #13
    c5ba:	f7ff fdd9 	bl	c170 <__NVIC_DisableIRQ>

    disable_burst_mode();
    c5be:	f000 ff43 	bl	d448 <disable_burst_mode>
        }
    }
    debug_printf("}\n");
#endif // DEBUG

    if (!baud_is_valid)
    c5c2:	7ffb      	ldrb	r3, [r7, #31]
    c5c4:	f083 0301 	eor.w	r3, r3, #1
    c5c8:	b2db      	uxtb	r3, r3
    c5ca:	2b00      	cmp	r3, #0
    c5cc:	d009      	beq.n	c5e2 <detect_baud_rate+0x242>
    {
        debug_printf("\tbaud rate not detected.\n\t\trising edges:\t%d\n\t\ttimed out:\t%d\n\n", bl_baud_ticks_index, timed_out);
    c5ce:	4b0c      	ldr	r3, [pc, #48]	; (c600 <detect_baud_rate+0x260>)
    c5d0:	781b      	ldrb	r3, [r3, #0]
    c5d2:	b2db      	uxtb	r3, r3
    c5d4:	4619      	mov	r1, r3
    c5d6:	7fbb      	ldrb	r3, [r7, #30]
    c5d8:	461a      	mov	r2, r3
    c5da:	480f      	ldr	r0, [pc, #60]	; (c618 <detect_baud_rate+0x278>)
    c5dc:	f000 fa0a 	bl	c9f4 <debug_printf>
    c5e0:	e005      	b.n	c5ee <detect_baud_rate+0x24e>
    }
    else
    {
        debug_printf("\tdetected valid baud rate:\t%d\n\n", *baud);
    c5e2:	687b      	ldr	r3, [r7, #4]
    c5e4:	681b      	ldr	r3, [r3, #0]
    c5e6:	4619      	mov	r1, r3
    c5e8:	480c      	ldr	r0, [pc, #48]	; (c61c <detect_baud_rate+0x27c>)
    c5ea:	f000 fa03 	bl	c9f4 <debug_printf>
    }

    return baud_is_valid;
    c5ee:	7ffb      	ldrb	r3, [r7, #31]
}
    c5f0:	4618      	mov	r0, r3
    c5f2:	3720      	adds	r7, #32
    c5f4:	46bd      	mov	sp, r7
    c5f6:	bd80      	pop	{r7, pc}
    c5f8:	0000ed00 	.word	0x0000ed00
    c5fc:	0000ef3c 	.word	0x0000ef3c
    c600:	10000224 	.word	0x10000224
    c604:	10000228 	.word	0x10000228
    c608:	42340000 	.word	0x42340000
    c60c:	425c0000 	.word	0x425c0000
    c610:	42b60000 	.word	0x42b60000
    c614:	42de0000 	.word	0x42de0000
    c618:	0000ed1c 	.word	0x0000ed1c
    c61c:	0000ed5c 	.word	0x0000ed5c

0000c620 <start_uart_bl>:
//
// Start BL UART at desired baud
//
//*****************************************************************************
void start_uart_bl(uint32_t baud)
{
    c620:	b580      	push	{r7, lr}
    c622:	b08e      	sub	sp, #56	; 0x38
    c624:	af00      	add	r7, sp, #0
    c626:	6078      	str	r0, [r7, #4]
    const am_hal_gpio_pincfg_t bl_uart_tx_pinconfig = UART_GPIO_PINCONFIG(BL_UART_INST, TX, BL_TX_PAD);
    c628:	2300      	movs	r3, #0
    c62a:	637b      	str	r3, [r7, #52]	; 0x34
    const am_hal_gpio_pincfg_t bl_uart_rx_pinconfig = UART_GPIO_PINCONFIG(BL_UART_INST, RX, BL_RX_PAD);
    c62c:	2300      	movs	r3, #0
    c62e:	633b      	str	r3, [r7, #48]	; 0x30
    am_hal_uart_config_t bl_uart_config =
    c630:	687b      	ldr	r3, [r7, #4]
    c632:	60bb      	str	r3, [r7, #8]
    c634:	2360      	movs	r3, #96	; 0x60
    c636:	60fb      	str	r3, [r7, #12]
    c638:	2300      	movs	r3, #0
    c63a:	613b      	str	r3, [r7, #16]
    c63c:	2300      	movs	r3, #0
    c63e:	617b      	str	r3, [r7, #20]
    c640:	2300      	movs	r3, #0
    c642:	61bb      	str	r3, [r7, #24]
    c644:	2312      	movs	r3, #18
    c646:	61fb      	str	r3, [r7, #28]
    c648:	2300      	movs	r3, #0
    c64a:	623b      	str	r3, [r7, #32]
    c64c:	2300      	movs	r3, #0
    c64e:	627b      	str	r3, [r7, #36]	; 0x24
    c650:	2300      	movs	r3, #0
    c652:	62bb      	str	r3, [r7, #40]	; 0x28
    c654:	2300      	movs	r3, #0
    c656:	62fb      	str	r3, [r7, #44]	; 0x2c
            .pui8RxBuffer = NULL,
            .ui32RxBufferSize = 0,
        };

    // Initialize the printf interface for UART output.
    am_hal_uart_initialize(BL_UART_INST, &hUART_bl);
    c658:	491f      	ldr	r1, [pc, #124]	; (c6d8 <start_uart_bl+0xb8>)
    c65a:	2000      	movs	r0, #0
    c65c:	f001 fdda 	bl	e214 <am_hal_uart_initialize>
    am_hal_uart_power_control(hUART_bl, AM_HAL_SYSCTRL_WAKE, false);
    c660:	4b1d      	ldr	r3, [pc, #116]	; (c6d8 <start_uart_bl+0xb8>)
    c662:	681b      	ldr	r3, [r3, #0]
    c664:	2200      	movs	r2, #0
    c666:	2100      	movs	r1, #0
    c668:	4618      	mov	r0, r3
    c66a:	f001 fdfb 	bl	e264 <am_hal_uart_power_control>
    am_hal_uart_configure(hUART_bl, &bl_uart_config);
    c66e:	4b1a      	ldr	r3, [pc, #104]	; (c6d8 <start_uart_bl+0xb8>)
    c670:	681b      	ldr	r3, [r3, #0]
    c672:	f107 0208 	add.w	r2, r7, #8
    c676:	4611      	mov	r1, r2
    c678:	4618      	mov	r0, r3
    c67a:	f001 fe6b 	bl	e354 <am_hal_uart_configure>

    // Disable that pesky FIFO
    UARTn(BL_UART_INST)->LCRH_b.FEN = 0;
    c67e:	4a17      	ldr	r2, [pc, #92]	; (c6dc <start_uart_bl+0xbc>)
    c680:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
    c684:	f36f 1304 	bfc	r3, #4, #1
    c688:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

    // Enable the UART pins.
    am_hal_gpio_pinconfig(BL_TX_PAD, bl_uart_tx_pinconfig);
    c68c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    c68e:	2030      	movs	r0, #48	; 0x30
    c690:	f001 fb0c 	bl	dcac <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(BL_RX_PAD, bl_uart_rx_pinconfig);
    c694:	6b39      	ldr	r1, [r7, #48]	; 0x30
    c696:	2031      	movs	r0, #49	; 0x31
    c698:	f001 fb08 	bl	dcac <am_hal_gpio_pinconfig>

    // Enable interrupts.
    NVIC_EnableIRQ((IRQn_Type)(UART0_IRQn + BL_UART_INST));
    c69c:	200f      	movs	r0, #15
    c69e:	f7ff fd49 	bl	c134 <__NVIC_EnableIRQ>
    am_hal_uart_interrupt_enable(hUART_bl, (AM_HAL_UART_INT_RX));
    c6a2:	4b0d      	ldr	r3, [pc, #52]	; (c6d8 <start_uart_bl+0xb8>)
    c6a4:	681b      	ldr	r3, [r3, #0]
    c6a6:	2110      	movs	r1, #16
    c6a8:	4618      	mov	r0, r3
    c6aa:	f002 f9f1 	bl	ea90 <am_hal_uart_interrupt_enable>

    // Provide SVL Packet interfaces
    svl_packet_link_read_fn(art_svl_ringbuf_read, &bl_rx_ringbuf);
    c6ae:	490c      	ldr	r1, [pc, #48]	; (c6e0 <start_uart_bl+0xc0>)
    c6b0:	480c      	ldr	r0, [pc, #48]	; (c6e4 <start_uart_bl+0xc4>)
    c6b2:	f000 faa7 	bl	cc04 <svl_packet_link_read_fn>
    svl_packet_link_avail_fn(art_svl_ringbuf_available, &bl_rx_ringbuf);
    c6b6:	490a      	ldr	r1, [pc, #40]	; (c6e0 <start_uart_bl+0xc0>)
    c6b8:	480b      	ldr	r0, [pc, #44]	; (c6e8 <start_uart_bl+0xc8>)
    c6ba:	f000 facf 	bl	cc5c <svl_packet_link_avail_fn>
    svl_packet_link_millis_fn(millis);
    c6be:	480b      	ldr	r0, [pc, #44]	; (c6ec <start_uart_bl+0xcc>)
    c6c0:	f000 fae2 	bl	cc88 <svl_packet_link_millis_fn>
    svl_packet_link_write_fn(svl_uart_write_byte, hUART_bl);
    c6c4:	4b04      	ldr	r3, [pc, #16]	; (c6d8 <start_uart_bl+0xb8>)
    c6c6:	681b      	ldr	r3, [r3, #0]
    c6c8:	4619      	mov	r1, r3
    c6ca:	4809      	ldr	r0, [pc, #36]	; (c6f0 <start_uart_bl+0xd0>)
    c6cc:	f000 fab0 	bl	cc30 <svl_packet_link_write_fn>
}
    c6d0:	bf00      	nop
    c6d2:	3738      	adds	r7, #56	; 0x38
    c6d4:	46bd      	mov	sp, r7
    c6d6:	bd80      	pop	{r7, pc}
    c6d8:	10000220 	.word	0x10000220
    c6dc:	4001c000 	.word	0x4001c000
    c6e0:	10000210 	.word	0x10000210
    c6e4:	0000d295 	.word	0x0000d295
    c6e8:	0000d18b 	.word	0x0000d18b
    c6ec:	0000d3ed 	.word	0x0000d3ed
    c6f0:	0000d36d 	.word	0x0000d36d

0000c6f4 <enter_bootload>:
//
// Bootload phase
//
// ****************************************
void enter_bootload(void)
{
    c6f4:	b580      	push	{r7, lr}
    c6f6:	b08c      	sub	sp, #48	; 0x30
    c6f8:	af00      	add	r7, sp, #0
    enable_burst_mode();
    c6fa:	f000 fe8b 	bl	d414 <enable_burst_mode>
    bool done = false;
    c6fe:	2300      	movs	r3, #0
    c700:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t frame_address = 0;
    c704:	2300      	movs	r3, #0
    c706:	62bb      	str	r3, [r7, #40]	; 0x28
    uint16_t last_page_erased = 0;
    c708:	2300      	movs	r3, #0
    c70a:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t retransmit = 0;
    c70c:	2300      	movs	r3, #0
    c70e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    static uint32_t frame_buffer[FRAME_BUFFER_SIZE];

    svl_packet_t svl_packet_incoming_frame = {CMD_FRAME, (uint8_t *)frame_buffer, sizeof(frame_buffer) / sizeof(uint8_t), sizeof(frame_buffer) / sizeof(uint8_t)};
    c712:	4a41      	ldr	r2, [pc, #260]	; (c818 <enter_bootload+0x124>)
    c714:	f107 0318 	add.w	r3, r7, #24
    c718:	ca07      	ldmia	r2, {r0, r1, r2}
    c71a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    svl_packet_t svl_packet_retry = {CMD_RETRY, NULL, 0, 0};
    c71e:	2305      	movs	r3, #5
    c720:	733b      	strb	r3, [r7, #12]
    c722:	2300      	movs	r3, #0
    c724:	613b      	str	r3, [r7, #16]
    c726:	2300      	movs	r3, #0
    c728:	82bb      	strh	r3, [r7, #20]
    c72a:	2300      	movs	r3, #0
    c72c:	82fb      	strh	r3, [r7, #22]
    svl_packet_t svl_packet_next = {CMD_NEXT, NULL, 0, 0};
    c72e:	2303      	movs	r3, #3
    c730:	703b      	strb	r3, [r7, #0]
    c732:	2300      	movs	r3, #0
    c734:	607b      	str	r3, [r7, #4]
    c736:	2300      	movs	r3, #0
    c738:	813b      	strh	r3, [r7, #8]
    c73a:	2300      	movs	r3, #0
    c73c:	817b      	strh	r3, [r7, #10]

    debug_printf("phase:\tbootload\n");
    c73e:	4837      	ldr	r0, [pc, #220]	; (c81c <enter_bootload+0x128>)
    c740:	f000 f958 	bl	c9f4 <debug_printf>

    while (!done)
    c744:	e05c      	b.n	c800 <enter_bootload+0x10c>
    {

        if (retransmit != 0)
    c746:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    c74a:	2b00      	cmp	r3, #0
    c74c:	d008      	beq.n	c760 <enter_bootload+0x6c>
        {
            debug_printf("\trequesting retransmission\n");
    c74e:	4834      	ldr	r0, [pc, #208]	; (c820 <enter_bootload+0x12c>)
    c750:	f000 f950 	bl	c9f4 <debug_printf>
            svl_packet_send((svl_packet_t *)&svl_packet_retry); // Ask to retransmit
    c754:	f107 030c 	add.w	r3, r7, #12
    c758:	4618      	mov	r0, r3
    c75a:	f000 faa5 	bl	cca8 <svl_packet_send>
    c75e:	e006      	b.n	c76e <enter_bootload+0x7a>
        }
        else
        {
            debug_printf("\trequesting next app frame\n");
    c760:	4830      	ldr	r0, [pc, #192]	; (c824 <enter_bootload+0x130>)
    c762:	f000 f947 	bl	c9f4 <debug_printf>
            svl_packet_send((svl_packet_t *)&svl_packet_next); // Ask for the next frame packet
    c766:	463b      	mov	r3, r7
    c768:	4618      	mov	r0, r3
    c76a:	f000 fa9d 	bl	cca8 <svl_packet_send>
        }
        retransmit = 0;
    c76e:	2300      	movs	r3, #0
    c770:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        uint8_t stat = svl_packet_wait(&svl_packet_incoming_frame);
    c774:	f107 0318 	add.w	r3, r7, #24
    c778:	4618      	mov	r0, r3
    c77a:	f000 fb8d 	bl	ce98 <svl_packet_wait>
    c77e:	4603      	mov	r3, r0
    c780:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (stat != 0)
    c784:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    c788:	2b00      	cmp	r3, #0
    c78a:	d012      	beq.n	c7b2 <enter_bootload+0xbe>
        { // wait for either a frame or the done command
            debug_printf("\t\terror receiving packet (%d)\n", stat);
    c78c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    c790:	4619      	mov	r1, r3
    c792:	4825      	ldr	r0, [pc, #148]	; (c828 <enter_bootload+0x134>)
    c794:	f000 f92e 	bl	c9f4 <debug_printf>
            retransmit = 1;
    c798:	2301      	movs	r3, #1
    c79a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            am_util_delay_us(177000); //Worst case: wait 177ms for 2048 byte transfer at 115200bps to complete
    c79e:	4823      	ldr	r0, [pc, #140]	; (c82c <enter_bootload+0x138>)
    c7a0:	f000 f9c4 	bl	cb2c <am_util_delay_us>

            //Flush the buffers to remove any inbound or outbound garbage
            bl_rx_ringbuf.r_offset = 0;
    c7a4:	4b22      	ldr	r3, [pc, #136]	; (c830 <enter_bootload+0x13c>)
    c7a6:	2200      	movs	r2, #0
    c7a8:	609a      	str	r2, [r3, #8]
            bl_rx_ringbuf.w_offset = 0;
    c7aa:	4b21      	ldr	r3, [pc, #132]	; (c830 <enter_bootload+0x13c>)
    c7ac:	2200      	movs	r2, #0
    c7ae:	60da      	str	r2, [r3, #12]
            continue;
    c7b0:	e026      	b.n	c800 <enter_bootload+0x10c>
        }

        // debug_printf("Successfully received incoming frame packet (todo: add extra details in debug)\n", stat);

        if (svl_packet_incoming_frame.cmd == CMD_FRAME)
    c7b2:	7e3b      	ldrb	r3, [r7, #24]
    c7b4:	2b04      	cmp	r3, #4
    c7b6:	d112      	bne.n	c7de <enter_bootload+0xea>
        {
            debug_printf("\t\treceived an app frame\n");
    c7b8:	481e      	ldr	r0, [pc, #120]	; (c834 <enter_bootload+0x140>)
    c7ba:	f000 f91b 	bl	c9f4 <debug_printf>
            if (handle_frame_packet(&svl_packet_incoming_frame, &frame_address, &last_page_erased) != 0)
    c7be:	f107 0226 	add.w	r2, r7, #38	; 0x26
    c7c2:	f107 0128 	add.w	r1, r7, #40	; 0x28
    c7c6:	f107 0318 	add.w	r3, r7, #24
    c7ca:	4618      	mov	r0, r3
    c7cc:	f000 f862 	bl	c894 <handle_frame_packet>
    c7d0:	4603      	mov	r3, r0
    c7d2:	2b00      	cmp	r3, #0
    c7d4:	d014      	beq.n	c800 <enter_bootload+0x10c>
            {
                // debug_printf("\t\t\tbootload error - packet could not be handled\n");
                retransmit = 1;
    c7d6:	2301      	movs	r3, #1
    c7d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                continue;
    c7dc:	e010      	b.n	c800 <enter_bootload+0x10c>
            }
        }
        else if (svl_packet_incoming_frame.cmd == CMD_DONE)
    c7de:	7e3b      	ldrb	r3, [r7, #24]
    c7e0:	2b06      	cmp	r3, #6
    c7e2:	d106      	bne.n	c7f2 <enter_bootload+0xfe>
        {
            debug_printf("\t\treceived done signal!\n\n");
    c7e4:	4814      	ldr	r0, [pc, #80]	; (c838 <enter_bootload+0x144>)
    c7e6:	f000 f905 	bl	c9f4 <debug_printf>
            done = true;
    c7ea:	2301      	movs	r3, #1
    c7ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    c7f0:	e006      	b.n	c800 <enter_bootload+0x10c>
        }
        else
        {
            debug_printf("bootload error - unknown command\n");
    c7f2:	4812      	ldr	r0, [pc, #72]	; (c83c <enter_bootload+0x148>)
    c7f4:	f000 f8fe 	bl	c9f4 <debug_printf>
            retransmit = 1;
    c7f8:	2301      	movs	r3, #1
    c7fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            continue;
    c7fe:	bf00      	nop
    while (!done)
    c800:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    c804:	f083 0301 	eor.w	r3, r3, #1
    c808:	b2db      	uxtb	r3, r3
    c80a:	2b00      	cmp	r3, #0
    c80c:	d19b      	bne.n	c746 <enter_bootload+0x52>
        }
    }
    
    
    // finish bootloading
}
    c80e:	bf00      	nop
    c810:	bf00      	nop
    c812:	3730      	adds	r7, #48	; 0x30
    c814:	46bd      	mov	sp, r7
    c816:	bd80      	pop	{r7, pc}
    c818:	0000ee44 	.word	0x0000ee44
    c81c:	0000ed7c 	.word	0x0000ed7c
    c820:	0000ed90 	.word	0x0000ed90
    c824:	0000edac 	.word	0x0000edac
    c828:	0000edc8 	.word	0x0000edc8
    c82c:	0002b368 	.word	0x0002b368
    c830:	10000210 	.word	0x10000210
    c834:	0000ede8 	.word	0x0000ede8
    c838:	0000ee04 	.word	0x0000ee04
    c83c:	0000ee20 	.word	0x0000ee20

0000c840 <update_from_flash>:
//
// ****************************************
#define FLASH_PAYLOAD_SIZE 512

uint8_t update_from_flash(void)
{
    c840:	b580      	push	{r7, lr}
    c842:	b086      	sub	sp, #24
    c844:	af00      	add	r7, sp, #0
    new_image_header * new_image = (new_image_header*)NEW_IMAGE_HEADER_LOCATION;
    c846:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    c84a:	613b      	str	r3, [r7, #16]
    uint16_t last_page_erased = 0;
    c84c:	2300      	movs	r3, #0
    c84e:	81fb      	strh	r3, [r7, #14]
    
    svl_packet_t svl_packet_flash_frame = {CMD_FRAME, (uint8_t *)SECOND_IMAGE_LOCATION, FLASH_PAYLOAD_SIZE, FLASH_PAYLOAD_SIZE};
    c850:	4a0f      	ldr	r2, [pc, #60]	; (c890 <update_from_flash+0x50>)
    c852:	463b      	mov	r3, r7
    c854:	ca07      	ldmia	r2, {r0, r1, r2}
    c856:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    
    for(int itr = 0; itr < new_image->length; itr= itr + FLASH_PAYLOAD_SIZE)
    c85a:	2300      	movs	r3, #0
    c85c:	617b      	str	r3, [r7, #20]
    c85e:	e00d      	b.n	c87c <update_from_flash+0x3c>
    {
        handle_frame_packet(&svl_packet_flash_frame, (uint32_t*)itr + SECOND_IMAGE_LOCATION, &last_page_erased);
    c860:	697b      	ldr	r3, [r7, #20]
    c862:	f503 1310 	add.w	r3, r3, #2359296	; 0x240000
    c866:	4619      	mov	r1, r3
    c868:	f107 020e 	add.w	r2, r7, #14
    c86c:	463b      	mov	r3, r7
    c86e:	4618      	mov	r0, r3
    c870:	f000 f810 	bl	c894 <handle_frame_packet>
    for(int itr = 0; itr < new_image->length; itr= itr + FLASH_PAYLOAD_SIZE)
    c874:	697b      	ldr	r3, [r7, #20]
    c876:	f503 7300 	add.w	r3, r3, #512	; 0x200
    c87a:	617b      	str	r3, [r7, #20]
    c87c:	693b      	ldr	r3, [r7, #16]
    c87e:	685a      	ldr	r2, [r3, #4]
    c880:	697b      	ldr	r3, [r7, #20]
    c882:	429a      	cmp	r2, r3
    c884:	d8ec      	bhi.n	c860 <update_from_flash+0x20>
    }
    
    return 0;
    c886:	2300      	movs	r3, #0
}
    c888:	4618      	mov	r0, r3
    c88a:	3718      	adds	r7, #24
    c88c:	46bd      	mov	sp, r7
    c88e:	bd80      	pop	{r7, pc}
    c890:	0000ee50 	.word	0x0000ee50

0000c894 <handle_frame_packet>:
//
// Handle a frame packet
//
// ****************************************
uint8_t handle_frame_packet(svl_packet_t *packet, uint32_t *p_frame_address, uint16_t *p_last_page_erased)
{
    c894:	b580      	push	{r7, lr}
    c896:	b088      	sub	sp, #32
    c898:	af00      	add	r7, sp, #0
    c89a:	60f8      	str	r0, [r7, #12]
    c89c:	60b9      	str	r1, [r7, #8]
    c89e:	607a      	str	r2, [r7, #4]
    // debug_printf("\t\thandling frame\n");
    uint32_t num_words = (packet->pl_len / 4);
    c8a0:	68fb      	ldr	r3, [r7, #12]
    c8a2:	891b      	ldrh	r3, [r3, #8]
    c8a4:	089b      	lsrs	r3, r3, #2
    c8a6:	b29b      	uxth	r3, r3
    c8a8:	61fb      	str	r3, [r7, #28]

    debug_printf("\t\tframe_address = 0x%08X, num_words = %d\n", *(p_frame_address), num_words);
    c8aa:	68bb      	ldr	r3, [r7, #8]
    c8ac:	681b      	ldr	r3, [r3, #0]
    c8ae:	69fa      	ldr	r2, [r7, #28]
    c8b0:	4619      	mov	r1, r3
    c8b2:	482e      	ldr	r0, [pc, #184]	; (c96c <handle_frame_packet+0xd8>)
    c8b4:	f000 f89e 	bl	c9f4 <debug_printf>

    // Check payload length is multiple of words
    if ((packet->pl_len % 4))
    c8b8:	68fb      	ldr	r3, [r7, #12]
    c8ba:	891b      	ldrh	r3, [r3, #8]
    c8bc:	f003 0303 	and.w	r3, r3, #3
    c8c0:	b29b      	uxth	r3, r3
    c8c2:	2b00      	cmp	r3, #0
    c8c4:	d004      	beq.n	c8d0 <handle_frame_packet+0x3c>
    {
        debug_printf("Error: frame packet not integer multiple of words (4 bytes per word)\n");
    c8c6:	482a      	ldr	r0, [pc, #168]	; (c970 <handle_frame_packet+0xdc>)
    c8c8:	f000 f894 	bl	c9f4 <debug_printf>
        return 1;
    c8cc:	2301      	movs	r3, #1
    c8ce:	e048      	b.n	c962 <handle_frame_packet+0xce>
    }

    int32_t i32ReturnCode = 0;
    c8d0:	2300      	movs	r3, #0
    c8d2:	61bb      	str	r3, [r7, #24]
    uint32_t offset_address = (*(p_frame_address) + USERCODE_OFFSET);
    c8d4:	68bb      	ldr	r3, [r7, #8]
    c8d6:	681b      	ldr	r3, [r3, #0]
    c8d8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    c8dc:	617b      	str	r3, [r7, #20]
    if ((*p_last_page_erased) < AM_HAL_FLASH_ADDR2PAGE(offset_address))
    c8de:	687b      	ldr	r3, [r7, #4]
    c8e0:	881b      	ldrh	r3, [r3, #0]
    c8e2:	461a      	mov	r2, r3
    c8e4:	697b      	ldr	r3, [r7, #20]
    c8e6:	0b5b      	lsrs	r3, r3, #13
    c8e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c8ec:	429a      	cmp	r2, r3
    c8ee:	d21b      	bcs.n	c928 <handle_frame_packet+0x94>
    { // Prevent erasing partially-filled pages
        // debug_printf("Erasing instance %d, page %d\n\r", AM_HAL_FLASH_ADDR2INST( offset_address ), AM_HAL_FLASH_ADDR2PAGE(offset_address) );

        //Erase the 8k page for this address
        i32ReturnCode = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, AM_HAL_FLASH_ADDR2INST(offset_address), AM_HAL_FLASH_ADDR2PAGE(offset_address));
    c8f0:	697b      	ldr	r3, [r7, #20]
    c8f2:	0cdb      	lsrs	r3, r3, #19
    c8f4:	f003 0101 	and.w	r1, r3, #1
    c8f8:	697b      	ldr	r3, [r7, #20]
    c8fa:	0b5b      	lsrs	r3, r3, #13
    c8fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c900:	461a      	mov	r2, r3
    c902:	481c      	ldr	r0, [pc, #112]	; (c974 <handle_frame_packet+0xe0>)
    c904:	f001 f950 	bl	dba8 <am_hal_flash_page_erase>
    c908:	61b8      	str	r0, [r7, #24]
        *(p_last_page_erased) = AM_HAL_FLASH_ADDR2PAGE(offset_address);
    c90a:	697b      	ldr	r3, [r7, #20]
    c90c:	0b5b      	lsrs	r3, r3, #13
    c90e:	b29b      	uxth	r3, r3
    c910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c914:	b29a      	uxth	r2, r3
    c916:	687b      	ldr	r3, [r7, #4]
    c918:	801a      	strh	r2, [r3, #0]

        if (i32ReturnCode)
    c91a:	69bb      	ldr	r3, [r7, #24]
    c91c:	2b00      	cmp	r3, #0
    c91e:	d003      	beq.n	c928 <handle_frame_packet+0x94>
        {
            debug_printf("FLASH_MASS_ERASE i32ReturnCode = 0x%x.\n\r", i32ReturnCode);
    c920:	69b9      	ldr	r1, [r7, #24]
    c922:	4815      	ldr	r0, [pc, #84]	; (c978 <handle_frame_packet+0xe4>)
    c924:	f000 f866 	bl	c9f4 <debug_printf>
        }
    }

    //Record the array
    //debug_printf("Recording %d words (%d bytes) to memory\n", num_words, 4 * num_words);
    i32ReturnCode = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, (uint32_t *)packet->pl, (uint32_t *)(*(p_frame_address) + USERCODE_OFFSET), num_words);
    c928:	68fb      	ldr	r3, [r7, #12]
    c92a:	6859      	ldr	r1, [r3, #4]
    c92c:	68bb      	ldr	r3, [r7, #8]
    c92e:	681b      	ldr	r3, [r3, #0]
    c930:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    c934:	461a      	mov	r2, r3
    c936:	69fb      	ldr	r3, [r7, #28]
    c938:	480e      	ldr	r0, [pc, #56]	; (c974 <handle_frame_packet+0xe0>)
    c93a:	f001 f939 	bl	dbb0 <am_hal_flash_program_main>
    c93e:	61b8      	str	r0, [r7, #24]
    if (i32ReturnCode)
    c940:	69bb      	ldr	r3, [r7, #24]
    c942:	2b00      	cmp	r3, #0
    c944:	d005      	beq.n	c952 <handle_frame_packet+0xbe>
    {
        debug_printf("FLASH_WRITE error = 0x%x.\n\r", i32ReturnCode);
    c946:	69b9      	ldr	r1, [r7, #24]
    c948:	480c      	ldr	r0, [pc, #48]	; (c97c <handle_frame_packet+0xe8>)
    c94a:	f000 f853 	bl	c9f4 <debug_printf>
        return 1;
    c94e:	2301      	movs	r3, #1
    c950:	e007      	b.n	c962 <handle_frame_packet+0xce>
    }
    *(p_frame_address) += num_words * 4;
    c952:	68bb      	ldr	r3, [r7, #8]
    c954:	681a      	ldr	r2, [r3, #0]
    c956:	69fb      	ldr	r3, [r7, #28]
    c958:	009b      	lsls	r3, r3, #2
    c95a:	441a      	add	r2, r3
    c95c:	68bb      	ldr	r3, [r7, #8]
    c95e:	601a      	str	r2, [r3, #0]

    // debug_printf("Array recorded to flash\n");
    return 0;
    c960:	2300      	movs	r3, #0
}
    c962:	4618      	mov	r0, r3
    c964:	3720      	adds	r7, #32
    c966:	46bd      	mov	sp, r7
    c968:	bd80      	pop	{r7, pc}
    c96a:	bf00      	nop
    c96c:	0000ee5c 	.word	0x0000ee5c
    c970:	0000ee88 	.word	0x0000ee88
    c974:	12344321 	.word	0x12344321
    c978:	0000eed0 	.word	0x0000eed0
    c97c:	0000eefc 	.word	0x0000eefc

0000c980 <app_start>:
//
// Jump to the application
//
// ****************************************
void app_start(void)
{
    c980:	b580      	push	{r7, lr}
    c982:	b084      	sub	sp, #16
    c984:	af00      	add	r7, sp, #0
    //     debug_printf("\n");
    // #endif // APP_PRINT_PRETTY
    // #endif // DEBUG_PRINT_APP
    // #endif // DEBUG

    new_image_header * new_image = (new_image_header*)NEW_IMAGE_HEADER_LOCATION;
    c986:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    c98a:	60fb      	str	r3, [r7, #12]
    
    if(new_image->magic_number == 0xdeadbeef)
    c98c:	68fb      	ldr	r3, [r7, #12]
    c98e:	681b      	ldr	r3, [r3, #0]
    c990:	4a13      	ldr	r2, [pc, #76]	; (c9e0 <app_start+0x60>)
    c992:	4293      	cmp	r3, r2
    c994:	d109      	bne.n	c9aa <app_start+0x2a>
    {
        uint32_t data[] = {0x0};
    c996:	2300      	movs	r3, #0
    c998:	607b      	str	r3, [r7, #4]
        am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, data, (uint32_t *)(NEW_IMAGE_HEADER_LOCATION + 8), 1);
    c99a:	1d39      	adds	r1, r7, #4
    c99c:	2301      	movs	r3, #1
    c99e:	f04f 1208 	mov.w	r2, #524296	; 0x80008
    c9a2:	4810      	ldr	r0, [pc, #64]	; (c9e4 <app_start+0x64>)
    c9a4:	f001 f904 	bl	dbb0 <am_hal_flash_program_main>
    c9a8:	e008      	b.n	c9bc <app_start+0x3c>
    }
    
    else
    {
        uint32_t data[] = {0xdeadbeaf};
    c9aa:	4b0f      	ldr	r3, [pc, #60]	; (c9e8 <app_start+0x68>)
    c9ac:	603b      	str	r3, [r7, #0]
        am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, data, (uint32_t *)(NEW_IMAGE_HEADER_LOCATION + 8), 1);
    c9ae:	4639      	mov	r1, r7
    c9b0:	2301      	movs	r3, #1
    c9b2:	f04f 1208 	mov.w	r2, #524296	; 0x80008
    c9b6:	480b      	ldr	r0, [pc, #44]	; (c9e4 <app_start+0x64>)
    c9b8:	f001 f8fa 	bl	dbb0 <am_hal_flash_program_main>
    }
    
    
    void *entryPoint = (void *)(*((uint32_t *)(USERCODE_OFFSET + 4)));
    c9bc:	4b0b      	ldr	r3, [pc, #44]	; (c9ec <app_start+0x6c>)
    c9be:	681b      	ldr	r3, [r3, #0]
    c9c0:	60bb      	str	r3, [r7, #8]
    debug_printf("\nJump to App at 0x%08X\n\n", (uint32_t)entryPoint);
    c9c2:	68bb      	ldr	r3, [r7, #8]
    c9c4:	4619      	mov	r1, r3
    c9c6:	480a      	ldr	r0, [pc, #40]	; (c9f0 <app_start+0x70>)
    c9c8:	f000 f814 	bl	c9f4 <debug_printf>
    am_util_delay_ms(10); // Wait for prints to complete
    c9cc:	200a      	movs	r0, #10
    c9ce:	f000 f88f 	bl	caf0 <am_util_delay_ms>
    unsetup();            // Undoes configuration to provide users with a clean slate
    c9d2:	f7ff fccf 	bl	c374 <unsetup>
    goto *entryPoint;     // Jump to start of user code
    c9d6:	68bb      	ldr	r3, [r7, #8]
    c9d8:	f043 0301 	orr.w	r3, r3, #1
    c9dc:	4718      	bx	r3
    c9de:	bf00      	nop
    c9e0:	deadbeef 	.word	0xdeadbeef
    c9e4:	12344321 	.word	0x12344321
    c9e8:	deadbeaf 	.word	0xdeadbeaf
    c9ec:	00010004 	.word	0x00010004
    c9f0:	0000ef18 	.word	0x0000ef18

0000c9f4 <debug_printf>:
//
// Debug printf function
//
// ****************************************
void debug_printf(char *fmt, ...)
{
    c9f4:	b40f      	push	{r0, r1, r2, r3}
    c9f6:	b480      	push	{r7}
    c9f8:	af00      	add	r7, sp, #0
    vsnprintf(debug_buffer, DEBUG_UART_BUF_LEN, (const char *)fmt, args);
    va_end(args);

    svl_uart_print(hUART_debug, debug_buffer);
#endif //DEBUG
}
    c9fa:	bf00      	nop
    c9fc:	46bd      	mov	sp, r7
    c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca02:	b004      	add	sp, #16
    ca04:	4770      	bx	lr
	...

0000ca08 <am_uart_isr>:
//
// UART interrupt handlers
//
//*****************************************************************************
void am_uart_isr(void)
{
    ca08:	b580      	push	{r7, lr}
    ca0a:	b084      	sub	sp, #16
    ca0c:	af00      	add	r7, sp, #0
    // Service the FIFOs as necessary, and clear the interrupts.
#if BL_UART_INST == 0
    uint32_t ui32Status, ui32Idle;
    am_hal_uart_interrupt_status_get(hUART_bl, &ui32Status, true);
    ca0e:	4b18      	ldr	r3, [pc, #96]	; (ca70 <am_uart_isr+0x68>)
    ca10:	681b      	ldr	r3, [r3, #0]
    ca12:	f107 010c 	add.w	r1, r7, #12
    ca16:	2201      	movs	r2, #1
    ca18:	4618      	mov	r0, r3
    ca1a:	f002 f85f 	bl	eadc <am_hal_uart_interrupt_status_get>
    am_hal_uart_interrupt_clear(hUART_bl, ui32Status);
    ca1e:	4b14      	ldr	r3, [pc, #80]	; (ca70 <am_uart_isr+0x68>)
    ca20:	681b      	ldr	r3, [r3, #0]
    ca22:	68fa      	ldr	r2, [r7, #12]
    ca24:	4611      	mov	r1, r2
    ca26:	4618      	mov	r0, r3
    ca28:	f002 f846 	bl	eab8 <am_hal_uart_interrupt_clear>
    am_hal_uart_interrupt_service(hUART_bl, ui32Status, &ui32Idle);
    ca2c:	4b10      	ldr	r3, [pc, #64]	; (ca70 <am_uart_isr+0x68>)
    ca2e:	681b      	ldr	r3, [r3, #0]
    ca30:	68f9      	ldr	r1, [r7, #12]
    ca32:	f107 0208 	add.w	r2, r7, #8
    ca36:	4618      	mov	r0, r3
    ca38:	f001 ff94 	bl	e964 <am_hal_uart_interrupt_service>
    if (ui32Status & AM_HAL_UART_INT_RX)
    ca3c:	68fb      	ldr	r3, [r7, #12]
    ca3e:	f003 0310 	and.w	r3, r3, #16
    ca42:	2b00      	cmp	r3, #0
    ca44:	d010      	beq.n	ca68 <am_uart_isr+0x60>
    {
        uint8_t c = 0x00;
    ca46:	2300      	movs	r3, #0
    ca48:	71fb      	strb	r3, [r7, #7]
        if (svl_uart_read(hUART_bl, (char *)&c, 1) != 0)
    ca4a:	4b09      	ldr	r3, [pc, #36]	; (ca70 <am_uart_isr+0x68>)
    ca4c:	681b      	ldr	r3, [r3, #0]
    ca4e:	1df9      	adds	r1, r7, #7
    ca50:	2201      	movs	r2, #1
    ca52:	4618      	mov	r0, r3
    ca54:	f000 fc4d 	bl	d2f2 <svl_uart_read>
    ca58:	4603      	mov	r3, r0
    ca5a:	2b00      	cmp	r3, #0
    ca5c:	d004      	beq.n	ca68 <am_uart_isr+0x60>
        {
            art_svl_ringbuf_write(&bl_rx_ringbuf, c);
    ca5e:	79fb      	ldrb	r3, [r7, #7]
    ca60:	4619      	mov	r1, r3
    ca62:	4804      	ldr	r0, [pc, #16]	; (ca74 <am_uart_isr+0x6c>)
    ca64:	f000 fbe7 	bl	d236 <art_svl_ringbuf_write>
    am_hal_uart_interrupt_status_get(hUART_debug, &ui32Status, true);
    am_hal_uart_interrupt_clear(hUART_debug, ui32Status);
    am_hal_uart_interrupt_service(hUART_debug, ui32Status, &ui32Idle);
#endif // DEBUG
#endif // BL_UART_INST == 0
}
    ca68:	bf00      	nop
    ca6a:	3710      	adds	r7, #16
    ca6c:	46bd      	mov	sp, r7
    ca6e:	bd80      	pop	{r7, pc}
    ca70:	10000220 	.word	0x10000220
    ca74:	10000210 	.word	0x10000210

0000ca78 <am_uart1_isr>:

void am_uart1_isr(void)
{
    ca78:	b480      	push	{r7}
    ca7a:	af00      	add	r7, sp, #0
    am_hal_uart_interrupt_status_get(hUART_debug, &ui32Status, true);
    am_hal_uart_interrupt_clear(hUART_debug, ui32Status);
    am_hal_uart_interrupt_service(hUART_debug, ui32Status, &ui32Idle);
#endif // DEBUG
#endif // BL_UART_INST == 0
}
    ca7c:	bf00      	nop
    ca7e:	46bd      	mov	sp, r7
    ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca84:	4770      	bx	lr
	...

0000ca88 <am_gpio_isr>:
//
// GPIO interrupt handler
//
//*****************************************************************************
void am_gpio_isr(void)
{
    ca88:	b580      	push	{r7, lr}
    ca8a:	af00      	add	r7, sp, #0
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(BL_RX_PAD));
    ca8c:	f04f 0000 	mov.w	r0, #0
    ca90:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    ca94:	f001 fa94 	bl	dfc0 <am_hal_gpio_interrupt_clear>
    if (bl_baud_ticks_index < BL_BAUD_SAMPLES)
    ca98:	4b0a      	ldr	r3, [pc, #40]	; (cac4 <am_gpio_isr+0x3c>)
    ca9a:	781b      	ldrb	r3, [r3, #0]
    ca9c:	b2db      	uxtb	r3, r3
    ca9e:	2b04      	cmp	r3, #4
    caa0:	d80d      	bhi.n	cabe <am_gpio_isr+0x36>
    {
        bl_baud_ticks[bl_baud_ticks_index++] = CTIMER->STTMR;
    caa2:	4a09      	ldr	r2, [pc, #36]	; (cac8 <am_gpio_isr+0x40>)
    caa4:	4b07      	ldr	r3, [pc, #28]	; (cac4 <am_gpio_isr+0x3c>)
    caa6:	781b      	ldrb	r3, [r3, #0]
    caa8:	b2db      	uxtb	r3, r3
    caaa:	1c59      	adds	r1, r3, #1
    caac:	b2c8      	uxtb	r0, r1
    caae:	4905      	ldr	r1, [pc, #20]	; (cac4 <am_gpio_isr+0x3c>)
    cab0:	7008      	strb	r0, [r1, #0]
    cab2:	4619      	mov	r1, r3
    cab4:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
    cab8:	4a04      	ldr	r2, [pc, #16]	; (cacc <am_gpio_isr+0x44>)
    caba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    }
}
    cabe:	bf00      	nop
    cac0:	bd80      	pop	{r7, pc}
    cac2:	bf00      	nop
    cac4:	10000224 	.word	0x10000224
    cac8:	40008000 	.word	0x40008000
    cacc:	10000228 	.word	0x10000228

0000cad0 <am_stimer_isr>:
//
// STimer interrupt handler
//
//*****************************************************************************
void am_stimer_isr(void)
{
    cad0:	b580      	push	{r7, lr}
    cad2:	af00      	add	r7, sp, #0
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_OVERFLOW);
    cad4:	f44f 7080 	mov.w	r0, #256	; 0x100
    cad8:	f001 fb5e 	bl	e198 <am_hal_stimer_int_clear>
    ap3_stimer_overflows += 1;
    cadc:	4b03      	ldr	r3, [pc, #12]	; (caec <am_stimer_isr+0x1c>)
    cade:	681b      	ldr	r3, [r3, #0]
    cae0:	3301      	adds	r3, #1
    cae2:	4a02      	ldr	r2, [pc, #8]	; (caec <am_stimer_isr+0x1c>)
    cae4:	6013      	str	r3, [r2, #0]
    // At the fastest rate (3MHz) the 64 bits of the stimer
    // along with this overflow counter can keep track of
    // the time for ~ 195,000 years without wrapping to 0
}
    cae6:	bf00      	nop
    cae8:	bd80      	pop	{r7, pc}
    caea:	bf00      	nop
    caec:	10000a5c 	.word	0x10000a5c

0000caf0 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    caf0:	b580      	push	{r7, lr}
    caf2:	b088      	sub	sp, #32
    caf4:	af00      	add	r7, sp, #0
    caf6:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    caf8:	f107 030c 	add.w	r3, r7, #12
    cafc:	4618      	mov	r0, r3
    cafe:	f001 f835 	bl	db6c <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    cb02:	68fb      	ldr	r3, [r7, #12]
    cb04:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    cb06:	69fb      	ldr	r3, [r7, #28]
    cb08:	4a07      	ldr	r2, [pc, #28]	; (cb28 <am_util_delay_ms+0x38>)
    cb0a:	fba2 2303 	umull	r2, r3, r2, r3
    cb0e:	099a      	lsrs	r2, r3, #6
    cb10:	687b      	ldr	r3, [r7, #4]
    cb12:	fb02 f303 	mul.w	r3, r2, r3
    cb16:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    cb18:	69b8      	ldr	r0, [r7, #24]
    cb1a:	f001 f877 	bl	dc0c <am_hal_flash_delay>
}
    cb1e:	bf00      	nop
    cb20:	3720      	adds	r7, #32
    cb22:	46bd      	mov	sp, r7
    cb24:	bd80      	pop	{r7, pc}
    cb26:	bf00      	nop
    cb28:	057619f1 	.word	0x057619f1

0000cb2c <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
    cb2c:	b580      	push	{r7, lr}
    cb2e:	b088      	sub	sp, #32
    cb30:	af00      	add	r7, sp, #0
    cb32:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    cb34:	f107 030c 	add.w	r3, r7, #12
    cb38:	4618      	mov	r0, r3
    cb3a:	f001 f817 	bl	db6c <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    cb3e:	68fb      	ldr	r3, [r7, #12]
    cb40:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
    cb42:	69fb      	ldr	r3, [r7, #28]
    cb44:	4a07      	ldr	r2, [pc, #28]	; (cb64 <am_util_delay_us+0x38>)
    cb46:	fba2 2303 	umull	r2, r3, r2, r3
    cb4a:	0c9a      	lsrs	r2, r3, #18
    cb4c:	687b      	ldr	r3, [r7, #4]
    cb4e:	fb02 f303 	mul.w	r3, r2, r3
    cb52:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    cb54:	69b8      	ldr	r0, [r7, #24]
    cb56:	f001 f859 	bl	dc0c <am_hal_flash_delay>
}
    cb5a:	bf00      	nop
    cb5c:	3720      	adds	r7, #32
    cb5e:	46bd      	mov	sp, r7
    cb60:	bd80      	pop	{r7, pc}
    cb62:	bf00      	nop
    cb64:	165e9f81 	.word	0x165e9f81

0000cb68 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    cb68:	4818      	ldr	r0, [pc, #96]	; (cbcc <zero_loop+0x2c>)
    cb6a:	4919      	ldr	r1, [pc, #100]	; (cbd0 <zero_loop+0x30>)
    cb6c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    cb6e:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    cb72:	4818      	ldr	r0, [pc, #96]	; (cbd4 <zero_loop+0x34>)
    cb74:	6801      	ldr	r1, [r0, #0]
    cb76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    cb7a:	6001      	str	r1, [r0, #0]
    cb7c:	f3bf 8f4f 	dsb	sy
    cb80:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    cb84:	4814      	ldr	r0, [pc, #80]	; (cbd8 <zero_loop+0x38>)
    cb86:	4915      	ldr	r1, [pc, #84]	; (cbdc <zero_loop+0x3c>)
    cb88:	4a15      	ldr	r2, [pc, #84]	; (cbe0 <zero_loop+0x40>)

0000cb8a <copy_loop>:
    cb8a:	4291      	cmp	r1, r2
    cb8c:	d004      	beq.n	cb98 <copy_end>
    cb8e:	f850 3b04 	ldr.w	r3, [r0], #4
    cb92:	f841 3b04 	str.w	r3, [r1], #4
    cb96:	e7f8      	b.n	cb8a <copy_loop>

0000cb98 <copy_end>:
          "copy_end:\n");
    
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    cb98:	4812      	ldr	r0, [pc, #72]	; (cbe4 <zero_loop+0x44>)
    cb9a:	4913      	ldr	r1, [pc, #76]	; (cbe8 <zero_loop+0x48>)
    cb9c:	f04f 0200 	mov.w	r2, #0

0000cba0 <zero_loop>:
    cba0:	4288      	cmp	r0, r1
    cba2:	bfb8      	it	lt
    cba4:	f840 2b04 	strlt.w	r2, [r0], #4
    cba8:	dbfa      	blt.n	cba0 <zero_loop>
    //
    // Call Global Static Constructors for C++ support
    //
    extern void (*__init_array_start)(void);    // symbols must be
    extern void (*__init_array_end)(void);      // provided by linker
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {  
    cbaa:	4c06      	ldr	r4, [pc, #24]	; (cbc4 <zero_loop+0x24>)
    cbac:	e002      	b.n	cbb4 <zero_loop+0x14>
        (*p)();                                 // Call each function in the list
    cbae:	6823      	ldr	r3, [r4, #0]
    cbb0:	4798      	blx	r3
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {  
    cbb2:	3404      	adds	r4, #4
    cbb4:	4b04      	ldr	r3, [pc, #16]	; (cbc8 <zero_loop+0x28>)
    cbb6:	429c      	cmp	r4, r3
    cbb8:	d3f9      	bcc.n	cbae <zero_loop+0xe>
    }

    //
    // Call the application's entry point.
    //
    main();
    cbba:	f7ff fafd 	bl	c1b8 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    cbbe:	be00      	bkpt	0x0000
}
    cbc0:	bf00      	nop
    cbc2:	bf00      	nop
    cbc4:	0000ec24 	.word	0x0000ec24
    cbc8:	0000ec24 	.word	0x0000ec24
    cbcc:	e000ed08 	.word	0xe000ed08
    cbd0:	0000c000 	.word	0x0000c000
    cbd4:	e000ed88 	.word	0xe000ed88
    cbd8:	0000f170 	.word	0x0000f170
    cbdc:	10000000 	.word	0x10000000
    cbe0:	1000020c 	.word	0x1000020c
    cbe4:	10000210 	.word	0x10000210
    cbe8:	10000b3c 	.word	0x10000b3c

0000cbec <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    cbec:	b480      	push	{r7}
    cbee:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    cbf0:	bf00      	nop
    cbf2:	e7fd      	b.n	cbf0 <NMI_Handler+0x4>

0000cbf4 <BusFault_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
HardFault_Handler(void)
{
    cbf4:	b480      	push	{r7}
    cbf6:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    cbf8:	bf00      	nop
    cbfa:	e7fd      	b.n	cbf8 <BusFault_Handler+0x4>

0000cbfc <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    cbfc:	b480      	push	{r7}
    cbfe:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    cc00:	bf00      	nop
    cc02:	e7fd      	b.n	cc00 <DebugMon_Handler+0x4>

0000cc04 <svl_packet_link_read_fn>:
  }
  return retval;
}

void svl_packet_link_read_fn(svl_packet_read_byte_fn_t fn, void *param)
{
    cc04:	b480      	push	{r7}
    cc06:	b083      	sub	sp, #12
    cc08:	af00      	add	r7, sp, #0
    cc0a:	6078      	str	r0, [r7, #4]
    cc0c:	6039      	str	r1, [r7, #0]
  read_param = param;
    cc0e:	4a06      	ldr	r2, [pc, #24]	; (cc28 <svl_packet_link_read_fn+0x24>)
    cc10:	683b      	ldr	r3, [r7, #0]
    cc12:	6013      	str	r3, [r2, #0]
  read_fn = fn;
    cc14:	4a05      	ldr	r2, [pc, #20]	; (cc2c <svl_packet_link_read_fn+0x28>)
    cc16:	687b      	ldr	r3, [r7, #4]
    cc18:	6013      	str	r3, [r2, #0]
}
    cc1a:	bf00      	nop
    cc1c:	370c      	adds	r7, #12
    cc1e:	46bd      	mov	sp, r7
    cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc24:	4770      	bx	lr
    cc26:	bf00      	nop
    cc28:	10000a3c 	.word	0x10000a3c
    cc2c:	10000a48 	.word	0x10000a48

0000cc30 <svl_packet_link_write_fn>:

void svl_packet_link_write_fn(svl_packet_write_byte_fn_t fn, void *param)
{
    cc30:	b480      	push	{r7}
    cc32:	b083      	sub	sp, #12
    cc34:	af00      	add	r7, sp, #0
    cc36:	6078      	str	r0, [r7, #4]
    cc38:	6039      	str	r1, [r7, #0]
  write_param = param;
    cc3a:	4a06      	ldr	r2, [pc, #24]	; (cc54 <svl_packet_link_write_fn+0x24>)
    cc3c:	683b      	ldr	r3, [r7, #0]
    cc3e:	6013      	str	r3, [r2, #0]
  write_fn = fn;
    cc40:	4a05      	ldr	r2, [pc, #20]	; (cc58 <svl_packet_link_write_fn+0x28>)
    cc42:	687b      	ldr	r3, [r7, #4]
    cc44:	6013      	str	r3, [r2, #0]
}
    cc46:	bf00      	nop
    cc48:	370c      	adds	r7, #12
    cc4a:	46bd      	mov	sp, r7
    cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc50:	4770      	bx	lr
    cc52:	bf00      	nop
    cc54:	10000a40 	.word	0x10000a40
    cc58:	10000a4c 	.word	0x10000a4c

0000cc5c <svl_packet_link_avail_fn>:

void svl_packet_link_avail_fn(svl_packet_avail_bytes_fn_t fn, void *param)
{
    cc5c:	b480      	push	{r7}
    cc5e:	b083      	sub	sp, #12
    cc60:	af00      	add	r7, sp, #0
    cc62:	6078      	str	r0, [r7, #4]
    cc64:	6039      	str	r1, [r7, #0]
  avail_param = param;
    cc66:	4a06      	ldr	r2, [pc, #24]	; (cc80 <svl_packet_link_avail_fn+0x24>)
    cc68:	683b      	ldr	r3, [r7, #0]
    cc6a:	6013      	str	r3, [r2, #0]
  avail_fn = fn;
    cc6c:	4a05      	ldr	r2, [pc, #20]	; (cc84 <svl_packet_link_avail_fn+0x28>)
    cc6e:	687b      	ldr	r3, [r7, #4]
    cc70:	6013      	str	r3, [r2, #0]
}
    cc72:	bf00      	nop
    cc74:	370c      	adds	r7, #12
    cc76:	46bd      	mov	sp, r7
    cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc7c:	4770      	bx	lr
    cc7e:	bf00      	nop
    cc80:	10000a44 	.word	0x10000a44
    cc84:	10000a50 	.word	0x10000a50

0000cc88 <svl_packet_link_millis_fn>:

void svl_packet_link_millis_fn(svl_packet_millis_fn_t fn)
{
    cc88:	b480      	push	{r7}
    cc8a:	b083      	sub	sp, #12
    cc8c:	af00      	add	r7, sp, #0
    cc8e:	6078      	str	r0, [r7, #4]
  millis_fn = fn;
    cc90:	4a04      	ldr	r2, [pc, #16]	; (cca4 <svl_packet_link_millis_fn+0x1c>)
    cc92:	687b      	ldr	r3, [r7, #4]
    cc94:	6013      	str	r3, [r2, #0]
}
    cc96:	bf00      	nop
    cc98:	370c      	adds	r7, #12
    cc9a:	46bd      	mov	sp, r7
    cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cca0:	4770      	bx	lr
    cca2:	bf00      	nop
    cca4:	10000a54 	.word	0x10000a54

0000cca8 <svl_packet_send>:

void svl_packet_send(svl_packet_t *packet)
{
    cca8:	b580      	push	{r7, lr}
    ccaa:	b092      	sub	sp, #72	; 0x48
    ccac:	af00      	add	r7, sp, #0
    ccae:	6078      	str	r0, [r7, #4]
  CRCL = 0;
    ccb0:	4b74      	ldr	r3, [pc, #464]	; (ce84 <svl_packet_send+0x1dc>)
    ccb2:	2200      	movs	r2, #0
    ccb4:	701a      	strb	r2, [r3, #0]
  CRCH = 0;
    ccb6:	4b74      	ldr	r3, [pc, #464]	; (ce88 <svl_packet_send+0x1e0>)
    ccb8:	2200      	movs	r2, #0
    ccba:	701a      	strb	r2, [r3, #0]
  updateCRC(packet->cmd); //Add this byte to CRC
    ccbc:	687b      	ldr	r3, [r7, #4]
    ccbe:	781b      	ldrb	r3, [r3, #0]
    ccc0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  uint16_t tableAddr = (num ^ CRCH);
    ccc4:	4b70      	ldr	r3, [pc, #448]	; (ce88 <svl_packet_send+0x1e0>)
    ccc6:	781a      	ldrb	r2, [r3, #0]
    ccc8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
    cccc:	4053      	eors	r3, r2
    ccce:	b2db      	uxtb	r3, r3
    ccd0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  CRCH = (CRC_Table[tableAddr] >> 8) ^ CRCL;
    ccd2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    ccd4:	4a6d      	ldr	r2, [pc, #436]	; (ce8c <svl_packet_send+0x1e4>)
    ccd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    ccda:	0a1b      	lsrs	r3, r3, #8
    ccdc:	b29b      	uxth	r3, r3
    ccde:	b2da      	uxtb	r2, r3
    cce0:	4b68      	ldr	r3, [pc, #416]	; (ce84 <svl_packet_send+0x1dc>)
    cce2:	781b      	ldrb	r3, [r3, #0]
    cce4:	4053      	eors	r3, r2
    cce6:	b2da      	uxtb	r2, r3
    cce8:	4b67      	ldr	r3, [pc, #412]	; (ce88 <svl_packet_send+0x1e0>)
    ccea:	701a      	strb	r2, [r3, #0]
  CRCL = (CRC_Table[tableAddr] & 0x00FF);
    ccec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    ccee:	4a67      	ldr	r2, [pc, #412]	; (ce8c <svl_packet_send+0x1e4>)
    ccf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    ccf4:	b2da      	uxtb	r2, r3
    ccf6:	4b63      	ldr	r3, [pc, #396]	; (ce84 <svl_packet_send+0x1dc>)
    ccf8:	701a      	strb	r2, [r3, #0]
}
    ccfa:	bf00      	nop
  for (uint32_t x = 0; x < packet->pl_len; x++)
    ccfc:	2300      	movs	r3, #0
    ccfe:	647b      	str	r3, [r7, #68]	; 0x44
    cd00:	e025      	b.n	cd4e <svl_packet_send+0xa6>
  {
    updateCRC(*(packet->pl + x)); //Add this byte to CRC
    cd02:	687b      	ldr	r3, [r7, #4]
    cd04:	685a      	ldr	r2, [r3, #4]
    cd06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cd08:	4413      	add	r3, r2
    cd0a:	781b      	ldrb	r3, [r3, #0]
    cd0c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  uint16_t tableAddr = (num ^ CRCH);
    cd10:	4b5d      	ldr	r3, [pc, #372]	; (ce88 <svl_packet_send+0x1e0>)
    cd12:	781a      	ldrb	r2, [r3, #0]
    cd14:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    cd18:	4053      	eors	r3, r2
    cd1a:	b2db      	uxtb	r3, r3
    cd1c:	877b      	strh	r3, [r7, #58]	; 0x3a
  CRCH = (CRC_Table[tableAddr] >> 8) ^ CRCL;
    cd1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    cd20:	4a5a      	ldr	r2, [pc, #360]	; (ce8c <svl_packet_send+0x1e4>)
    cd22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cd26:	0a1b      	lsrs	r3, r3, #8
    cd28:	b29b      	uxth	r3, r3
    cd2a:	b2da      	uxtb	r2, r3
    cd2c:	4b55      	ldr	r3, [pc, #340]	; (ce84 <svl_packet_send+0x1dc>)
    cd2e:	781b      	ldrb	r3, [r3, #0]
    cd30:	4053      	eors	r3, r2
    cd32:	b2da      	uxtb	r2, r3
    cd34:	4b54      	ldr	r3, [pc, #336]	; (ce88 <svl_packet_send+0x1e0>)
    cd36:	701a      	strb	r2, [r3, #0]
  CRCL = (CRC_Table[tableAddr] & 0x00FF);
    cd38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    cd3a:	4a54      	ldr	r2, [pc, #336]	; (ce8c <svl_packet_send+0x1e4>)
    cd3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cd40:	b2da      	uxtb	r2, r3
    cd42:	4b50      	ldr	r3, [pc, #320]	; (ce84 <svl_packet_send+0x1dc>)
    cd44:	701a      	strb	r2, [r3, #0]
}
    cd46:	bf00      	nop
  for (uint32_t x = 0; x < packet->pl_len; x++)
    cd48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cd4a:	3301      	adds	r3, #1
    cd4c:	647b      	str	r3, [r7, #68]	; 0x44
    cd4e:	687b      	ldr	r3, [r7, #4]
    cd50:	891b      	ldrh	r3, [r3, #8]
    cd52:	461a      	mov	r2, r3
    cd54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cd56:	4293      	cmp	r3, r2
    cd58:	d3d3      	bcc.n	cd02 <svl_packet_send+0x5a>
  }

  svl_packet_write_byte(((packet->pl_len + 3) >> 8));   // len high byte (including command and CRC bytes)
    cd5a:	687b      	ldr	r3, [r7, #4]
    cd5c:	891b      	ldrh	r3, [r3, #8]
    cd5e:	3303      	adds	r3, #3
    cd60:	121b      	asrs	r3, r3, #8
    cd62:	b2db      	uxtb	r3, r3
    cd64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  size_t retval = 0x00;
    cd68:	2300      	movs	r3, #0
    cd6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (write_fn != NULL)
    cd6c:	4b48      	ldr	r3, [pc, #288]	; (ce90 <svl_packet_send+0x1e8>)
    cd6e:	681b      	ldr	r3, [r3, #0]
    cd70:	2b00      	cmp	r3, #0
    cd72:	d008      	beq.n	cd86 <svl_packet_send+0xde>
    retval = write_fn(write_param, c);
    cd74:	4b46      	ldr	r3, [pc, #280]	; (ce90 <svl_packet_send+0x1e8>)
    cd76:	681b      	ldr	r3, [r3, #0]
    cd78:	4a46      	ldr	r2, [pc, #280]	; (ce94 <svl_packet_send+0x1ec>)
    cd7a:	6812      	ldr	r2, [r2, #0]
    cd7c:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
    cd80:	4610      	mov	r0, r2
    cd82:	4798      	blx	r3
    cd84:	6278      	str	r0, [r7, #36]	; 0x24
  svl_packet_write_byte(((packet->pl_len + 3) & 0xFF)); // len low byte  (including command and CRC bytes)
    cd86:	687b      	ldr	r3, [r7, #4]
    cd88:	891b      	ldrh	r3, [r3, #8]
    cd8a:	b2db      	uxtb	r3, r3
    cd8c:	3303      	adds	r3, #3
    cd8e:	b2db      	uxtb	r3, r3
    cd90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  size_t retval = 0x00;
    cd94:	2300      	movs	r3, #0
    cd96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (write_fn != NULL)
    cd98:	4b3d      	ldr	r3, [pc, #244]	; (ce90 <svl_packet_send+0x1e8>)
    cd9a:	681b      	ldr	r3, [r3, #0]
    cd9c:	2b00      	cmp	r3, #0
    cd9e:	d008      	beq.n	cdb2 <svl_packet_send+0x10a>
    retval = write_fn(write_param, c);
    cda0:	4b3b      	ldr	r3, [pc, #236]	; (ce90 <svl_packet_send+0x1e8>)
    cda2:	681b      	ldr	r3, [r3, #0]
    cda4:	4a3b      	ldr	r2, [pc, #236]	; (ce94 <svl_packet_send+0x1ec>)
    cda6:	6812      	ldr	r2, [r2, #0]
    cda8:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
    cdac:	4610      	mov	r0, r2
    cdae:	4798      	blx	r3
    cdb0:	62f8      	str	r0, [r7, #44]	; 0x2c

  svl_packet_write_byte((packet->cmd)); // command byte
    cdb2:	687b      	ldr	r3, [r7, #4]
    cdb4:	781b      	ldrb	r3, [r3, #0]
    cdb6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  size_t retval = 0x00;
    cdba:	2300      	movs	r3, #0
    cdbc:	637b      	str	r3, [r7, #52]	; 0x34
  if (write_fn != NULL)
    cdbe:	4b34      	ldr	r3, [pc, #208]	; (ce90 <svl_packet_send+0x1e8>)
    cdc0:	681b      	ldr	r3, [r3, #0]
    cdc2:	2b00      	cmp	r3, #0
    cdc4:	d008      	beq.n	cdd8 <svl_packet_send+0x130>
    retval = write_fn(write_param, c);
    cdc6:	4b32      	ldr	r3, [pc, #200]	; (ce90 <svl_packet_send+0x1e8>)
    cdc8:	681b      	ldr	r3, [r3, #0]
    cdca:	4a32      	ldr	r2, [pc, #200]	; (ce94 <svl_packet_send+0x1ec>)
    cdcc:	6812      	ldr	r2, [r2, #0]
    cdce:	f897 1039 	ldrb.w	r1, [r7, #57]	; 0x39
    cdd2:	4610      	mov	r0, r2
    cdd4:	4798      	blx	r3
    cdd6:	6378      	str	r0, [r7, #52]	; 0x34

  if ((packet->pl != NULL) && (packet->pl_len != 0))
    cdd8:	687b      	ldr	r3, [r7, #4]
    cdda:	685b      	ldr	r3, [r3, #4]
    cddc:	2b00      	cmp	r3, #0
    cdde:	d02a      	beq.n	ce36 <svl_packet_send+0x18e>
    cde0:	687b      	ldr	r3, [r7, #4]
    cde2:	891b      	ldrh	r3, [r3, #8]
    cde4:	2b00      	cmp	r3, #0
    cde6:	d026      	beq.n	ce36 <svl_packet_send+0x18e>
  {
    for (uint16_t indi = 0; indi < packet->pl_len; indi++)
    cde8:	2300      	movs	r3, #0
    cdea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    cdee:	e01c      	b.n	ce2a <svl_packet_send+0x182>
    { // payload
      svl_packet_write_byte(*(packet->pl + indi));
    cdf0:	687b      	ldr	r3, [r7, #4]
    cdf2:	685a      	ldr	r2, [r3, #4]
    cdf4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
    cdf8:	4413      	add	r3, r2
    cdfa:	781b      	ldrb	r3, [r3, #0]
    cdfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t retval = 0x00;
    ce00:	2300      	movs	r3, #0
    ce02:	61fb      	str	r3, [r7, #28]
  if (write_fn != NULL)
    ce04:	4b22      	ldr	r3, [pc, #136]	; (ce90 <svl_packet_send+0x1e8>)
    ce06:	681b      	ldr	r3, [r3, #0]
    ce08:	2b00      	cmp	r3, #0
    ce0a:	d008      	beq.n	ce1e <svl_packet_send+0x176>
    retval = write_fn(write_param, c);
    ce0c:	4b20      	ldr	r3, [pc, #128]	; (ce90 <svl_packet_send+0x1e8>)
    ce0e:	681b      	ldr	r3, [r3, #0]
    ce10:	4a20      	ldr	r2, [pc, #128]	; (ce94 <svl_packet_send+0x1ec>)
    ce12:	6812      	ldr	r2, [r2, #0]
    ce14:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
    ce18:	4610      	mov	r0, r2
    ce1a:	4798      	blx	r3
    ce1c:	61f8      	str	r0, [r7, #28]
  return retval;
    ce1e:	bf00      	nop
    for (uint16_t indi = 0; indi < packet->pl_len; indi++)
    ce20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
    ce24:	3301      	adds	r3, #1
    ce26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ce2a:	687b      	ldr	r3, [r7, #4]
    ce2c:	891b      	ldrh	r3, [r3, #8]
    ce2e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
    ce32:	429a      	cmp	r2, r3
    ce34:	d3dc      	bcc.n	cdf0 <svl_packet_send+0x148>
    }
  }

  svl_packet_write_byte(CRCH); // CRC H
    ce36:	4b14      	ldr	r3, [pc, #80]	; (ce88 <svl_packet_send+0x1e0>)
    ce38:	781b      	ldrb	r3, [r3, #0]
    ce3a:	74fb      	strb	r3, [r7, #19]
  size_t retval = 0x00;
    ce3c:	2300      	movs	r3, #0
    ce3e:	60fb      	str	r3, [r7, #12]
  if (write_fn != NULL)
    ce40:	4b13      	ldr	r3, [pc, #76]	; (ce90 <svl_packet_send+0x1e8>)
    ce42:	681b      	ldr	r3, [r3, #0]
    ce44:	2b00      	cmp	r3, #0
    ce46:	d007      	beq.n	ce58 <svl_packet_send+0x1b0>
    retval = write_fn(write_param, c);
    ce48:	4b11      	ldr	r3, [pc, #68]	; (ce90 <svl_packet_send+0x1e8>)
    ce4a:	681b      	ldr	r3, [r3, #0]
    ce4c:	4a11      	ldr	r2, [pc, #68]	; (ce94 <svl_packet_send+0x1ec>)
    ce4e:	6812      	ldr	r2, [r2, #0]
    ce50:	7cf9      	ldrb	r1, [r7, #19]
    ce52:	4610      	mov	r0, r2
    ce54:	4798      	blx	r3
    ce56:	60f8      	str	r0, [r7, #12]
  svl_packet_write_byte(CRCL); // CRC L
    ce58:	4b0a      	ldr	r3, [pc, #40]	; (ce84 <svl_packet_send+0x1dc>)
    ce5a:	781b      	ldrb	r3, [r3, #0]
    ce5c:	76fb      	strb	r3, [r7, #27]
  size_t retval = 0x00;
    ce5e:	2300      	movs	r3, #0
    ce60:	617b      	str	r3, [r7, #20]
  if (write_fn != NULL)
    ce62:	4b0b      	ldr	r3, [pc, #44]	; (ce90 <svl_packet_send+0x1e8>)
    ce64:	681b      	ldr	r3, [r3, #0]
    ce66:	2b00      	cmp	r3, #0
    ce68:	d007      	beq.n	ce7a <svl_packet_send+0x1d2>
    retval = write_fn(write_param, c);
    ce6a:	4b09      	ldr	r3, [pc, #36]	; (ce90 <svl_packet_send+0x1e8>)
    ce6c:	681b      	ldr	r3, [r3, #0]
    ce6e:	4a09      	ldr	r2, [pc, #36]	; (ce94 <svl_packet_send+0x1ec>)
    ce70:	6812      	ldr	r2, [r2, #0]
    ce72:	7ef9      	ldrb	r1, [r7, #27]
    ce74:	4610      	mov	r0, r2
    ce76:	4798      	blx	r3
    ce78:	6178      	str	r0, [r7, #20]
}
    ce7a:	bf00      	nop
    ce7c:	3748      	adds	r7, #72	; 0x48
    ce7e:	46bd      	mov	sp, r7
    ce80:	bd80      	pop	{r7, pc}
    ce82:	bf00      	nop
    ce84:	10000a58 	.word	0x10000a58
    ce88:	10000a59 	.word	0x10000a59
    ce8c:	10000000 	.word	0x10000000
    ce90:	10000a4c 	.word	0x10000a4c
    ce94:	10000a40 	.word	0x10000a40

0000ce98 <svl_packet_wait>:

uint8_t svl_packet_wait(svl_packet_t *packet)
{
    ce98:	b580      	push	{r7, lr}
    ce9a:	b08c      	sub	sp, #48	; 0x30
    ce9c:	af00      	add	r7, sp, #0
    ce9e:	6078      	str	r0, [r7, #4]

  // wait for 2 bytes (the length bytes)
  // wait for length bytes to come in
  // make sure that 'length' bytes are enough to satisfy the desired payload length

  if (packet == NULL)
    cea0:	687b      	ldr	r3, [r7, #4]
    cea2:	2b00      	cmp	r3, #0
    cea4:	d101      	bne.n	ceaa <svl_packet_wait+0x12>
  {
    return (SVL_PACKET_ERR);
    cea6:	2301      	movs	r3, #1
    cea8:	e0c1      	b.n	d02e <svl_packet_wait+0x196>
  }

  const uint8_t num_bytes_length = 2;
    ceaa:	2302      	movs	r3, #2
    ceac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (svl_packet_wait_bytes(num_bytes_length))
    ceb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    ceb4:	4618      	mov	r0, r3
    ceb6:	f000 f901 	bl	d0bc <svl_packet_wait_bytes>
    ceba:	4603      	mov	r3, r0
    cebc:	2b00      	cmp	r3, #0
    cebe:	d001      	beq.n	cec4 <svl_packet_wait+0x2c>
  {
    return (SVL_PACKET_ERR_TIMEOUT | SVL_PACKET_LEN);
    cec0:	2382      	movs	r3, #130	; 0x82
    cec2:	e0b4      	b.n	d02e <svl_packet_wait+0x196>
  }
  uint16_t len = svl_packet_get_uint16_t();
    cec4:	f000 f8c2 	bl	d04c <svl_packet_get_uint16_t>
    cec8:	4603      	mov	r3, r0
    ceca:	853b      	strh	r3, [r7, #40]	; 0x28

  if (len == 0)
    cecc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    cece:	2b00      	cmp	r3, #0
    ced0:	d101      	bne.n	ced6 <svl_packet_wait+0x3e>
  {
    return (SVL_PACKET_ERR_ZLP);
    ced2:	2304      	movs	r3, #4
    ced4:	e0ab      	b.n	d02e <svl_packet_wait+0x196>
  }
  if ((len - 3) > packet->max_pl_len)
    ced6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    ced8:	3b03      	subs	r3, #3
    ceda:	687a      	ldr	r2, [r7, #4]
    cedc:	8952      	ldrh	r2, [r2, #10]
    cede:	4293      	cmp	r3, r2
    cee0:	dd01      	ble.n	cee6 <svl_packet_wait+0x4e>
  {
    return (SVL_PACKET_ERR_MEM | SVL_PACKET_PL);
    cee2:	2348      	movs	r3, #72	; 0x48
    cee4:	e0a3      	b.n	d02e <svl_packet_wait+0x196>
  }

  //Wait for entire packet to come in
  if (svl_packet_wait_bytes(len))
    cee6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    cee8:	4618      	mov	r0, r3
    ceea:	f000 f8e7 	bl	d0bc <svl_packet_wait_bytes>
    ceee:	4603      	mov	r3, r0
    cef0:	2b00      	cmp	r3, #0
    cef2:	d001      	beq.n	cef8 <svl_packet_wait+0x60>
    return (SVL_PACKET_ERR_TIMEOUT | SVL_PACKET_PL);
    cef4:	2342      	movs	r3, #66	; 0x42
    cef6:	e09a      	b.n	d02e <svl_packet_wait+0x196>

  uint8_t incoming;
  CRCL = 0;
    cef8:	4b4f      	ldr	r3, [pc, #316]	; (d038 <svl_packet_wait+0x1a0>)
    cefa:	2200      	movs	r2, #0
    cefc:	701a      	strb	r2, [r3, #0]
  CRCH = 0;
    cefe:	4b4f      	ldr	r3, [pc, #316]	; (d03c <svl_packet_wait+0x1a4>)
    cf00:	2200      	movs	r2, #0
    cf02:	701a      	strb	r2, [r3, #0]
    cf04:	f107 030b 	add.w	r3, r7, #11
    cf08:	61fb      	str	r3, [r7, #28]
  size_t retval = 0x00;
    cf0a:	2300      	movs	r3, #0
    cf0c:	61bb      	str	r3, [r7, #24]
  if (read_fn != NULL)
    cf0e:	4b4c      	ldr	r3, [pc, #304]	; (d040 <svl_packet_wait+0x1a8>)
    cf10:	681b      	ldr	r3, [r3, #0]
    cf12:	2b00      	cmp	r3, #0
    cf14:	d007      	beq.n	cf26 <svl_packet_wait+0x8e>
    retval = read_fn(read_param, c);
    cf16:	4b4a      	ldr	r3, [pc, #296]	; (d040 <svl_packet_wait+0x1a8>)
    cf18:	681b      	ldr	r3, [r3, #0]
    cf1a:	4a4a      	ldr	r2, [pc, #296]	; (d044 <svl_packet_wait+0x1ac>)
    cf1c:	6812      	ldr	r2, [r2, #0]
    cf1e:	69f9      	ldr	r1, [r7, #28]
    cf20:	4610      	mov	r0, r2
    cf22:	4798      	blx	r3
    cf24:	61b8      	str	r0, [r7, #24]

  //Get command byte
  svl_packet_read_byte(&incoming);
  packet->cmd = incoming;
    cf26:	7afa      	ldrb	r2, [r7, #11]
    cf28:	687b      	ldr	r3, [r7, #4]
    cf2a:	701a      	strb	r2, [r3, #0]
  updateCRC(incoming); //Add this byte to CRC
    cf2c:	7afb      	ldrb	r3, [r7, #11]
    cf2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint16_t tableAddr = (num ^ CRCH);
    cf32:	4b42      	ldr	r3, [pc, #264]	; (d03c <svl_packet_wait+0x1a4>)
    cf34:	781a      	ldrb	r2, [r3, #0]
    cf36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    cf3a:	4053      	eors	r3, r2
    cf3c:	b2db      	uxtb	r3, r3
    cf3e:	843b      	strh	r3, [r7, #32]
  CRCH = (CRC_Table[tableAddr] >> 8) ^ CRCL;
    cf40:	8c3b      	ldrh	r3, [r7, #32]
    cf42:	4a41      	ldr	r2, [pc, #260]	; (d048 <svl_packet_wait+0x1b0>)
    cf44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cf48:	0a1b      	lsrs	r3, r3, #8
    cf4a:	b29b      	uxth	r3, r3
    cf4c:	b2da      	uxtb	r2, r3
    cf4e:	4b3a      	ldr	r3, [pc, #232]	; (d038 <svl_packet_wait+0x1a0>)
    cf50:	781b      	ldrb	r3, [r3, #0]
    cf52:	4053      	eors	r3, r2
    cf54:	b2da      	uxtb	r2, r3
    cf56:	4b39      	ldr	r3, [pc, #228]	; (d03c <svl_packet_wait+0x1a4>)
    cf58:	701a      	strb	r2, [r3, #0]
  CRCL = (CRC_Table[tableAddr] & 0x00FF);
    cf5a:	8c3b      	ldrh	r3, [r7, #32]
    cf5c:	4a3a      	ldr	r2, [pc, #232]	; (d048 <svl_packet_wait+0x1b0>)
    cf5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cf62:	b2da      	uxtb	r2, r3
    cf64:	4b34      	ldr	r3, [pc, #208]	; (d038 <svl_packet_wait+0x1a0>)
    cf66:	701a      	strb	r2, [r3, #0]
}
    cf68:	bf00      	nop

  packet->pl_len = (len - 3);
    cf6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    cf6c:	3b03      	subs	r3, #3
    cf6e:	b29a      	uxth	r2, r3
    cf70:	687b      	ldr	r3, [r7, #4]
    cf72:	811a      	strh	r2, [r3, #8]

  //Now read the data coming in
  if ((packet->pl != NULL) && (packet->max_pl_len != 0))
    cf74:	687b      	ldr	r3, [r7, #4]
    cf76:	685b      	ldr	r3, [r3, #4]
    cf78:	2b00      	cmp	r3, #0
    cf7a:	d043      	beq.n	d004 <svl_packet_wait+0x16c>
    cf7c:	687b      	ldr	r3, [r7, #4]
    cf7e:	895b      	ldrh	r3, [r3, #10]
    cf80:	2b00      	cmp	r3, #0
    cf82:	d03f      	beq.n	d004 <svl_packet_wait+0x16c>
  {
    for (uint32_t x = 0; x < packet->pl_len; x++)
    cf84:	2300      	movs	r3, #0
    cf86:	62fb      	str	r3, [r7, #44]	; 0x2c
    cf88:	e036      	b.n	cff8 <svl_packet_wait+0x160>
    cf8a:	f107 030b 	add.w	r3, r7, #11
    cf8e:	613b      	str	r3, [r7, #16]
  size_t retval = 0x00;
    cf90:	2300      	movs	r3, #0
    cf92:	60fb      	str	r3, [r7, #12]
  if (read_fn != NULL)
    cf94:	4b2a      	ldr	r3, [pc, #168]	; (d040 <svl_packet_wait+0x1a8>)
    cf96:	681b      	ldr	r3, [r3, #0]
    cf98:	2b00      	cmp	r3, #0
    cf9a:	d007      	beq.n	cfac <svl_packet_wait+0x114>
    retval = read_fn(read_param, c);
    cf9c:	4b28      	ldr	r3, [pc, #160]	; (d040 <svl_packet_wait+0x1a8>)
    cf9e:	681b      	ldr	r3, [r3, #0]
    cfa0:	4a28      	ldr	r2, [pc, #160]	; (d044 <svl_packet_wait+0x1ac>)
    cfa2:	6812      	ldr	r2, [r2, #0]
    cfa4:	6939      	ldr	r1, [r7, #16]
    cfa6:	4610      	mov	r0, r2
    cfa8:	4798      	blx	r3
    cfaa:	60f8      	str	r0, [r7, #12]
    {
      svl_packet_read_byte(&incoming);

      updateCRC(incoming); //Add this byte to CRC
    cfac:	7afb      	ldrb	r3, [r7, #11]
    cfae:	75fb      	strb	r3, [r7, #23]
  uint16_t tableAddr = (num ^ CRCH);
    cfb0:	4b22      	ldr	r3, [pc, #136]	; (d03c <svl_packet_wait+0x1a4>)
    cfb2:	781a      	ldrb	r2, [r3, #0]
    cfb4:	7dfb      	ldrb	r3, [r7, #23]
    cfb6:	4053      	eors	r3, r2
    cfb8:	b2db      	uxtb	r3, r3
    cfba:	82bb      	strh	r3, [r7, #20]
  CRCH = (CRC_Table[tableAddr] >> 8) ^ CRCL;
    cfbc:	8abb      	ldrh	r3, [r7, #20]
    cfbe:	4a22      	ldr	r2, [pc, #136]	; (d048 <svl_packet_wait+0x1b0>)
    cfc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cfc4:	0a1b      	lsrs	r3, r3, #8
    cfc6:	b29b      	uxth	r3, r3
    cfc8:	b2da      	uxtb	r2, r3
    cfca:	4b1b      	ldr	r3, [pc, #108]	; (d038 <svl_packet_wait+0x1a0>)
    cfcc:	781b      	ldrb	r3, [r3, #0]
    cfce:	4053      	eors	r3, r2
    cfd0:	b2da      	uxtb	r2, r3
    cfd2:	4b1a      	ldr	r3, [pc, #104]	; (d03c <svl_packet_wait+0x1a4>)
    cfd4:	701a      	strb	r2, [r3, #0]
  CRCL = (CRC_Table[tableAddr] & 0x00FF);
    cfd6:	8abb      	ldrh	r3, [r7, #20]
    cfd8:	4a1b      	ldr	r2, [pc, #108]	; (d048 <svl_packet_wait+0x1b0>)
    cfda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cfde:	b2da      	uxtb	r2, r3
    cfe0:	4b15      	ldr	r3, [pc, #84]	; (d038 <svl_packet_wait+0x1a0>)
    cfe2:	701a      	strb	r2, [r3, #0]
}
    cfe4:	bf00      	nop

      *(packet->pl + x) = incoming; //Fill payload with data
    cfe6:	687b      	ldr	r3, [r7, #4]
    cfe8:	685a      	ldr	r2, [r3, #4]
    cfea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cfec:	4413      	add	r3, r2
    cfee:	7afa      	ldrb	r2, [r7, #11]
    cff0:	701a      	strb	r2, [r3, #0]
    for (uint32_t x = 0; x < packet->pl_len; x++)
    cff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cff4:	3301      	adds	r3, #1
    cff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    cff8:	687b      	ldr	r3, [r7, #4]
    cffa:	891b      	ldrh	r3, [r3, #8]
    cffc:	461a      	mov	r2, r3
    cffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d000:	4293      	cmp	r3, r2
    d002:	d3c2      	bcc.n	cf8a <svl_packet_wait+0xf2>
    }
  }

  uint16_t crc = svl_packet_get_uint16_t(); //Read final two bytes into CRC
    d004:	f000 f822 	bl	d04c <svl_packet_get_uint16_t>
    d008:	4603      	mov	r3, r0
    d00a:	84fb      	strh	r3, [r7, #38]	; 0x26

  uint16_t check = ((uint16_t)CRCH << 8) | CRCL;
    d00c:	4b0b      	ldr	r3, [pc, #44]	; (d03c <svl_packet_wait+0x1a4>)
    d00e:	781b      	ldrb	r3, [r3, #0]
    d010:	021b      	lsls	r3, r3, #8
    d012:	b21a      	sxth	r2, r3
    d014:	4b08      	ldr	r3, [pc, #32]	; (d038 <svl_packet_wait+0x1a0>)
    d016:	781b      	ldrb	r3, [r3, #0]
    d018:	b21b      	sxth	r3, r3
    d01a:	4313      	orrs	r3, r2
    d01c:	b21b      	sxth	r3, r3
    d01e:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (crc != check)
    d020:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    d024:	429a      	cmp	r2, r3
    d026:	d001      	beq.n	d02c <svl_packet_wait+0x194>
  {
    return (SVL_PACKET_ERR_CRC);
    d028:	2310      	movs	r3, #16
    d02a:	e000      	b.n	d02e <svl_packet_wait+0x196>
  }

  return (SVL_PACKET_OK);
    d02c:	2300      	movs	r3, #0
}
    d02e:	4618      	mov	r0, r3
    d030:	3730      	adds	r7, #48	; 0x30
    d032:	46bd      	mov	sp, r7
    d034:	bd80      	pop	{r7, pc}
    d036:	bf00      	nop
    d038:	10000a58 	.word	0x10000a58
    d03c:	10000a59 	.word	0x10000a59
    d040:	10000a48 	.word	0x10000a48
    d044:	10000a3c 	.word	0x10000a3c
    d048:	10000000 	.word	0x10000000

0000d04c <svl_packet_get_uint16_t>:

uint16_t svl_packet_get_uint16_t(void)
{
    d04c:	b580      	push	{r7, lr}
    d04e:	b086      	sub	sp, #24
    d050:	af00      	add	r7, sp, #0
  uint8_t h = 0x00;
    d052:	2300      	movs	r3, #0
    d054:	71fb      	strb	r3, [r7, #7]
  uint8_t l = 0x00;
    d056:	2300      	movs	r3, #0
    d058:	71bb      	strb	r3, [r7, #6]
    d05a:	1dfb      	adds	r3, r7, #7
    d05c:	60fb      	str	r3, [r7, #12]
  size_t retval = 0x00;
    d05e:	2300      	movs	r3, #0
    d060:	60bb      	str	r3, [r7, #8]
  if (read_fn != NULL)
    d062:	4b14      	ldr	r3, [pc, #80]	; (d0b4 <svl_packet_get_uint16_t+0x68>)
    d064:	681b      	ldr	r3, [r3, #0]
    d066:	2b00      	cmp	r3, #0
    d068:	d007      	beq.n	d07a <svl_packet_get_uint16_t+0x2e>
    retval = read_fn(read_param, c);
    d06a:	4b12      	ldr	r3, [pc, #72]	; (d0b4 <svl_packet_get_uint16_t+0x68>)
    d06c:	681b      	ldr	r3, [r3, #0]
    d06e:	4a12      	ldr	r2, [pc, #72]	; (d0b8 <svl_packet_get_uint16_t+0x6c>)
    d070:	6812      	ldr	r2, [r2, #0]
    d072:	68f9      	ldr	r1, [r7, #12]
    d074:	4610      	mov	r0, r2
    d076:	4798      	blx	r3
    d078:	60b8      	str	r0, [r7, #8]
    d07a:	1dbb      	adds	r3, r7, #6
    d07c:	617b      	str	r3, [r7, #20]
  size_t retval = 0x00;
    d07e:	2300      	movs	r3, #0
    d080:	613b      	str	r3, [r7, #16]
  if (read_fn != NULL)
    d082:	4b0c      	ldr	r3, [pc, #48]	; (d0b4 <svl_packet_get_uint16_t+0x68>)
    d084:	681b      	ldr	r3, [r3, #0]
    d086:	2b00      	cmp	r3, #0
    d088:	d007      	beq.n	d09a <svl_packet_get_uint16_t+0x4e>
    retval = read_fn(read_param, c);
    d08a:	4b0a      	ldr	r3, [pc, #40]	; (d0b4 <svl_packet_get_uint16_t+0x68>)
    d08c:	681b      	ldr	r3, [r3, #0]
    d08e:	4a0a      	ldr	r2, [pc, #40]	; (d0b8 <svl_packet_get_uint16_t+0x6c>)
    d090:	6812      	ldr	r2, [r2, #0]
    d092:	6979      	ldr	r1, [r7, #20]
    d094:	4610      	mov	r0, r2
    d096:	4798      	blx	r3
    d098:	6138      	str	r0, [r7, #16]
  svl_packet_read_byte(&h);
  svl_packet_read_byte(&l);
  return (((uint16_t)h << 8) | (l & 0xFF));
    d09a:	79fb      	ldrb	r3, [r7, #7]
    d09c:	021b      	lsls	r3, r3, #8
    d09e:	b21a      	sxth	r2, r3
    d0a0:	79bb      	ldrb	r3, [r7, #6]
    d0a2:	b21b      	sxth	r3, r3
    d0a4:	4313      	orrs	r3, r2
    d0a6:	b21b      	sxth	r3, r3
    d0a8:	b29b      	uxth	r3, r3
}
    d0aa:	4618      	mov	r0, r3
    d0ac:	3718      	adds	r7, #24
    d0ae:	46bd      	mov	sp, r7
    d0b0:	bd80      	pop	{r7, pc}
    d0b2:	bf00      	nop
    d0b4:	10000a48 	.word	0x10000a48
    d0b8:	10000a3c 	.word	0x10000a3c

0000d0bc <svl_packet_wait_bytes>:

uint8_t svl_packet_wait_bytes(uint32_t num)
{
    d0bc:	b580      	push	{r7, lr}
    d0be:	b088      	sub	sp, #32
    d0c0:	af00      	add	r7, sp, #0
    d0c2:	6078      	str	r0, [r7, #4]
  uint32_t timeout_ms = 500;
    d0c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    d0c8:	61fb      	str	r3, [r7, #28]
  size_t retval = 0x00;
    d0ca:	2300      	movs	r3, #0
    d0cc:	613b      	str	r3, [r7, #16]
  if (millis_fn != NULL)
    d0ce:	4b1b      	ldr	r3, [pc, #108]	; (d13c <svl_packet_wait_bytes+0x80>)
    d0d0:	681b      	ldr	r3, [r3, #0]
    d0d2:	2b00      	cmp	r3, #0
    d0d4:	d003      	beq.n	d0de <svl_packet_wait_bytes+0x22>
    retval = millis_fn();
    d0d6:	4b19      	ldr	r3, [pc, #100]	; (d13c <svl_packet_wait_bytes+0x80>)
    d0d8:	681b      	ldr	r3, [r3, #0]
    d0da:	4798      	blx	r3
    d0dc:	6138      	str	r0, [r7, #16]
  return retval;
    d0de:	693b      	ldr	r3, [r7, #16]
  uint32_t start = svl_packet_millis();
    d0e0:	61bb      	str	r3, [r7, #24]
  uint32_t avail = 0;
    d0e2:	2300      	movs	r3, #0
    d0e4:	617b      	str	r3, [r7, #20]

  while ((svl_packet_millis() - start) < timeout_ms)
    d0e6:	e014      	b.n	d112 <svl_packet_wait_bytes+0x56>
  size_t retval = 0x00;
    d0e8:	2300      	movs	r3, #0
    d0ea:	60fb      	str	r3, [r7, #12]
  if (avail_fn != NULL)
    d0ec:	4b14      	ldr	r3, [pc, #80]	; (d140 <svl_packet_wait_bytes+0x84>)
    d0ee:	681b      	ldr	r3, [r3, #0]
    d0f0:	2b00      	cmp	r3, #0
    d0f2:	d006      	beq.n	d102 <svl_packet_wait_bytes+0x46>
    retval = avail_fn(avail_param);
    d0f4:	4b12      	ldr	r3, [pc, #72]	; (d140 <svl_packet_wait_bytes+0x84>)
    d0f6:	681b      	ldr	r3, [r3, #0]
    d0f8:	4a12      	ldr	r2, [pc, #72]	; (d144 <svl_packet_wait_bytes+0x88>)
    d0fa:	6812      	ldr	r2, [r2, #0]
    d0fc:	4610      	mov	r0, r2
    d0fe:	4798      	blx	r3
    d100:	60f8      	str	r0, [r7, #12]
  return retval;
    d102:	68fb      	ldr	r3, [r7, #12]
  {
    avail = svl_packet_avail_bytes();
    d104:	617b      	str	r3, [r7, #20]
    if (avail >= num)
    d106:	697a      	ldr	r2, [r7, #20]
    d108:	687b      	ldr	r3, [r7, #4]
    d10a:	429a      	cmp	r2, r3
    d10c:	d301      	bcc.n	d112 <svl_packet_wait_bytes+0x56>
    {
      return 0;
    d10e:	2300      	movs	r3, #0
    d110:	e010      	b.n	d134 <svl_packet_wait_bytes+0x78>
  size_t retval = 0x00;
    d112:	2300      	movs	r3, #0
    d114:	60bb      	str	r3, [r7, #8]
  if (millis_fn != NULL)
    d116:	4b09      	ldr	r3, [pc, #36]	; (d13c <svl_packet_wait_bytes+0x80>)
    d118:	681b      	ldr	r3, [r3, #0]
    d11a:	2b00      	cmp	r3, #0
    d11c:	d003      	beq.n	d126 <svl_packet_wait_bytes+0x6a>
    retval = millis_fn();
    d11e:	4b07      	ldr	r3, [pc, #28]	; (d13c <svl_packet_wait_bytes+0x80>)
    d120:	681b      	ldr	r3, [r3, #0]
    d122:	4798      	blx	r3
    d124:	60b8      	str	r0, [r7, #8]
  return retval;
    d126:	68ba      	ldr	r2, [r7, #8]
  while ((svl_packet_millis() - start) < timeout_ms)
    d128:	69bb      	ldr	r3, [r7, #24]
    d12a:	1ad3      	subs	r3, r2, r3
    d12c:	69fa      	ldr	r2, [r7, #28]
    d12e:	429a      	cmp	r2, r3
    d130:	d8da      	bhi.n	d0e8 <svl_packet_wait_bytes+0x2c>
    }
  }

  // debug_printf("only got %d bytes...\n",avail);
  return 1;
    d132:	2301      	movs	r3, #1
    d134:	4618      	mov	r0, r3
    d136:	3720      	adds	r7, #32
    d138:	46bd      	mov	sp, r7
    d13a:	bd80      	pop	{r7, pc}
    d13c:	10000a54 	.word	0x10000a54
    d140:	10000a50 	.word	0x10000a50
    d144:	10000a44 	.word	0x10000a44

0000d148 <art_svl_ringbuf_init>:
#include "svl_ringbuf.h"

size_t art_svl_ringbuf_init( void* vrb, uint8_t* buf, size_t len ){
    d148:	b480      	push	{r7}
    d14a:	b087      	sub	sp, #28
    d14c:	af00      	add	r7, sp, #0
    d14e:	60f8      	str	r0, [r7, #12]
    d150:	60b9      	str	r1, [r7, #8]
    d152:	607a      	str	r2, [r7, #4]
    if( vrb == NULL ){ return 0; }
    d154:	68fb      	ldr	r3, [r7, #12]
    d156:	2b00      	cmp	r3, #0
    d158:	d101      	bne.n	d15e <art_svl_ringbuf_init+0x16>
    d15a:	2300      	movs	r3, #0
    d15c:	e00f      	b.n	d17e <art_svl_ringbuf_init+0x36>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d15e:	68fb      	ldr	r3, [r7, #12]
    d160:	617b      	str	r3, [r7, #20]
    
    rb->buf = buf;
    d162:	697b      	ldr	r3, [r7, #20]
    d164:	68ba      	ldr	r2, [r7, #8]
    d166:	601a      	str	r2, [r3, #0]
    rb->len = len;
    d168:	697b      	ldr	r3, [r7, #20]
    d16a:	687a      	ldr	r2, [r7, #4]
    d16c:	605a      	str	r2, [r3, #4]
    rb->r_offset = 0;
    d16e:	697b      	ldr	r3, [r7, #20]
    d170:	2200      	movs	r2, #0
    d172:	609a      	str	r2, [r3, #8]
    rb->w_offset = 0;
    d174:	697b      	ldr	r3, [r7, #20]
    d176:	2200      	movs	r2, #0
    d178:	60da      	str	r2, [r3, #12]

    return rb->len;
    d17a:	697b      	ldr	r3, [r7, #20]
    d17c:	685b      	ldr	r3, [r3, #4]
}
    d17e:	4618      	mov	r0, r3
    d180:	371c      	adds	r7, #28
    d182:	46bd      	mov	sp, r7
    d184:	f85d 7b04 	ldr.w	r7, [sp], #4
    d188:	4770      	bx	lr

0000d18a <art_svl_ringbuf_available>:

size_t art_svl_ringbuf_available( void* vrb ){
    d18a:	b480      	push	{r7}
    d18c:	b085      	sub	sp, #20
    d18e:	af00      	add	r7, sp, #0
    d190:	6078      	str	r0, [r7, #4]
    if( vrb == NULL ){ return 0; }
    d192:	687b      	ldr	r3, [r7, #4]
    d194:	2b00      	cmp	r3, #0
    d196:	d101      	bne.n	d19c <art_svl_ringbuf_available+0x12>
    d198:	2300      	movs	r3, #0
    d19a:	e01a      	b.n	d1d2 <art_svl_ringbuf_available+0x48>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d19c:	687b      	ldr	r3, [r7, #4]
    d19e:	60bb      	str	r3, [r7, #8]

    size_t avail = 0x00;
    d1a0:	2300      	movs	r3, #0
    d1a2:	60fb      	str	r3, [r7, #12]
    if((rb->w_offset) >= (rb->r_offset)){
    d1a4:	68bb      	ldr	r3, [r7, #8]
    d1a6:	68da      	ldr	r2, [r3, #12]
    d1a8:	68bb      	ldr	r3, [r7, #8]
    d1aa:	689b      	ldr	r3, [r3, #8]
    d1ac:	429a      	cmp	r2, r3
    d1ae:	d306      	bcc.n	d1be <art_svl_ringbuf_available+0x34>
        avail = rb->w_offset - rb->r_offset;
    d1b0:	68bb      	ldr	r3, [r7, #8]
    d1b2:	68da      	ldr	r2, [r3, #12]
    d1b4:	68bb      	ldr	r3, [r7, #8]
    d1b6:	689b      	ldr	r3, [r3, #8]
    d1b8:	1ad3      	subs	r3, r2, r3
    d1ba:	60fb      	str	r3, [r7, #12]
    d1bc:	e008      	b.n	d1d0 <art_svl_ringbuf_available+0x46>
    }else{
        avail = rb->len - (rb->r_offset - rb->w_offset);
    d1be:	68bb      	ldr	r3, [r7, #8]
    d1c0:	685a      	ldr	r2, [r3, #4]
    d1c2:	68bb      	ldr	r3, [r7, #8]
    d1c4:	68d9      	ldr	r1, [r3, #12]
    d1c6:	68bb      	ldr	r3, [r7, #8]
    d1c8:	689b      	ldr	r3, [r3, #8]
    d1ca:	1acb      	subs	r3, r1, r3
    d1cc:	4413      	add	r3, r2
    d1ce:	60fb      	str	r3, [r7, #12]
    }
    return avail;
    d1d0:	68fb      	ldr	r3, [r7, #12]
}
    d1d2:	4618      	mov	r0, r3
    d1d4:	3714      	adds	r7, #20
    d1d6:	46bd      	mov	sp, r7
    d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1dc:	4770      	bx	lr

0000d1de <art_svl_ringbuf_bytes_free>:

size_t art_svl_ringbuf_bytes_free( void* vrb ){
    d1de:	b480      	push	{r7}
    d1e0:	b085      	sub	sp, #20
    d1e2:	af00      	add	r7, sp, #0
    d1e4:	6078      	str	r0, [r7, #4]
    if( vrb == NULL ){ return 0; }
    d1e6:	687b      	ldr	r3, [r7, #4]
    d1e8:	2b00      	cmp	r3, #0
    d1ea:	d101      	bne.n	d1f0 <art_svl_ringbuf_bytes_free+0x12>
    d1ec:	2300      	movs	r3, #0
    d1ee:	e01c      	b.n	d22a <art_svl_ringbuf_bytes_free+0x4c>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d1f0:	687b      	ldr	r3, [r7, #4]
    d1f2:	60bb      	str	r3, [r7, #8]

    size_t friegh = 0x00;
    d1f4:	2300      	movs	r3, #0
    d1f6:	60fb      	str	r3, [r7, #12]
    if((rb->w_offset) >= (rb->r_offset)){
    d1f8:	68bb      	ldr	r3, [r7, #8]
    d1fa:	68da      	ldr	r2, [r3, #12]
    d1fc:	68bb      	ldr	r3, [r7, #8]
    d1fe:	689b      	ldr	r3, [r3, #8]
    d200:	429a      	cmp	r2, r3
    d202:	d30a      	bcc.n	d21a <art_svl_ringbuf_bytes_free+0x3c>
        friegh = rb->len - rb->w_offset + rb->r_offset -1;
    d204:	68bb      	ldr	r3, [r7, #8]
    d206:	685a      	ldr	r2, [r3, #4]
    d208:	68bb      	ldr	r3, [r7, #8]
    d20a:	68db      	ldr	r3, [r3, #12]
    d20c:	1ad2      	subs	r2, r2, r3
    d20e:	68bb      	ldr	r3, [r7, #8]
    d210:	689b      	ldr	r3, [r3, #8]
    d212:	4413      	add	r3, r2
    d214:	3b01      	subs	r3, #1
    d216:	60fb      	str	r3, [r7, #12]
    d218:	e006      	b.n	d228 <art_svl_ringbuf_bytes_free+0x4a>
    }else{
        friegh = rb->r_offset - rb->w_offset - 1;
    d21a:	68bb      	ldr	r3, [r7, #8]
    d21c:	689a      	ldr	r2, [r3, #8]
    d21e:	68bb      	ldr	r3, [r7, #8]
    d220:	68db      	ldr	r3, [r3, #12]
    d222:	1ad3      	subs	r3, r2, r3
    d224:	3b01      	subs	r3, #1
    d226:	60fb      	str	r3, [r7, #12]
    }
    return friegh;
    d228:	68fb      	ldr	r3, [r7, #12]
}
    d22a:	4618      	mov	r0, r3
    d22c:	3714      	adds	r7, #20
    d22e:	46bd      	mov	sp, r7
    d230:	f85d 7b04 	ldr.w	r7, [sp], #4
    d234:	4770      	bx	lr

0000d236 <art_svl_ringbuf_write>:

size_t art_svl_ringbuf_write( void* vrb, uint8_t c ){
    d236:	b580      	push	{r7, lr}
    d238:	b084      	sub	sp, #16
    d23a:	af00      	add	r7, sp, #0
    d23c:	6078      	str	r0, [r7, #4]
    d23e:	460b      	mov	r3, r1
    d240:	70fb      	strb	r3, [r7, #3]
    if( vrb == NULL ){ return 0; }
    d242:	687b      	ldr	r3, [r7, #4]
    d244:	2b00      	cmp	r3, #0
    d246:	d101      	bne.n	d24c <art_svl_ringbuf_write+0x16>
    d248:	2300      	movs	r3, #0
    d24a:	e01f      	b.n	d28c <art_svl_ringbuf_write+0x56>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d24c:	687b      	ldr	r3, [r7, #4]
    d24e:	60fb      	str	r3, [r7, #12]

    if(art_svl_ringbuf_bytes_free(rb) > 0){
    d250:	68f8      	ldr	r0, [r7, #12]
    d252:	f7ff ffc4 	bl	d1de <art_svl_ringbuf_bytes_free>
    d256:	4603      	mov	r3, r0
    d258:	2b00      	cmp	r3, #0
    d25a:	d016      	beq.n	d28a <art_svl_ringbuf_write+0x54>
        *(rb->buf + rb->w_offset) = c;
    d25c:	68fb      	ldr	r3, [r7, #12]
    d25e:	681a      	ldr	r2, [r3, #0]
    d260:	68fb      	ldr	r3, [r7, #12]
    d262:	68db      	ldr	r3, [r3, #12]
    d264:	4413      	add	r3, r2
    d266:	78fa      	ldrb	r2, [r7, #3]
    d268:	701a      	strb	r2, [r3, #0]
        rb->w_offset++;
    d26a:	68fb      	ldr	r3, [r7, #12]
    d26c:	68db      	ldr	r3, [r3, #12]
    d26e:	1c5a      	adds	r2, r3, #1
    d270:	68fb      	ldr	r3, [r7, #12]
    d272:	60da      	str	r2, [r3, #12]
        if(rb->w_offset >= rb->len){
    d274:	68fb      	ldr	r3, [r7, #12]
    d276:	68da      	ldr	r2, [r3, #12]
    d278:	68fb      	ldr	r3, [r7, #12]
    d27a:	685b      	ldr	r3, [r3, #4]
    d27c:	429a      	cmp	r2, r3
    d27e:	d302      	bcc.n	d286 <art_svl_ringbuf_write+0x50>
            rb->w_offset = 0;
    d280:	68fb      	ldr	r3, [r7, #12]
    d282:	2200      	movs	r2, #0
    d284:	60da      	str	r2, [r3, #12]
        }
        return 1;
    d286:	2301      	movs	r3, #1
    d288:	e000      	b.n	d28c <art_svl_ringbuf_write+0x56>
    }
    return 0;
    d28a:	2300      	movs	r3, #0
}
    d28c:	4618      	mov	r0, r3
    d28e:	3710      	adds	r7, #16
    d290:	46bd      	mov	sp, r7
    d292:	bd80      	pop	{r7, pc}

0000d294 <art_svl_ringbuf_read>:

size_t art_svl_ringbuf_read( void* vrb, uint8_t* c ){
    d294:	b580      	push	{r7, lr}
    d296:	b084      	sub	sp, #16
    d298:	af00      	add	r7, sp, #0
    d29a:	6078      	str	r0, [r7, #4]
    d29c:	6039      	str	r1, [r7, #0]
    if( vrb == NULL ){ return 0; }
    d29e:	687b      	ldr	r3, [r7, #4]
    d2a0:	2b00      	cmp	r3, #0
    d2a2:	d101      	bne.n	d2a8 <art_svl_ringbuf_read+0x14>
    d2a4:	2300      	movs	r3, #0
    d2a6:	e020      	b.n	d2ea <art_svl_ringbuf_read+0x56>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d2a8:	687b      	ldr	r3, [r7, #4]
    d2aa:	60fb      	str	r3, [r7, #12]
    
    if(art_svl_ringbuf_available(rb) > 0){
    d2ac:	68f8      	ldr	r0, [r7, #12]
    d2ae:	f7ff ff6c 	bl	d18a <art_svl_ringbuf_available>
    d2b2:	4603      	mov	r3, r0
    d2b4:	2b00      	cmp	r3, #0
    d2b6:	d017      	beq.n	d2e8 <art_svl_ringbuf_read+0x54>
        *c = *(rb->buf + rb->r_offset);
    d2b8:	68fb      	ldr	r3, [r7, #12]
    d2ba:	681a      	ldr	r2, [r3, #0]
    d2bc:	68fb      	ldr	r3, [r7, #12]
    d2be:	689b      	ldr	r3, [r3, #8]
    d2c0:	4413      	add	r3, r2
    d2c2:	781a      	ldrb	r2, [r3, #0]
    d2c4:	683b      	ldr	r3, [r7, #0]
    d2c6:	701a      	strb	r2, [r3, #0]
        rb->r_offset++;
    d2c8:	68fb      	ldr	r3, [r7, #12]
    d2ca:	689b      	ldr	r3, [r3, #8]
    d2cc:	1c5a      	adds	r2, r3, #1
    d2ce:	68fb      	ldr	r3, [r7, #12]
    d2d0:	609a      	str	r2, [r3, #8]
        if(rb->r_offset >= rb->len){
    d2d2:	68fb      	ldr	r3, [r7, #12]
    d2d4:	689a      	ldr	r2, [r3, #8]
    d2d6:	68fb      	ldr	r3, [r7, #12]
    d2d8:	685b      	ldr	r3, [r3, #4]
    d2da:	429a      	cmp	r2, r3
    d2dc:	d302      	bcc.n	d2e4 <art_svl_ringbuf_read+0x50>
            rb->r_offset = 0;
    d2de:	68fb      	ldr	r3, [r7, #12]
    d2e0:	2200      	movs	r2, #0
    d2e2:	609a      	str	r2, [r3, #8]
        }
        return 1;
    d2e4:	2301      	movs	r3, #1
    d2e6:	e000      	b.n	d2ea <art_svl_ringbuf_read+0x56>
    }
    return 0;
    d2e8:	2300      	movs	r3, #0
    d2ea:	4618      	mov	r0, r3
    d2ec:	3710      	adds	r7, #16
    d2ee:	46bd      	mov	sp, r7
    d2f0:	bd80      	pop	{r7, pc}

0000d2f2 <svl_uart_read>:
//*****************************************************************************
//
// UART read buffer
//
//*****************************************************************************
size_t svl_uart_read(void *pHandle, char* buf, size_t len){
    d2f2:	b580      	push	{r7, lr}
    d2f4:	b08a      	sub	sp, #40	; 0x28
    d2f6:	af00      	add	r7, sp, #0
    d2f8:	60f8      	str	r0, [r7, #12]
    d2fa:	60b9      	str	r1, [r7, #8]
    d2fc:	607a      	str	r2, [r7, #4]
    uint32_t ui32BytesRead = 0x00;
    d2fe:	2300      	movs	r3, #0
    d300:	627b      	str	r3, [r7, #36]	; 0x24
    am_hal_uart_transfer_t sRead = {
    d302:	2301      	movs	r3, #1
    d304:	613b      	str	r3, [r7, #16]
    d306:	68bb      	ldr	r3, [r7, #8]
    d308:	617b      	str	r3, [r7, #20]
    d30a:	687b      	ldr	r3, [r7, #4]
    d30c:	61bb      	str	r3, [r7, #24]
    d30e:	2300      	movs	r3, #0
    d310:	61fb      	str	r3, [r7, #28]
    d312:	f107 0324 	add.w	r3, r7, #36	; 0x24
    d316:	623b      	str	r3, [r7, #32]
        .pui8Data = (uint8_t*)buf,
        .ui32NumBytes = len,
        .ui32TimeoutMs = 0,
        .pui32BytesTransferred = &ui32BytesRead,
    };
    am_hal_uart_transfer(pHandle, &sRead);
    d318:	f107 0310 	add.w	r3, r7, #16
    d31c:	4619      	mov	r1, r3
    d31e:	68f8      	ldr	r0, [r7, #12]
    d320:	f001 f916 	bl	e550 <am_hal_uart_transfer>
    return ui32BytesRead;
    d324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d326:	4618      	mov	r0, r3
    d328:	3728      	adds	r7, #40	; 0x28
    d32a:	46bd      	mov	sp, r7
    d32c:	bd80      	pop	{r7, pc}

0000d32e <svl_uart_write>:
//*****************************************************************************
//
// UART write buffer
//
//*****************************************************************************
size_t svl_uart_write(void *pHandle, char* buf, size_t len){
    d32e:	b580      	push	{r7, lr}
    d330:	b08a      	sub	sp, #40	; 0x28
    d332:	af00      	add	r7, sp, #0
    d334:	60f8      	str	r0, [r7, #12]
    d336:	60b9      	str	r1, [r7, #8]
    d338:	607a      	str	r2, [r7, #4]
    uint32_t ui32BytesWritten = 0;
    d33a:	2300      	movs	r3, #0
    d33c:	627b      	str	r3, [r7, #36]	; 0x24
    const am_hal_uart_transfer_t sUartWrite =
    d33e:	2300      	movs	r3, #0
    d340:	613b      	str	r3, [r7, #16]
    d342:	68bb      	ldr	r3, [r7, #8]
    d344:	617b      	str	r3, [r7, #20]
    d346:	687b      	ldr	r3, [r7, #4]
    d348:	61bb      	str	r3, [r7, #24]
    d34a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d34e:	61fb      	str	r3, [r7, #28]
    d350:	f107 0324 	add.w	r3, r7, #36	; 0x24
    d354:	623b      	str	r3, [r7, #32]
        .ui32NumBytes = len,
        .ui32TimeoutMs = AM_HAL_UART_WAIT_FOREVER,
        .pui32BytesTransferred = &ui32BytesWritten,
    };

    am_hal_uart_transfer(pHandle, &sUartWrite);
    d356:	f107 0310 	add.w	r3, r7, #16
    d35a:	4619      	mov	r1, r3
    d35c:	68f8      	ldr	r0, [r7, #12]
    d35e:	f001 f8f7 	bl	e550 <am_hal_uart_transfer>

    return ui32BytesWritten;
    d362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d364:	4618      	mov	r0, r3
    d366:	3728      	adds	r7, #40	; 0x28
    d368:	46bd      	mov	sp, r7
    d36a:	bd80      	pop	{r7, pc}

0000d36c <svl_uart_write_byte>:
//*****************************************************************************
//
// UART write byte
//
//*****************************************************************************
size_t svl_uart_write_byte(void *pHandle, uint8_t c){
    d36c:	b580      	push	{r7, lr}
    d36e:	b082      	sub	sp, #8
    d370:	af00      	add	r7, sp, #0
    d372:	6078      	str	r0, [r7, #4]
    d374:	460b      	mov	r3, r1
    d376:	70fb      	strb	r3, [r7, #3]
    return svl_uart_write(pHandle, (char*)&c, 1);
    d378:	1cfb      	adds	r3, r7, #3
    d37a:	2201      	movs	r2, #1
    d37c:	4619      	mov	r1, r3
    d37e:	6878      	ldr	r0, [r7, #4]
    d380:	f7ff ffd5 	bl	d32e <svl_uart_write>
    d384:	4603      	mov	r3, r0
}
    d386:	4618      	mov	r0, r3
    d388:	3708      	adds	r7, #8
    d38a:	46bd      	mov	sp, r7
    d38c:	bd80      	pop	{r7, pc}
	...

0000d390 <_fill_ticks>:

volatile uint32_t ap3_stimer_overflows = 0x00;
uint64_t ticks = 0;

void _fill_ticks(void)
{
    d390:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    d394:	af00      	add	r7, sp, #0
    ticks = ap3_stimer_overflows;
    d396:	4913      	ldr	r1, [pc, #76]	; (d3e4 <_fill_ticks+0x54>)
    d398:	6809      	ldr	r1, [r1, #0]
    d39a:	2000      	movs	r0, #0
    d39c:	460a      	mov	r2, r1
    d39e:	4603      	mov	r3, r0
    d3a0:	4911      	ldr	r1, [pc, #68]	; (d3e8 <_fill_ticks+0x58>)
    d3a2:	e9c1 2300 	strd	r2, r3, [r1]
    ticks <<= 32;
    d3a6:	4b10      	ldr	r3, [pc, #64]	; (d3e8 <_fill_ticks+0x58>)
    d3a8:	e9d3 0100 	ldrd	r0, r1, [r3]
    d3ac:	f04f 0200 	mov.w	r2, #0
    d3b0:	f04f 0300 	mov.w	r3, #0
    d3b4:	0003      	movs	r3, r0
    d3b6:	2200      	movs	r2, #0
    d3b8:	490b      	ldr	r1, [pc, #44]	; (d3e8 <_fill_ticks+0x58>)
    d3ba:	e9c1 2300 	strd	r2, r3, [r1]
    ticks |= (am_hal_stimer_counter_get() & 0xFFFFFFFF);
    d3be:	f000 fed1 	bl	e164 <am_hal_stimer_counter_get>
    d3c2:	4603      	mov	r3, r0
    d3c4:	2200      	movs	r2, #0
    d3c6:	461c      	mov	r4, r3
    d3c8:	4615      	mov	r5, r2
    d3ca:	4b07      	ldr	r3, [pc, #28]	; (d3e8 <_fill_ticks+0x58>)
    d3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    d3d0:	ea44 0802 	orr.w	r8, r4, r2
    d3d4:	ea45 0903 	orr.w	r9, r5, r3
    d3d8:	4b03      	ldr	r3, [pc, #12]	; (d3e8 <_fill_ticks+0x58>)
    d3da:	e9c3 8900 	strd	r8, r9, [r3]
}
    d3de:	bf00      	nop
    d3e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    d3e4:	10000a5c 	.word	0x10000a5c
    d3e8:	10000a60 	.word	0x10000a60

0000d3ec <millis>:

size_t millis(void){
    d3ec:	b580      	push	{r7, lr}
    d3ee:	af00      	add	r7, sp, #0
    _fill_ticks();
    d3f0:	f7ff ffce 	bl	d390 <_fill_ticks>
    return (uint32_t)(ticks / AP3_STIMER_FREQ_KHZ);
    d3f4:	4b06      	ldr	r3, [pc, #24]	; (d410 <millis+0x24>)
    d3f6:	e9d3 0100 	ldrd	r0, r1, [r3]
    d3fa:	f640 32b8 	movw	r2, #3000	; 0xbb8
    d3fe:	f04f 0300 	mov.w	r3, #0
    d402:	f7fe fe7d 	bl	c100 <__aeabi_uldivmod>
    d406:	4602      	mov	r2, r0
    d408:	460b      	mov	r3, r1
    d40a:	4613      	mov	r3, r2
}
    d40c:	4618      	mov	r0, r3
    d40e:	bd80      	pop	{r7, pc}
    d410:	10000a60 	.word	0x10000a60

0000d414 <enable_burst_mode>:
//
// Burst mode
//
//*****************************************************************************
bool enable_burst_mode(void)
{
    d414:	b580      	push	{r7, lr}
    d416:	b082      	sub	sp, #8
    d418:	af00      	add	r7, sp, #0
    // Check that the Burst Feature is available.
    am_hal_burst_avail_e eBurstModeAvailable;
    if (AM_HAL_STATUS_SUCCESS != am_hal_burst_mode_initialize(&eBurstModeAvailable))
    d41a:	1dfb      	adds	r3, r7, #7
    d41c:	4618      	mov	r0, r3
    d41e:	f000 fa3d 	bl	d89c <am_hal_burst_mode_initialize>
    d422:	4603      	mov	r3, r0
    d424:	2b00      	cmp	r3, #0
    d426:	d001      	beq.n	d42c <enable_burst_mode+0x18>
    {
        return (false);
    d428:	2300      	movs	r3, #0
    d42a:	e009      	b.n	d440 <enable_burst_mode+0x2c>
    }

    // Put the MCU into "Burst" mode.
    am_hal_burst_mode_e eBurstMode;
    if (AM_HAL_STATUS_SUCCESS != am_hal_burst_mode_enable(&eBurstMode))
    d42c:	1dbb      	adds	r3, r7, #6
    d42e:	4618      	mov	r0, r3
    d430:	f000 fa76 	bl	d920 <am_hal_burst_mode_enable>
    d434:	4603      	mov	r3, r0
    d436:	2b00      	cmp	r3, #0
    d438:	d001      	beq.n	d43e <enable_burst_mode+0x2a>
    {
        return (false);
    d43a:	2300      	movs	r3, #0
    d43c:	e000      	b.n	d440 <enable_burst_mode+0x2c>
    }
    return (true);
    d43e:	2301      	movs	r3, #1
}
    d440:	4618      	mov	r0, r3
    d442:	3708      	adds	r7, #8
    d444:	46bd      	mov	sp, r7
    d446:	bd80      	pop	{r7, pc}

0000d448 <disable_burst_mode>:

//Turns main processor from 96MHz to 48MHz
//Returns false if disable fails
bool disable_burst_mode(void)
{
    d448:	b580      	push	{r7, lr}
    d44a:	b082      	sub	sp, #8
    d44c:	af00      	add	r7, sp, #0
    am_hal_burst_mode_e eBurstMode;
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_disable(&eBurstMode))
    d44e:	1dfb      	adds	r3, r7, #7
    d450:	4618      	mov	r0, r3
    d452:	f000 fa95 	bl	d980 <am_hal_burst_mode_disable>
    d456:	4603      	mov	r3, r0
    d458:	2b00      	cmp	r3, #0
    d45a:	d104      	bne.n	d466 <disable_burst_mode+0x1e>
    {
        if (AM_HAL_NORMAL_MODE != eBurstMode)
    d45c:	79fb      	ldrb	r3, [r7, #7]
    d45e:	2b01      	cmp	r3, #1
    d460:	d003      	beq.n	d46a <disable_burst_mode+0x22>
        {
            return (false);
    d462:	2300      	movs	r3, #0
    d464:	e002      	b.n	d46c <disable_burst_mode+0x24>
        }
    }
    else
    {
        return (false);
    d466:	2300      	movs	r3, #0
    d468:	e000      	b.n	d46c <disable_burst_mode+0x24>
    }
    return (true);
    d46a:	2301      	movs	r3, #1
}
    d46c:	4618      	mov	r0, r3
    d46e:	3708      	adds	r7, #8
    d470:	46bd      	mov	sp, r7
    d472:	bd80      	pop	{r7, pc}

0000d474 <ap3_gpio_enable_interrupts>:

#define GPIOCFG_FLD_INTD_S 3
#define GPIOCFG_FLD_OUTCFG_S 1
#define GPIOCFG_FLD_INCFG_S 0

uint32_t ap3_gpio_enable_interrupts(uint32_t ui32Pin, uint32_t eIntDir){
    d474:	b580      	push	{r7, lr}
    d476:	b08a      	sub	sp, #40	; 0x28
    d478:	af00      	add	r7, sp, #0
    d47a:	6078      	str	r0, [r7, #4]
    d47c:	6039      	str	r1, [r7, #0]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    bool bClearEnable = false;
    d47e:	2300      	movs	r3, #0
    d480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;
    d484:	2300      	movs	r3, #0
    d486:	623b      	str	r3, [r7, #32]
    d488:	6a3b      	ldr	r3, [r7, #32]
    d48a:	61fb      	str	r3, [r7, #28]
    d48c:	69fb      	ldr	r3, [r7, #28]
    d48e:	61bb      	str	r3, [r7, #24]
    ui32GPCfg |= (((eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S) | (((eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    d490:	683b      	ldr	r3, [r7, #0]
    d492:	00db      	lsls	r3, r3, #3
    d494:	f003 0208 	and.w	r2, r3, #8
    d498:	683b      	ldr	r3, [r7, #0]
    d49a:	085b      	lsrs	r3, r3, #1
    d49c:	f003 0301 	and.w	r3, r3, #1
    d4a0:	4313      	orrs	r3, r2
    d4a2:	69ba      	ldr	r2, [r7, #24]
    d4a4:	4313      	orrs	r3, r2
    d4a6:	61bb      	str	r3, [r7, #24]

    uint32_t ui32GPCfgAddr;
    uint32_t ui32GPCfgClearMask;
    uint32_t ui32GPCfgShft;

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    d4a8:	687b      	ldr	r3, [r7, #4]
    d4aa:	009b      	lsls	r3, r3, #2
    d4ac:	f003 031c 	and.w	r3, r3, #28
    d4b0:	617b      	str	r3, [r7, #20]

    ui32GPCfgAddr = AM_REGADDR(GPIO, CFGA) + ((ui32Pin >> 1) & ~0x3);
    d4b2:	687b      	ldr	r3, [r7, #4]
    d4b4:	085b      	lsrs	r3, r3, #1
    d4b6:	f023 0203 	bic.w	r2, r3, #3
    d4ba:	4b1d      	ldr	r3, [pc, #116]	; (d530 <ap3_gpio_enable_interrupts+0xbc>)
    d4bc:	4413      	add	r3, r2
    d4be:	613b      	str	r3, [r7, #16]
    ui32GPCfgClearMask = ~((uint32_t)0xF << ui32GPCfgShft);
    d4c0:	220f      	movs	r2, #15
    d4c2:	697b      	ldr	r3, [r7, #20]
    d4c4:	fa02 f303 	lsl.w	r3, r2, r3
    d4c8:	43db      	mvns	r3, r3
    d4ca:	60fb      	str	r3, [r7, #12]

    ui32GPCfg <<= ui32GPCfgShft;
    d4cc:	69ba      	ldr	r2, [r7, #24]
    d4ce:	697b      	ldr	r3, [r7, #20]
    d4d0:	fa02 f303 	lsl.w	r3, r2, r3
    d4d4:	61bb      	str	r3, [r7, #24]

    AM_CRITICAL_BEGIN
    d4d6:	f000 fd95 	bl	e004 <am_hal_interrupt_master_disable>
    d4da:	4603      	mov	r3, r0
    d4dc:	60bb      	str	r3, [r7, #8]

    if (bClearEnable)
    d4de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d4e2:	2b00      	cmp	r3, #0
    d4e4:	d00c      	beq.n	d500 <ap3_gpio_enable_interrupts+0x8c>
    {
        am_hal_gpio_output_tristate_disable(ui32Pin);
    d4e6:	687b      	ldr	r3, [r7, #4]
    d4e8:	f003 021f 	and.w	r2, r3, #31
    d4ec:	687b      	ldr	r3, [r7, #4]
    d4ee:	08db      	lsrs	r3, r3, #3
    d4f0:	f003 0104 	and.w	r1, r3, #4
    d4f4:	4b0f      	ldr	r3, [pc, #60]	; (d534 <ap3_gpio_enable_interrupts+0xc0>)
    d4f6:	440b      	add	r3, r1
    d4f8:	4619      	mov	r1, r3
    d4fa:	2301      	movs	r3, #1
    d4fc:	4093      	lsls	r3, r2
    d4fe:	600b      	str	r3, [r1, #0]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    d500:	4b0d      	ldr	r3, [pc, #52]	; (d538 <ap3_gpio_enable_interrupts+0xc4>)
    d502:	2273      	movs	r2, #115	; 0x73
    d504:	661a      	str	r2, [r3, #96]	; 0x60

    // Here's where the magic happens
    AM_REGVAL(ui32GPCfgAddr) = (AM_REGVAL(ui32GPCfgAddr) & ui32GPCfgClearMask) | ui32GPCfg;
    d506:	693b      	ldr	r3, [r7, #16]
    d508:	681a      	ldr	r2, [r3, #0]
    d50a:	68fb      	ldr	r3, [r7, #12]
    d50c:	ea02 0103 	and.w	r1, r2, r3
    d510:	693b      	ldr	r3, [r7, #16]
    d512:	69ba      	ldr	r2, [r7, #24]
    d514:	430a      	orrs	r2, r1
    d516:	601a      	str	r2, [r3, #0]

    GPIO->PADKEY = 0;
    d518:	4b07      	ldr	r3, [pc, #28]	; (d538 <ap3_gpio_enable_interrupts+0xc4>)
    d51a:	2200      	movs	r2, #0
    d51c:	661a      	str	r2, [r3, #96]	; 0x60

    AM_CRITICAL_END
    d51e:	68bb      	ldr	r3, [r7, #8]
    d520:	4618      	mov	r0, r3
    d522:	f000 fd73 	bl	e00c <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
    d526:	2300      	movs	r3, #0
}
    d528:	4618      	mov	r0, r3
    d52a:	3728      	adds	r7, #40	; 0x28
    d52c:	46bd      	mov	sp, r7
    d52e:	bd80      	pop	{r7, pc}
    d530:	40010040 	.word	0x40010040
    d534:	400100b4 	.word	0x400100b4
    d538:	40010000 	.word	0x40010000

0000d53c <memset>:
    d53c:	0783      	lsls	r3, r0, #30
    d53e:	b530      	push	{r4, r5, lr}
    d540:	d047      	beq.n	d5d2 <memset+0x96>
    d542:	1e54      	subs	r4, r2, #1
    d544:	2a00      	cmp	r2, #0
    d546:	d03e      	beq.n	d5c6 <memset+0x8a>
    d548:	b2ca      	uxtb	r2, r1
    d54a:	4603      	mov	r3, r0
    d54c:	e001      	b.n	d552 <memset+0x16>
    d54e:	3c01      	subs	r4, #1
    d550:	d339      	bcc.n	d5c6 <memset+0x8a>
    d552:	f803 2b01 	strb.w	r2, [r3], #1
    d556:	079d      	lsls	r5, r3, #30
    d558:	d1f9      	bne.n	d54e <memset+0x12>
    d55a:	2c03      	cmp	r4, #3
    d55c:	d92c      	bls.n	d5b8 <memset+0x7c>
    d55e:	b2cd      	uxtb	r5, r1
    d560:	eb05 2505 	add.w	r5, r5, r5, lsl #8
    d564:	2c0f      	cmp	r4, #15
    d566:	eb05 4505 	add.w	r5, r5, r5, lsl #16
    d56a:	d935      	bls.n	d5d8 <memset+0x9c>
    d56c:	f1a4 0210 	sub.w	r2, r4, #16
    d570:	f022 0c0f 	bic.w	ip, r2, #15
    d574:	f103 0e10 	add.w	lr, r3, #16
    d578:	44e6      	add	lr, ip
    d57a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    d57e:	461a      	mov	r2, r3
    d580:	6015      	str	r5, [r2, #0]
    d582:	6055      	str	r5, [r2, #4]
    d584:	6095      	str	r5, [r2, #8]
    d586:	60d5      	str	r5, [r2, #12]
    d588:	3210      	adds	r2, #16
    d58a:	4572      	cmp	r2, lr
    d58c:	d1f8      	bne.n	d580 <memset+0x44>
    d58e:	f10c 0201 	add.w	r2, ip, #1
    d592:	f014 0f0c 	tst.w	r4, #12
    d596:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    d59a:	f004 0c0f 	and.w	ip, r4, #15
    d59e:	d013      	beq.n	d5c8 <memset+0x8c>
    d5a0:	f1ac 0304 	sub.w	r3, ip, #4
    d5a4:	f023 0303 	bic.w	r3, r3, #3
    d5a8:	3304      	adds	r3, #4
    d5aa:	4413      	add	r3, r2
    d5ac:	f842 5b04 	str.w	r5, [r2], #4
    d5b0:	429a      	cmp	r2, r3
    d5b2:	d1fb      	bne.n	d5ac <memset+0x70>
    d5b4:	f00c 0403 	and.w	r4, ip, #3
    d5b8:	b12c      	cbz	r4, d5c6 <memset+0x8a>
    d5ba:	b2c9      	uxtb	r1, r1
    d5bc:	441c      	add	r4, r3
    d5be:	f803 1b01 	strb.w	r1, [r3], #1
    d5c2:	429c      	cmp	r4, r3
    d5c4:	d1fb      	bne.n	d5be <memset+0x82>
    d5c6:	bd30      	pop	{r4, r5, pc}
    d5c8:	4664      	mov	r4, ip
    d5ca:	4613      	mov	r3, r2
    d5cc:	2c00      	cmp	r4, #0
    d5ce:	d1f4      	bne.n	d5ba <memset+0x7e>
    d5d0:	e7f9      	b.n	d5c6 <memset+0x8a>
    d5d2:	4603      	mov	r3, r0
    d5d4:	4614      	mov	r4, r2
    d5d6:	e7c0      	b.n	d55a <memset+0x1e>
    d5d8:	461a      	mov	r2, r3
    d5da:	46a4      	mov	ip, r4
    d5dc:	e7e0      	b.n	d5a0 <memset+0x64>
    d5de:	bf00      	nop

0000d5e0 <__udivmoddi4>:
    d5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d5e4:	9d08      	ldr	r5, [sp, #32]
    d5e6:	460c      	mov	r4, r1
    d5e8:	2b00      	cmp	r3, #0
    d5ea:	d14e      	bne.n	d68a <__udivmoddi4+0xaa>
    d5ec:	4694      	mov	ip, r2
    d5ee:	458c      	cmp	ip, r1
    d5f0:	4686      	mov	lr, r0
    d5f2:	fab2 f282 	clz	r2, r2
    d5f6:	d962      	bls.n	d6be <__udivmoddi4+0xde>
    d5f8:	b14a      	cbz	r2, d60e <__udivmoddi4+0x2e>
    d5fa:	f1c2 0320 	rsb	r3, r2, #32
    d5fe:	4091      	lsls	r1, r2
    d600:	fa20 f303 	lsr.w	r3, r0, r3
    d604:	fa0c fc02 	lsl.w	ip, ip, r2
    d608:	4319      	orrs	r1, r3
    d60a:	fa00 fe02 	lsl.w	lr, r0, r2
    d60e:	ea4f 471c 	mov.w	r7, ip, lsr #16
    d612:	fa1f f68c 	uxth.w	r6, ip
    d616:	fbb1 f4f7 	udiv	r4, r1, r7
    d61a:	ea4f 431e 	mov.w	r3, lr, lsr #16
    d61e:	fb07 1114 	mls	r1, r7, r4, r1
    d622:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    d626:	fb04 f106 	mul.w	r1, r4, r6
    d62a:	4299      	cmp	r1, r3
    d62c:	d90a      	bls.n	d644 <__udivmoddi4+0x64>
    d62e:	eb1c 0303 	adds.w	r3, ip, r3
    d632:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
    d636:	f080 8113 	bcs.w	d860 <__udivmoddi4+0x280>
    d63a:	4299      	cmp	r1, r3
    d63c:	f240 8110 	bls.w	d860 <__udivmoddi4+0x280>
    d640:	3c02      	subs	r4, #2
    d642:	4463      	add	r3, ip
    d644:	1a59      	subs	r1, r3, r1
    d646:	fa1f f38e 	uxth.w	r3, lr
    d64a:	fbb1 f0f7 	udiv	r0, r1, r7
    d64e:	fb07 1110 	mls	r1, r7, r0, r1
    d652:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    d656:	fb00 f606 	mul.w	r6, r0, r6
    d65a:	429e      	cmp	r6, r3
    d65c:	d90a      	bls.n	d674 <__udivmoddi4+0x94>
    d65e:	eb1c 0303 	adds.w	r3, ip, r3
    d662:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
    d666:	f080 80fd 	bcs.w	d864 <__udivmoddi4+0x284>
    d66a:	429e      	cmp	r6, r3
    d66c:	f240 80fa 	bls.w	d864 <__udivmoddi4+0x284>
    d670:	4463      	add	r3, ip
    d672:	3802      	subs	r0, #2
    d674:	1b9b      	subs	r3, r3, r6
    d676:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
    d67a:	2100      	movs	r1, #0
    d67c:	b11d      	cbz	r5, d686 <__udivmoddi4+0xa6>
    d67e:	40d3      	lsrs	r3, r2
    d680:	2200      	movs	r2, #0
    d682:	e9c5 3200 	strd	r3, r2, [r5]
    d686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d68a:	428b      	cmp	r3, r1
    d68c:	d905      	bls.n	d69a <__udivmoddi4+0xba>
    d68e:	b10d      	cbz	r5, d694 <__udivmoddi4+0xb4>
    d690:	e9c5 0100 	strd	r0, r1, [r5]
    d694:	2100      	movs	r1, #0
    d696:	4608      	mov	r0, r1
    d698:	e7f5      	b.n	d686 <__udivmoddi4+0xa6>
    d69a:	fab3 f183 	clz	r1, r3
    d69e:	2900      	cmp	r1, #0
    d6a0:	d146      	bne.n	d730 <__udivmoddi4+0x150>
    d6a2:	42a3      	cmp	r3, r4
    d6a4:	d302      	bcc.n	d6ac <__udivmoddi4+0xcc>
    d6a6:	4290      	cmp	r0, r2
    d6a8:	f0c0 80f1 	bcc.w	d88e <__udivmoddi4+0x2ae>
    d6ac:	1a86      	subs	r6, r0, r2
    d6ae:	eb64 0303 	sbc.w	r3, r4, r3
    d6b2:	2001      	movs	r0, #1
    d6b4:	2d00      	cmp	r5, #0
    d6b6:	d0e6      	beq.n	d686 <__udivmoddi4+0xa6>
    d6b8:	e9c5 6300 	strd	r6, r3, [r5]
    d6bc:	e7e3      	b.n	d686 <__udivmoddi4+0xa6>
    d6be:	2a00      	cmp	r2, #0
    d6c0:	f040 8091 	bne.w	d7e6 <__udivmoddi4+0x206>
    d6c4:	eba1 040c 	sub.w	r4, r1, ip
    d6c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
    d6cc:	fa1f f78c 	uxth.w	r7, ip
    d6d0:	2101      	movs	r1, #1
    d6d2:	fbb4 f6f8 	udiv	r6, r4, r8
    d6d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
    d6da:	fb08 4416 	mls	r4, r8, r6, r4
    d6de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    d6e2:	fb07 f006 	mul.w	r0, r7, r6
    d6e6:	4298      	cmp	r0, r3
    d6e8:	d908      	bls.n	d6fc <__udivmoddi4+0x11c>
    d6ea:	eb1c 0303 	adds.w	r3, ip, r3
    d6ee:	f106 34ff 	add.w	r4, r6, #4294967295	; 0xffffffff
    d6f2:	d202      	bcs.n	d6fa <__udivmoddi4+0x11a>
    d6f4:	4298      	cmp	r0, r3
    d6f6:	f200 80ce 	bhi.w	d896 <__udivmoddi4+0x2b6>
    d6fa:	4626      	mov	r6, r4
    d6fc:	1a1c      	subs	r4, r3, r0
    d6fe:	fa1f f38e 	uxth.w	r3, lr
    d702:	fbb4 f0f8 	udiv	r0, r4, r8
    d706:	fb08 4410 	mls	r4, r8, r0, r4
    d70a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    d70e:	fb00 f707 	mul.w	r7, r0, r7
    d712:	429f      	cmp	r7, r3
    d714:	d908      	bls.n	d728 <__udivmoddi4+0x148>
    d716:	eb1c 0303 	adds.w	r3, ip, r3
    d71a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
    d71e:	d202      	bcs.n	d726 <__udivmoddi4+0x146>
    d720:	429f      	cmp	r7, r3
    d722:	f200 80b1 	bhi.w	d888 <__udivmoddi4+0x2a8>
    d726:	4620      	mov	r0, r4
    d728:	1bdb      	subs	r3, r3, r7
    d72a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    d72e:	e7a5      	b.n	d67c <__udivmoddi4+0x9c>
    d730:	f1c1 0620 	rsb	r6, r1, #32
    d734:	408b      	lsls	r3, r1
    d736:	fa22 f706 	lsr.w	r7, r2, r6
    d73a:	431f      	orrs	r7, r3
    d73c:	fa20 fc06 	lsr.w	ip, r0, r6
    d740:	fa04 f301 	lsl.w	r3, r4, r1
    d744:	ea43 030c 	orr.w	r3, r3, ip
    d748:	40f4      	lsrs	r4, r6
    d74a:	fa00 f801 	lsl.w	r8, r0, r1
    d74e:	0c38      	lsrs	r0, r7, #16
    d750:	ea4f 4913 	mov.w	r9, r3, lsr #16
    d754:	fbb4 fef0 	udiv	lr, r4, r0
    d758:	fa1f fc87 	uxth.w	ip, r7
    d75c:	fb00 441e 	mls	r4, r0, lr, r4
    d760:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
    d764:	fb0e f90c 	mul.w	r9, lr, ip
    d768:	45a1      	cmp	r9, r4
    d76a:	fa02 f201 	lsl.w	r2, r2, r1
    d76e:	d90a      	bls.n	d786 <__udivmoddi4+0x1a6>
    d770:	193c      	adds	r4, r7, r4
    d772:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
    d776:	f080 8085 	bcs.w	d884 <__udivmoddi4+0x2a4>
    d77a:	45a1      	cmp	r9, r4
    d77c:	f240 8082 	bls.w	d884 <__udivmoddi4+0x2a4>
    d780:	f1ae 0e02 	sub.w	lr, lr, #2
    d784:	443c      	add	r4, r7
    d786:	eba4 0409 	sub.w	r4, r4, r9
    d78a:	fa1f f983 	uxth.w	r9, r3
    d78e:	fbb4 f3f0 	udiv	r3, r4, r0
    d792:	fb00 4413 	mls	r4, r0, r3, r4
    d796:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
    d79a:	fb03 fc0c 	mul.w	ip, r3, ip
    d79e:	45a4      	cmp	ip, r4
    d7a0:	d907      	bls.n	d7b2 <__udivmoddi4+0x1d2>
    d7a2:	193c      	adds	r4, r7, r4
    d7a4:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
    d7a8:	d268      	bcs.n	d87c <__udivmoddi4+0x29c>
    d7aa:	45a4      	cmp	ip, r4
    d7ac:	d966      	bls.n	d87c <__udivmoddi4+0x29c>
    d7ae:	3b02      	subs	r3, #2
    d7b0:	443c      	add	r4, r7
    d7b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
    d7b6:	fba0 9302 	umull	r9, r3, r0, r2
    d7ba:	eba4 040c 	sub.w	r4, r4, ip
    d7be:	429c      	cmp	r4, r3
    d7c0:	46ce      	mov	lr, r9
    d7c2:	469c      	mov	ip, r3
    d7c4:	d352      	bcc.n	d86c <__udivmoddi4+0x28c>
    d7c6:	d04f      	beq.n	d868 <__udivmoddi4+0x288>
    d7c8:	b155      	cbz	r5, d7e0 <__udivmoddi4+0x200>
    d7ca:	ebb8 030e 	subs.w	r3, r8, lr
    d7ce:	eb64 040c 	sbc.w	r4, r4, ip
    d7d2:	fa04 f606 	lsl.w	r6, r4, r6
    d7d6:	40cb      	lsrs	r3, r1
    d7d8:	40cc      	lsrs	r4, r1
    d7da:	431e      	orrs	r6, r3
    d7dc:	e9c5 6400 	strd	r6, r4, [r5]
    d7e0:	2100      	movs	r1, #0
    d7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d7e6:	f1c2 0320 	rsb	r3, r2, #32
    d7ea:	fa20 f103 	lsr.w	r1, r0, r3
    d7ee:	fa0c fc02 	lsl.w	ip, ip, r2
    d7f2:	fa24 f303 	lsr.w	r3, r4, r3
    d7f6:	4094      	lsls	r4, r2
    d7f8:	430c      	orrs	r4, r1
    d7fa:	ea4f 481c 	mov.w	r8, ip, lsr #16
    d7fe:	fa00 fe02 	lsl.w	lr, r0, r2
    d802:	fa1f f78c 	uxth.w	r7, ip
    d806:	fbb3 f0f8 	udiv	r0, r3, r8
    d80a:	fb08 3110 	mls	r1, r8, r0, r3
    d80e:	0c23      	lsrs	r3, r4, #16
    d810:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    d814:	fb00 f107 	mul.w	r1, r0, r7
    d818:	4299      	cmp	r1, r3
    d81a:	d908      	bls.n	d82e <__udivmoddi4+0x24e>
    d81c:	eb1c 0303 	adds.w	r3, ip, r3
    d820:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
    d824:	d22c      	bcs.n	d880 <__udivmoddi4+0x2a0>
    d826:	4299      	cmp	r1, r3
    d828:	d92a      	bls.n	d880 <__udivmoddi4+0x2a0>
    d82a:	3802      	subs	r0, #2
    d82c:	4463      	add	r3, ip
    d82e:	1a5b      	subs	r3, r3, r1
    d830:	b2a4      	uxth	r4, r4
    d832:	fbb3 f1f8 	udiv	r1, r3, r8
    d836:	fb08 3311 	mls	r3, r8, r1, r3
    d83a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    d83e:	fb01 f307 	mul.w	r3, r1, r7
    d842:	42a3      	cmp	r3, r4
    d844:	d908      	bls.n	d858 <__udivmoddi4+0x278>
    d846:	eb1c 0404 	adds.w	r4, ip, r4
    d84a:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
    d84e:	d213      	bcs.n	d878 <__udivmoddi4+0x298>
    d850:	42a3      	cmp	r3, r4
    d852:	d911      	bls.n	d878 <__udivmoddi4+0x298>
    d854:	3902      	subs	r1, #2
    d856:	4464      	add	r4, ip
    d858:	1ae4      	subs	r4, r4, r3
    d85a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    d85e:	e738      	b.n	d6d2 <__udivmoddi4+0xf2>
    d860:	4604      	mov	r4, r0
    d862:	e6ef      	b.n	d644 <__udivmoddi4+0x64>
    d864:	4608      	mov	r0, r1
    d866:	e705      	b.n	d674 <__udivmoddi4+0x94>
    d868:	45c8      	cmp	r8, r9
    d86a:	d2ad      	bcs.n	d7c8 <__udivmoddi4+0x1e8>
    d86c:	ebb9 0e02 	subs.w	lr, r9, r2
    d870:	eb63 0c07 	sbc.w	ip, r3, r7
    d874:	3801      	subs	r0, #1
    d876:	e7a7      	b.n	d7c8 <__udivmoddi4+0x1e8>
    d878:	4631      	mov	r1, r6
    d87a:	e7ed      	b.n	d858 <__udivmoddi4+0x278>
    d87c:	4603      	mov	r3, r0
    d87e:	e798      	b.n	d7b2 <__udivmoddi4+0x1d2>
    d880:	4630      	mov	r0, r6
    d882:	e7d4      	b.n	d82e <__udivmoddi4+0x24e>
    d884:	46d6      	mov	lr, sl
    d886:	e77e      	b.n	d786 <__udivmoddi4+0x1a6>
    d888:	4463      	add	r3, ip
    d88a:	3802      	subs	r0, #2
    d88c:	e74c      	b.n	d728 <__udivmoddi4+0x148>
    d88e:	4606      	mov	r6, r0
    d890:	4623      	mov	r3, r4
    d892:	4608      	mov	r0, r1
    d894:	e70e      	b.n	d6b4 <__udivmoddi4+0xd4>
    d896:	3e02      	subs	r6, #2
    d898:	4463      	add	r3, ip
    d89a:	e72f      	b.n	d6fc <__udivmoddi4+0x11c>

0000d89c <am_hal_burst_mode_initialize>:
    d89c:	b570      	push	{r4, r5, r6, lr}
    d89e:	4b1c      	ldr	r3, [pc, #112]	; (d910 <am_hal_burst_mode_initialize+0x74>)
    d8a0:	695b      	ldr	r3, [r3, #20]
    d8a2:	4604      	mov	r4, r0
    d8a4:	07d8      	lsls	r0, r3, #31
    d8a6:	b082      	sub	sp, #8
    d8a8:	d521      	bpl.n	d8ee <am_hal_burst_mode_initialize+0x52>
    d8aa:	4b1a      	ldr	r3, [pc, #104]	; (d914 <am_hal_burst_mode_initialize+0x78>)
    d8ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d8ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    d8b2:	629a      	str	r2, [r3, #40]	; 0x28
    d8b4:	681b      	ldr	r3, [r3, #0]
    d8b6:	07d9      	lsls	r1, r3, #31
    d8b8:	d427      	bmi.n	d90a <am_hal_burst_mode_initialize+0x6e>
    d8ba:	4d15      	ldr	r5, [pc, #84]	; (d910 <am_hal_burst_mode_initialize+0x74>)
    d8bc:	4916      	ldr	r1, [pc, #88]	; (d918 <am_hal_burst_mode_initialize+0x7c>)
    d8be:	7e2a      	ldrb	r2, [r5, #24]
    d8c0:	2601      	movs	r6, #1
    d8c2:	f042 0210 	orr.w	r2, r2, #16
    d8c6:	2320      	movs	r3, #32
    d8c8:	762a      	strb	r2, [r5, #24]
    d8ca:	f242 7010 	movw	r0, #10000	; 0x2710
    d8ce:	461a      	mov	r2, r3
    d8d0:	9600      	str	r6, [sp, #0]
    d8d2:	f000 f9ab 	bl	dc2c <am_hal_flash_delay_status_check>
    d8d6:	b990      	cbnz	r0, d8fe <am_hal_burst_mode_initialize+0x62>
    d8d8:	69ab      	ldr	r3, [r5, #24]
    d8da:	065a      	lsls	r2, r3, #25
    d8dc:	d507      	bpl.n	d8ee <am_hal_burst_mode_initialize+0x52>
    d8de:	69ab      	ldr	r3, [r5, #24]
    d8e0:	069b      	lsls	r3, r3, #26
    d8e2:	d504      	bpl.n	d8ee <am_hal_burst_mode_initialize+0x52>
    d8e4:	4b0d      	ldr	r3, [pc, #52]	; (d91c <am_hal_burst_mode_initialize+0x80>)
    d8e6:	701e      	strb	r6, [r3, #0]
    d8e8:	7020      	strb	r0, [r4, #0]
    d8ea:	b002      	add	sp, #8
    d8ec:	bd70      	pop	{r4, r5, r6, pc}
    d8ee:	4a0b      	ldr	r2, [pc, #44]	; (d91c <am_hal_burst_mode_initialize+0x80>)
    d8f0:	2100      	movs	r1, #0
    d8f2:	2301      	movs	r3, #1
    d8f4:	2007      	movs	r0, #7
    d8f6:	7011      	strb	r1, [r2, #0]
    d8f8:	7023      	strb	r3, [r4, #0]
    d8fa:	b002      	add	sp, #8
    d8fc:	bd70      	pop	{r4, r5, r6, pc}
    d8fe:	4b07      	ldr	r3, [pc, #28]	; (d91c <am_hal_burst_mode_initialize+0x80>)
    d900:	2200      	movs	r2, #0
    d902:	701a      	strb	r2, [r3, #0]
    d904:	7026      	strb	r6, [r4, #0]
    d906:	b002      	add	sp, #8
    d908:	bd70      	pop	{r4, r5, r6, pc}
    d90a:	f000 fbd9 	bl	e0c0 <am_hal_pwrctrl_blebuck_trim>
    d90e:	e7d4      	b.n	d8ba <am_hal_burst_mode_initialize+0x1e>
    d910:	40020000 	.word	0x40020000
    d914:	40021000 	.word	0x40021000
    d918:	40020018 	.word	0x40020018
    d91c:	10000a68 	.word	0x10000a68

0000d920 <am_hal_burst_mode_enable>:
    d920:	b570      	push	{r4, r5, r6, lr}
    d922:	4b15      	ldr	r3, [pc, #84]	; (d978 <am_hal_burst_mode_enable+0x58>)
    d924:	781b      	ldrb	r3, [r3, #0]
    d926:	b082      	sub	sp, #8
    d928:	4604      	mov	r4, r0
    d92a:	b1db      	cbz	r3, d964 <am_hal_burst_mode_enable+0x44>
    d92c:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
    d930:	2601      	movs	r6, #1
    d932:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    d936:	4911      	ldr	r1, [pc, #68]	; (d97c <am_hal_burst_mode_enable+0x5c>)
    d938:	4332      	orrs	r2, r6
    d93a:	2304      	movs	r3, #4
    d93c:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    d940:	f242 7010 	movw	r0, #10000	; 0x2710
    d944:	461a      	mov	r2, r3
    d946:	9600      	str	r6, [sp, #0]
    d948:	f000 f970 	bl	dc2c <am_hal_flash_delay_status_check>
    d94c:	b938      	cbnz	r0, d95e <am_hal_burst_mode_enable+0x3e>
    d94e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d950:	079b      	lsls	r3, r3, #30
    d952:	d50c      	bpl.n	d96e <am_hal_burst_mode_enable+0x4e>
    d954:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d956:	f013 0f04 	tst.w	r3, #4
    d95a:	bf18      	it	ne
    d95c:	4606      	movne	r6, r0
    d95e:	7026      	strb	r6, [r4, #0]
    d960:	b002      	add	sp, #8
    d962:	bd70      	pop	{r4, r5, r6, pc}
    d964:	2301      	movs	r3, #1
    d966:	7003      	strb	r3, [r0, #0]
    d968:	2007      	movs	r0, #7
    d96a:	b002      	add	sp, #8
    d96c:	bd70      	pop	{r4, r5, r6, pc}
    d96e:	4630      	mov	r0, r6
    d970:	7026      	strb	r6, [r4, #0]
    d972:	b002      	add	sp, #8
    d974:	bd70      	pop	{r4, r5, r6, pc}
    d976:	bf00      	nop
    d978:	10000a68 	.word	0x10000a68
    d97c:	40004034 	.word	0x40004034

0000d980 <am_hal_burst_mode_disable>:
    d980:	b530      	push	{r4, r5, lr}
    d982:	b085      	sub	sp, #20
    d984:	4605      	mov	r5, r0
    d986:	f000 fb3d 	bl	e004 <am_hal_interrupt_master_disable>
    d98a:	2100      	movs	r1, #0
    d98c:	4603      	mov	r3, r0
    d98e:	4810      	ldr	r0, [pc, #64]	; (d9d0 <am_hal_burst_mode_disable+0x50>)
    d990:	9303      	str	r3, [sp, #12]
    d992:	f000 f985 	bl	dca0 <am_hal_flash_store_ui32>
    d996:	9803      	ldr	r0, [sp, #12]
    d998:	f000 fb38 	bl	e00c <am_hal_interrupt_master_set>
    d99c:	4b0d      	ldr	r3, [pc, #52]	; (d9d4 <am_hal_burst_mode_disable+0x54>)
    d99e:	490c      	ldr	r1, [pc, #48]	; (d9d0 <am_hal_burst_mode_disable+0x50>)
    d9a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d9a2:	2401      	movs	r4, #1
    d9a4:	f36f 72df 	bfc	r2, #31, #1
    d9a8:	629a      	str	r2, [r3, #40]	; 0x28
    d9aa:	f242 7010 	movw	r0, #10000	; 0x2710
    d9ae:	2300      	movs	r3, #0
    d9b0:	9400      	str	r4, [sp, #0]
    d9b2:	2204      	movs	r2, #4
    d9b4:	f000 f93a 	bl	dc2c <am_hal_flash_delay_status_check>
    d9b8:	b930      	cbnz	r0, d9c8 <am_hal_burst_mode_disable+0x48>
    d9ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d9c0:	f013 0f04 	tst.w	r3, #4
    d9c4:	bf18      	it	ne
    d9c6:	4604      	movne	r4, r0
    d9c8:	702c      	strb	r4, [r5, #0]
    d9ca:	b005      	add	sp, #20
    d9cc:	bd30      	pop	{r4, r5, pc}
    d9ce:	bf00      	nop
    d9d0:	40004034 	.word	0x40004034
    d9d4:	40021000 	.word	0x40021000

0000d9d8 <am_hal_cachectrl_config>:
    d9d8:	b530      	push	{r4, r5, lr}
    d9da:	b083      	sub	sp, #12
    d9dc:	4604      	mov	r4, r0
    d9de:	f000 fb11 	bl	e004 <am_hal_interrupt_master_disable>
    d9e2:	4d0e      	ldr	r5, [pc, #56]	; (da1c <am_hal_cachectrl_config+0x44>)
    d9e4:	9001      	str	r0, [sp, #4]
    d9e6:	682b      	ldr	r3, [r5, #0]
    d9e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d9ec:	602b      	str	r3, [r5, #0]
    d9ee:	9801      	ldr	r0, [sp, #4]
    d9f0:	f000 fb0c 	bl	e00c <am_hal_interrupt_master_set>
    d9f4:	7863      	ldrb	r3, [r4, #1]
    d9f6:	7822      	ldrb	r2, [r4, #0]
    d9f8:	78a1      	ldrb	r1, [r4, #2]
    d9fa:	021b      	lsls	r3, r3, #8
    d9fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
    da00:	0112      	lsls	r2, r2, #4
    da02:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    da06:	b2d2      	uxtb	r2, r2
    da08:	4313      	orrs	r3, r2
    da0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    da0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    da12:	2000      	movs	r0, #0
    da14:	602b      	str	r3, [r5, #0]
    da16:	b003      	add	sp, #12
    da18:	bd30      	pop	{r4, r5, pc}
    da1a:	bf00      	nop
    da1c:	40018000 	.word	0x40018000

0000da20 <am_hal_cachectrl_enable>:
    da20:	4a03      	ldr	r2, [pc, #12]	; (da30 <am_hal_cachectrl_enable+0x10>)
    da22:	6813      	ldr	r3, [r2, #0]
    da24:	f043 0301 	orr.w	r3, r3, #1
    da28:	6013      	str	r3, [r2, #0]
    da2a:	2000      	movs	r0, #0
    da2c:	4770      	bx	lr
    da2e:	bf00      	nop
    da30:	40018000 	.word	0x40018000

0000da34 <am_hal_clkgen_control>:
    da34:	4b49      	ldr	r3, [pc, #292]	; (db5c <am_hal_clkgen_control+0x128>)
    da36:	681a      	ldr	r2, [r3, #0]
    da38:	b912      	cbnz	r2, da40 <am_hal_clkgen_control+0xc>
    da3a:	4a49      	ldr	r2, [pc, #292]	; (db60 <am_hal_clkgen_control+0x12c>)
    da3c:	6812      	ldr	r2, [r2, #0]
    da3e:	601a      	str	r2, [r3, #0]
    da40:	2809      	cmp	r0, #9
    da42:	f200 8089 	bhi.w	db58 <am_hal_clkgen_control+0x124>
    da46:	e8df f000 	tbb	[pc, r0]
    da4a:	160d      	.short	0x160d
    da4c:	423a261e 	.word	0x423a261e
    da50:	055c544c 	.word	0x055c544c
    da54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da58:	2000      	movs	r0, #0
    da5a:	6a1a      	ldr	r2, [r3, #32]
    da5c:	f36f 0200 	bfc	r2, #0, #1
    da60:	621a      	str	r2, [r3, #32]
    da62:	4770      	bx	lr
    da64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da68:	2200      	movs	r2, #0
    da6a:	2147      	movs	r1, #71	; 0x47
    da6c:	6159      	str	r1, [r3, #20]
    da6e:	4610      	mov	r0, r2
    da70:	619a      	str	r2, [r3, #24]
    da72:	615a      	str	r2, [r3, #20]
    da74:	4770      	bx	lr
    da76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da7a:	2000      	movs	r0, #0
    da7c:	899a      	ldrh	r2, [r3, #12]
    da7e:	f36f 0200 	bfc	r2, #0, #1
    da82:	819a      	strh	r2, [r3, #12]
    da84:	4770      	bx	lr
    da86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da8a:	2000      	movs	r0, #0
    da8c:	899a      	ldrh	r2, [r3, #12]
    da8e:	f36f 0241 	bfc	r2, #1, #1
    da92:	819a      	strh	r2, [r3, #12]
    da94:	4770      	bx	lr
    da96:	4a33      	ldr	r2, [pc, #204]	; (db64 <am_hal_clkgen_control+0x130>)
    da98:	68d3      	ldr	r3, [r2, #12]
    da9a:	b2db      	uxtb	r3, r3
    da9c:	2b21      	cmp	r3, #33	; 0x21
    da9e:	d106      	bne.n	daae <am_hal_clkgen_control+0x7a>
    daa0:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    daa4:	2101      	movs	r1, #1
    daa6:	f361 2309 	bfi	r3, r1, #8, #2
    daaa:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    daae:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dab2:	2000      	movs	r0, #0
    dab4:	8993      	ldrh	r3, [r2, #12]
    dab6:	f043 0301 	orr.w	r3, r3, #1
    daba:	8193      	strh	r3, [r2, #12]
    dabc:	4770      	bx	lr
    dabe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dac2:	2000      	movs	r0, #0
    dac4:	8993      	ldrh	r3, [r2, #12]
    dac6:	f043 0302 	orr.w	r3, r3, #2
    daca:	8193      	strh	r3, [r2, #12]
    dacc:	4770      	bx	lr
    dace:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dad2:	2200      	movs	r2, #0
    dad4:	2047      	movs	r0, #71	; 0x47
    dad6:	2101      	movs	r1, #1
    dad8:	6158      	str	r0, [r3, #20]
    dada:	6199      	str	r1, [r3, #24]
    dadc:	4610      	mov	r0, r2
    dade:	615a      	str	r2, [r3, #20]
    dae0:	4770      	bx	lr
    dae2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dae6:	2000      	movs	r0, #0
    dae8:	899a      	ldrh	r2, [r3, #12]
    daea:	f36f 12c7 	bfc	r2, #7, #1
    daee:	819a      	strh	r2, [r3, #12]
    daf0:	4770      	bx	lr
    daf2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    daf6:	2000      	movs	r0, #0
    daf8:	8993      	ldrh	r3, [r2, #12]
    dafa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dafe:	8193      	strh	r3, [r2, #12]
    db00:	4770      	bx	lr
    db02:	4a18      	ldr	r2, [pc, #96]	; (db64 <am_hal_clkgen_control+0x130>)
    db04:	68d3      	ldr	r3, [r2, #12]
    db06:	b2db      	uxtb	r3, r3
    db08:	2b21      	cmp	r3, #33	; 0x21
    db0a:	d00a      	beq.n	db22 <am_hal_clkgen_control+0xee>
    db0c:	b139      	cbz	r1, db1e <am_hal_clkgen_control+0xea>
    db0e:	680b      	ldr	r3, [r1, #0]
    db10:	f043 0301 	orr.w	r3, r3, #1
    db14:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db18:	2000      	movs	r0, #0
    db1a:	6213      	str	r3, [r2, #32]
    db1c:	4770      	bx	lr
    db1e:	4b12      	ldr	r3, [pc, #72]	; (db68 <am_hal_clkgen_control+0x134>)
    db20:	e7f8      	b.n	db14 <am_hal_clkgen_control+0xe0>
    db22:	b500      	push	{lr}
    db24:	b083      	sub	sp, #12
    db26:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    db2a:	9101      	str	r1, [sp, #4]
    db2c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    db30:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    db34:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    db38:	f000 f868 	bl	dc0c <am_hal_flash_delay>
    db3c:	9901      	ldr	r1, [sp, #4]
    db3e:	b149      	cbz	r1, db54 <am_hal_clkgen_control+0x120>
    db40:	680b      	ldr	r3, [r1, #0]
    db42:	f043 0301 	orr.w	r3, r3, #1
    db46:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db4a:	2000      	movs	r0, #0
    db4c:	6213      	str	r3, [r2, #32]
    db4e:	b003      	add	sp, #12
    db50:	f85d fb04 	ldr.w	pc, [sp], #4
    db54:	4b04      	ldr	r3, [pc, #16]	; (db68 <am_hal_clkgen_control+0x134>)
    db56:	e7f6      	b.n	db46 <am_hal_clkgen_control+0x112>
    db58:	2006      	movs	r0, #6
    db5a:	4770      	bx	lr
    db5c:	10000a6c 	.word	0x10000a6c
    db60:	4ffff000 	.word	0x4ffff000
    db64:	40020000 	.word	0x40020000
    db68:	0025b801 	.word	0x0025b801

0000db6c <am_hal_clkgen_status_get>:
    db6c:	b1a8      	cbz	r0, db9a <am_hal_clkgen_status_get+0x2e>
    db6e:	b410      	push	{r4}
    db70:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db74:	490a      	ldr	r1, [pc, #40]	; (dba0 <am_hal_clkgen_status_get+0x34>)
    db76:	6994      	ldr	r4, [r2, #24]
    db78:	4b0a      	ldr	r3, [pc, #40]	; (dba4 <am_hal_clkgen_status_get+0x38>)
    db7a:	f014 0f01 	tst.w	r4, #1
    db7e:	bf08      	it	eq
    db80:	460b      	moveq	r3, r1
    db82:	6003      	str	r3, [r0, #0]
    db84:	69d3      	ldr	r3, [r2, #28]
    db86:	f85d 4b04 	ldr.w	r4, [sp], #4
    db8a:	f003 0201 	and.w	r2, r3, #1
    db8e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    db92:	6042      	str	r2, [r0, #4]
    db94:	7203      	strb	r3, [r0, #8]
    db96:	2000      	movs	r0, #0
    db98:	4770      	bx	lr
    db9a:	2006      	movs	r0, #6
    db9c:	4770      	bx	lr
    db9e:	bf00      	nop
    dba0:	02dc6c00 	.word	0x02dc6c00
    dba4:	016e3600 	.word	0x016e3600

0000dba8 <am_hal_flash_page_erase>:
    dba8:	4b00      	ldr	r3, [pc, #0]	; (dbac <am_hal_flash_page_erase+0x4>)
    dbaa:	4718      	bx	r3
    dbac:	08000051 	.word	0x08000051

0000dbb0 <am_hal_flash_program_main>:
    dbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dbb4:	4e12      	ldr	r6, [pc, #72]	; (dc00 <am_hal_flash_program_main+0x50>)
    dbb6:	eb01 0583 	add.w	r5, r1, r3, lsl #2
    dbba:	42b5      	cmp	r5, r6
    dbbc:	b082      	sub	sp, #8
    dbbe:	d004      	beq.n	dbca <am_hal_flash_program_main+0x1a>
    dbc0:	4c10      	ldr	r4, [pc, #64]	; (dc04 <am_hal_flash_program_main+0x54>)
    dbc2:	47a0      	blx	r4
    dbc4:	b002      	add	sp, #8
    dbc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dbca:	2b01      	cmp	r3, #1
    dbcc:	461c      	mov	r4, r3
    dbce:	4680      	mov	r8, r0
    dbd0:	4617      	mov	r7, r2
    dbd2:	d904      	bls.n	dbde <am_hal_flash_program_main+0x2e>
    dbd4:	4d0b      	ldr	r5, [pc, #44]	; (dc04 <am_hal_flash_program_main+0x54>)
    dbd6:	3b01      	subs	r3, #1
    dbd8:	47a8      	blx	r5
    dbda:	2800      	cmp	r0, #0
    dbdc:	d1f2      	bne.n	dbc4 <am_hal_flash_program_main+0x14>
    dbde:	4b0a      	ldr	r3, [pc, #40]	; (dc08 <am_hal_flash_program_main+0x58>)
    dbe0:	4d08      	ldr	r5, [pc, #32]	; (dc04 <am_hal_flash_program_main+0x54>)
    dbe2:	681b      	ldr	r3, [r3, #0]
    dbe4:	9301      	str	r3, [sp, #4]
    dbe6:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    dbea:	3a01      	subs	r2, #1
    dbec:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    dbf0:	4640      	mov	r0, r8
    dbf2:	2301      	movs	r3, #1
    dbf4:	a901      	add	r1, sp, #4
    dbf6:	47a8      	blx	r5
    dbf8:	b002      	add	sp, #8
    dbfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dbfe:	bf00      	nop
    dc00:	10060000 	.word	0x10060000
    dc04:	08000055 	.word	0x08000055
    dc08:	1005fffc 	.word	0x1005fffc

0000dc0c <am_hal_flash_delay>:
    dc0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dc10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    dc12:	075b      	lsls	r3, r3, #29
    dc14:	bf46      	itte	mi
    dc16:	0040      	lslmi	r0, r0, #1
    dc18:	230e      	movmi	r3, #14
    dc1a:	230b      	movpl	r3, #11
    dc1c:	4298      	cmp	r0, r3
    dc1e:	d902      	bls.n	dc26 <am_hal_flash_delay+0x1a>
    dc20:	1ac0      	subs	r0, r0, r3
    dc22:	4b01      	ldr	r3, [pc, #4]	; (dc28 <am_hal_flash_delay+0x1c>)
    dc24:	4718      	bx	r3
    dc26:	4770      	bx	lr
    dc28:	0800009d 	.word	0x0800009d

0000dc2c <am_hal_flash_delay_status_check>:
    dc2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dc30:	f89d c020 	ldrb.w	ip, [sp, #32]
    dc34:	4604      	mov	r4, r0
    dc36:	460d      	mov	r5, r1
    dc38:	4616      	mov	r6, r2
    dc3a:	461f      	mov	r7, r3
    dc3c:	f1bc 0f00 	cmp.w	ip, #0
    dc40:	d015      	beq.n	dc6e <am_hal_flash_delay_status_check+0x42>
    dc42:	f8df 8058 	ldr.w	r8, [pc, #88]	; dc9c <am_hal_flash_delay_status_check+0x70>
    dc46:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    dc4a:	e009      	b.n	dc60 <am_hal_flash_delay_status_check+0x34>
    dc4c:	b31c      	cbz	r4, dc96 <am_hal_flash_delay_status_check+0x6a>
    dc4e:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dc52:	f013 0f04 	tst.w	r3, #4
    dc56:	bf0c      	ite	eq
    dc58:	2005      	moveq	r0, #5
    dc5a:	2012      	movne	r0, #18
    dc5c:	3c01      	subs	r4, #1
    dc5e:	47c0      	blx	r8
    dc60:	6828      	ldr	r0, [r5, #0]
    dc62:	4030      	ands	r0, r6
    dc64:	42b8      	cmp	r0, r7
    dc66:	d1f1      	bne.n	dc4c <am_hal_flash_delay_status_check+0x20>
    dc68:	2000      	movs	r0, #0
    dc6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dc6e:	f8df 902c 	ldr.w	r9, [pc, #44]	; dc9c <am_hal_flash_delay_status_check+0x70>
    dc72:	f04f 2840 	mov.w	r8, #1073758208	; 0x40004000
    dc76:	e009      	b.n	dc8c <am_hal_flash_delay_status_check+0x60>
    dc78:	b16c      	cbz	r4, dc96 <am_hal_flash_delay_status_check+0x6a>
    dc7a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    dc7e:	f013 0f04 	tst.w	r3, #4
    dc82:	bf0c      	ite	eq
    dc84:	2005      	moveq	r0, #5
    dc86:	2012      	movne	r0, #18
    dc88:	3c01      	subs	r4, #1
    dc8a:	47c8      	blx	r9
    dc8c:	6828      	ldr	r0, [r5, #0]
    dc8e:	4030      	ands	r0, r6
    dc90:	42b8      	cmp	r0, r7
    dc92:	d0f1      	beq.n	dc78 <am_hal_flash_delay_status_check+0x4c>
    dc94:	e7e8      	b.n	dc68 <am_hal_flash_delay_status_check+0x3c>
    dc96:	2004      	movs	r0, #4
    dc98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dc9c:	0800009d 	.word	0x0800009d

0000dca0 <am_hal_flash_store_ui32>:
    dca0:	4b01      	ldr	r3, [pc, #4]	; (dca8 <am_hal_flash_store_ui32+0x8>)
    dca2:	f043 0301 	orr.w	r3, r3, #1
    dca6:	4718      	bx	r3
    dca8:	10000200 	.word	0x10000200

0000dcac <am_hal_gpio_pinconfig>:
    dcac:	2831      	cmp	r0, #49	; 0x31
    dcae:	f200 80bc 	bhi.w	de2a <am_hal_gpio_pinconfig+0x17e>
    dcb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcb6:	4604      	mov	r4, r0
    dcb8:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    dcbc:	f001 0007 	and.w	r0, r1, #7
    dcc0:	b085      	sub	sp, #20
    dcc2:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    dcc6:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    dcca:	d00f      	beq.n	dcec <am_hal_gpio_pinconfig+0x40>
    dccc:	f3c1 1642 	ubfx	r6, r1, #5, #3
    dcd0:	1db5      	adds	r5, r6, #6
    dcd2:	f005 0507 	and.w	r5, r5, #7
    dcd6:	2d03      	cmp	r5, #3
    dcd8:	f042 0201 	orr.w	r2, r2, #1
    dcdc:	f240 80a7 	bls.w	de2e <am_hal_gpio_pinconfig+0x182>
    dce0:	2fc0      	cmp	r7, #192	; 0xc0
    dce2:	f000 80eb 	beq.w	debc <am_hal_gpio_pinconfig+0x210>
    dce6:	2f20      	cmp	r7, #32
    dce8:	f000 80ed 	beq.w	dec6 <am_hal_gpio_pinconfig+0x21a>
    dcec:	b163      	cbz	r3, dd08 <am_hal_gpio_pinconfig+0x5c>
    dcee:	2b01      	cmp	r3, #1
    dcf0:	f000 80dd 	beq.w	deae <am_hal_gpio_pinconfig+0x202>
    dcf4:	2b02      	cmp	r3, #2
    dcf6:	f040 80c3 	bne.w	de80 <am_hal_gpio_pinconfig+0x1d4>
    dcfa:	4b7e      	ldr	r3, [pc, #504]	; (def4 <am_hal_gpio_pinconfig+0x248>)
    dcfc:	5d1b      	ldrb	r3, [r3, r4]
    dcfe:	075b      	lsls	r3, r3, #29
    dd00:	f140 80be 	bpl.w	de80 <am_hal_gpio_pinconfig+0x1d4>
    dd04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dd08:	4b7b      	ldr	r3, [pc, #492]	; (def8 <am_hal_gpio_pinconfig+0x24c>)
    dd0a:	4d7c      	ldr	r5, [pc, #496]	; (defc <am_hal_gpio_pinconfig+0x250>)
    dd0c:	5d1b      	ldrb	r3, [r3, r4]
    dd0e:	5d2d      	ldrb	r5, [r5, r4]
    dd10:	4103      	asrs	r3, r0
    dd12:	005b      	lsls	r3, r3, #1
    dd14:	f003 0302 	and.w	r3, r3, #2
    dd18:	4285      	cmp	r5, r0
    dd1a:	ea43 0302 	orr.w	r3, r3, r2
    dd1e:	f000 8091 	beq.w	de44 <am_hal_gpio_pinconfig+0x198>
    dd22:	f3c1 2607 	ubfx	r6, r1, #8, #8
    dd26:	f3c1 2581 	ubfx	r5, r1, #10, #2
    dd2a:	f3c1 3080 	ubfx	r0, r1, #14, #1
    dd2e:	0a8a      	lsrs	r2, r1, #10
    dd30:	f006 070c 	and.w	r7, r6, #12
    dd34:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    dd38:	f002 0208 	and.w	r2, r2, #8
    dd3c:	f3c1 3500 	ubfx	r5, r1, #12, #1
    dd40:	2f04      	cmp	r7, #4
    dd42:	ea42 0200 	orr.w	r2, r2, r0
    dd46:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    dd4a:	4628      	mov	r0, r5
    dd4c:	f000 80ac 	beq.w	dea8 <am_hal_gpio_pinconfig+0x1fc>
    dd50:	486b      	ldr	r0, [pc, #428]	; (df00 <am_hal_gpio_pinconfig+0x254>)
    dd52:	6800      	ldr	r0, [r0, #0]
    dd54:	eba1 0800 	sub.w	r8, r1, r0
    dd58:	fab8 f888 	clz	r8, r8
    dd5c:	ea4f 1858 	mov.w	r8, r8, lsr #5
    dd60:	f016 0f60 	tst.w	r6, #96	; 0x60
    dd64:	bf04      	itt	eq
    dd66:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    dd6a:	f360 0200 	bfieq	r2, r0, #0, #1
    dd6e:	00a6      	lsls	r6, r4, #2
    dd70:	f3c1 2101 	ubfx	r1, r1, #8, #2
    dd74:	2902      	cmp	r1, #2
    dd76:	ea4f 05c4 	mov.w	r5, r4, lsl #3
    dd7a:	f000 808e 	beq.w	de9a <am_hal_gpio_pinconfig+0x1ee>
    dd7e:	2903      	cmp	r1, #3
    dd80:	f000 8082 	beq.w	de88 <am_hal_gpio_pinconfig+0x1dc>
    dd84:	2901      	cmp	r1, #1
    dd86:	bf08      	it	eq
    dd88:	f043 0304 	orreq.w	r3, r3, #4
    dd8c:	f005 0518 	and.w	r5, r5, #24
    dd90:	f04f 0900 	mov.w	r9, #0
    dd94:	f006 061c 	and.w	r6, r6, #28
    dd98:	210f      	movs	r1, #15
    dd9a:	40b1      	lsls	r1, r6
    dd9c:	27ff      	movs	r7, #255	; 0xff
    dd9e:	fa02 f606 	lsl.w	r6, r2, r6
    dda2:	43ca      	mvns	r2, r1
    dda4:	40af      	lsls	r7, r5
    dda6:	9201      	str	r2, [sp, #4]
    dda8:	fa03 f505 	lsl.w	r5, r3, r5
    ddac:	f000 f92a 	bl	e004 <am_hal_interrupt_master_disable>
    ddb0:	f024 0b03 	bic.w	fp, r4, #3
    ddb4:	ea4f 0a54 	mov.w	sl, r4, lsr #1
    ddb8:	f10b 4c80 	add.w	ip, fp, #1073741824	; 0x40000000
    ddbc:	4b51      	ldr	r3, [pc, #324]	; (df04 <am_hal_gpio_pinconfig+0x258>)
    ddbe:	4952      	ldr	r1, [pc, #328]	; (df08 <am_hal_gpio_pinconfig+0x25c>)
    ddc0:	9a01      	ldr	r2, [sp, #4]
    ddc2:	9003      	str	r0, [sp, #12]
    ddc4:	43ff      	mvns	r7, r7
    ddc6:	f02a 0a03 	bic.w	sl, sl, #3
    ddca:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    ddce:	f1b8 0f00 	cmp.w	r8, #0
    ddd2:	d00b      	beq.n	ddec <am_hal_gpio_pinconfig+0x140>
    ddd4:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    ddd8:	f004 081f 	and.w	r8, r4, #31
    dddc:	484b      	ldr	r0, [pc, #300]	; (df0c <am_hal_gpio_pinconfig+0x260>)
    ddde:	f00e 0e04 	and.w	lr, lr, #4
    dde2:	2401      	movs	r4, #1
    dde4:	fa04 f408 	lsl.w	r4, r4, r8
    dde8:	f84e 4000 	str.w	r4, [lr, r0]
    ddec:	4848      	ldr	r0, [pc, #288]	; (df10 <am_hal_gpio_pinconfig+0x264>)
    ddee:	2473      	movs	r4, #115	; 0x73
    ddf0:	6604      	str	r4, [r0, #96]	; 0x60
    ddf2:	f8dc 4000 	ldr.w	r4, [ip]
    ddf6:	403c      	ands	r4, r7
    ddf8:	4325      	orrs	r5, r4
    ddfa:	f8cc 5000 	str.w	r5, [ip]
    ddfe:	f85a 4003 	ldr.w	r4, [sl, r3]
    de02:	4022      	ands	r2, r4
    de04:	4332      	orrs	r2, r6
    de06:	f84a 2003 	str.w	r2, [sl, r3]
    de0a:	f85b 3001 	ldr.w	r3, [fp, r1]
    de0e:	401f      	ands	r7, r3
    de10:	2400      	movs	r4, #0
    de12:	ea47 0709 	orr.w	r7, r7, r9
    de16:	f84b 7001 	str.w	r7, [fp, r1]
    de1a:	6604      	str	r4, [r0, #96]	; 0x60
    de1c:	9803      	ldr	r0, [sp, #12]
    de1e:	f000 f8f5 	bl	e00c <am_hal_interrupt_master_set>
    de22:	4620      	mov	r0, r4
    de24:	b005      	add	sp, #20
    de26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de2a:	2006      	movs	r0, #6
    de2c:	4770      	bx	lr
    de2e:	4d31      	ldr	r5, [pc, #196]	; (def4 <am_hal_gpio_pinconfig+0x248>)
    de30:	5d2d      	ldrb	r5, [r5, r4]
    de32:	3e02      	subs	r6, #2
    de34:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    de38:	07ee      	lsls	r6, r5, #31
    de3a:	d547      	bpl.n	decc <am_hal_gpio_pinconfig+0x220>
    de3c:	2b00      	cmp	r3, #0
    de3e:	f43f af63 	beq.w	dd08 <am_hal_gpio_pinconfig+0x5c>
    de42:	e754      	b.n	dcee <am_hal_gpio_pinconfig+0x42>
    de44:	f3c1 4202 	ubfx	r2, r1, #16, #3
    de48:	2a07      	cmp	r2, #7
    de4a:	d041      	beq.n	ded0 <am_hal_gpio_pinconfig+0x224>
    de4c:	4d31      	ldr	r5, [pc, #196]	; (df14 <am_hal_gpio_pinconfig+0x268>)
    de4e:	4610      	mov	r0, r2
    de50:	f815 6024 	ldrb.w	r6, [r5, r4, lsl #2]
    de54:	f3c1 42c1 	ubfx	r2, r1, #19, #2
    de58:	ea42 1000 	orr.w	r0, r2, r0, lsl #4
    de5c:	4286      	cmp	r6, r0
    de5e:	d039      	beq.n	ded4 <am_hal_gpio_pinconfig+0x228>
    de60:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    de64:	00a6      	lsls	r6, r4, #2
    de66:	786a      	ldrb	r2, [r5, #1]
    de68:	4282      	cmp	r2, r0
    de6a:	d03d      	beq.n	dee8 <am_hal_gpio_pinconfig+0x23c>
    de6c:	78aa      	ldrb	r2, [r5, #2]
    de6e:	4282      	cmp	r2, r0
    de70:	d03c      	beq.n	deec <am_hal_gpio_pinconfig+0x240>
    de72:	78ea      	ldrb	r2, [r5, #3]
    de74:	4282      	cmp	r2, r0
    de76:	d03b      	beq.n	def0 <am_hal_gpio_pinconfig+0x244>
    de78:	4827      	ldr	r0, [pc, #156]	; (df18 <am_hal_gpio_pinconfig+0x26c>)
    de7a:	b005      	add	sp, #20
    de7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de80:	4826      	ldr	r0, [pc, #152]	; (df1c <am_hal_gpio_pinconfig+0x270>)
    de82:	b005      	add	sp, #20
    de84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de88:	f005 0518 	and.w	r5, r5, #24
    de8c:	f04f 0901 	mov.w	r9, #1
    de90:	f043 0304 	orr.w	r3, r3, #4
    de94:	fa09 f905 	lsl.w	r9, r9, r5
    de98:	e77c      	b.n	dd94 <am_hal_gpio_pinconfig+0xe8>
    de9a:	f005 0518 	and.w	r5, r5, #24
    de9e:	f04f 0901 	mov.w	r9, #1
    dea2:	fa09 f905 	lsl.w	r9, r9, r5
    dea6:	e775      	b.n	dd94 <am_hal_gpio_pinconfig+0xe8>
    dea8:	f04f 0801 	mov.w	r8, #1
    deac:	e758      	b.n	dd60 <am_hal_gpio_pinconfig+0xb4>
    deae:	4b11      	ldr	r3, [pc, #68]	; (def4 <am_hal_gpio_pinconfig+0x248>)
    deb0:	5d1b      	ldrb	r3, [r3, r4]
    deb2:	079d      	lsls	r5, r3, #30
    deb4:	d5e4      	bpl.n	de80 <am_hal_gpio_pinconfig+0x1d4>
    deb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    deba:	e725      	b.n	dd08 <am_hal_gpio_pinconfig+0x5c>
    debc:	2c14      	cmp	r4, #20
    debe:	f43f af15 	beq.w	dcec <am_hal_gpio_pinconfig+0x40>
    dec2:	4817      	ldr	r0, [pc, #92]	; (df20 <am_hal_gpio_pinconfig+0x274>)
    dec4:	e7ae      	b.n	de24 <am_hal_gpio_pinconfig+0x178>
    dec6:	2c14      	cmp	r4, #20
    dec8:	f47f af10 	bne.w	dcec <am_hal_gpio_pinconfig+0x40>
    decc:	4815      	ldr	r0, [pc, #84]	; (df24 <am_hal_gpio_pinconfig+0x278>)
    dece:	e7a9      	b.n	de24 <am_hal_gpio_pinconfig+0x178>
    ded0:	4815      	ldr	r0, [pc, #84]	; (df28 <am_hal_gpio_pinconfig+0x27c>)
    ded2:	e7a7      	b.n	de24 <am_hal_gpio_pinconfig+0x178>
    ded4:	2200      	movs	r2, #0
    ded6:	00a6      	lsls	r6, r4, #2
    ded8:	0052      	lsls	r2, r2, #1
    deda:	f3c1 5040 	ubfx	r0, r1, #21, #1
    dede:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
    dee2:	f04f 0800 	mov.w	r8, #0
    dee6:	e743      	b.n	dd70 <am_hal_gpio_pinconfig+0xc4>
    dee8:	2201      	movs	r2, #1
    deea:	e7f5      	b.n	ded8 <am_hal_gpio_pinconfig+0x22c>
    deec:	2202      	movs	r2, #2
    deee:	e7f3      	b.n	ded8 <am_hal_gpio_pinconfig+0x22c>
    def0:	2203      	movs	r2, #3
    def2:	e7f1      	b.n	ded8 <am_hal_gpio_pinconfig+0x22c>
    def4:	0000ef40 	.word	0x0000ef40
    def8:	0000ef74 	.word	0x0000ef74
    defc:	0000f070 	.word	0x0000f070
    df00:	0000ef38 	.word	0x0000ef38
    df04:	40010040 	.word	0x40010040
    df08:	400100e0 	.word	0x400100e0
    df0c:	400100b4 	.word	0x400100b4
    df10:	40010000 	.word	0x40010000
    df14:	0000efa8 	.word	0x0000efa8
    df18:	08000104 	.word	0x08000104
    df1c:	08000102 	.word	0x08000102
    df20:	08000101 	.word	0x08000101
    df24:	08000100 	.word	0x08000100
    df28:	08000103 	.word	0x08000103

0000df2c <am_hal_gpio_interrupt_enable>:
    df2c:	b570      	push	{r4, r5, r6, lr}
    df2e:	0c8b      	lsrs	r3, r1, #18
    df30:	2500      	movs	r5, #0
    df32:	462a      	mov	r2, r5
    df34:	049b      	lsls	r3, r3, #18
    df36:	4313      	orrs	r3, r2
    df38:	b082      	sub	sp, #8
    df3a:	d115      	bne.n	df68 <am_hal_gpio_interrupt_enable+0x3c>
    df3c:	460c      	mov	r4, r1
    df3e:	4606      	mov	r6, r0
    df40:	f000 f860 	bl	e004 <am_hal_interrupt_master_disable>
    df44:	4b0a      	ldr	r3, [pc, #40]	; (df70 <am_hal_gpio_interrupt_enable+0x44>)
    df46:	9001      	str	r0, [sp, #4]
    df48:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
    df4c:	4330      	orrs	r0, r6
    df4e:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
    df52:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    df56:	430c      	orrs	r4, r1
    df58:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    df5c:	9801      	ldr	r0, [sp, #4]
    df5e:	f000 f855 	bl	e00c <am_hal_interrupt_master_set>
    df62:	4628      	mov	r0, r5
    df64:	b002      	add	sp, #8
    df66:	bd70      	pop	{r4, r5, r6, pc}
    df68:	2005      	movs	r0, #5
    df6a:	b002      	add	sp, #8
    df6c:	bd70      	pop	{r4, r5, r6, pc}
    df6e:	bf00      	nop
    df70:	40010000 	.word	0x40010000

0000df74 <am_hal_gpio_interrupt_disable>:
    df74:	b570      	push	{r4, r5, r6, lr}
    df76:	0c8b      	lsrs	r3, r1, #18
    df78:	2500      	movs	r5, #0
    df7a:	462a      	mov	r2, r5
    df7c:	049b      	lsls	r3, r3, #18
    df7e:	4313      	orrs	r3, r2
    df80:	b082      	sub	sp, #8
    df82:	d117      	bne.n	dfb4 <am_hal_gpio_interrupt_disable+0x40>
    df84:	460c      	mov	r4, r1
    df86:	4606      	mov	r6, r0
    df88:	f000 f83c 	bl	e004 <am_hal_interrupt_master_disable>
    df8c:	4b0b      	ldr	r3, [pc, #44]	; (dfbc <am_hal_gpio_interrupt_disable+0x48>)
    df8e:	9001      	str	r0, [sp, #4]
    df90:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
    df94:	ea20 0006 	bic.w	r0, r0, r6
    df98:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
    df9c:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    dfa0:	ea21 0404 	bic.w	r4, r1, r4
    dfa4:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    dfa8:	9801      	ldr	r0, [sp, #4]
    dfaa:	f000 f82f 	bl	e00c <am_hal_interrupt_master_set>
    dfae:	4628      	mov	r0, r5
    dfb0:	b002      	add	sp, #8
    dfb2:	bd70      	pop	{r4, r5, r6, pc}
    dfb4:	2005      	movs	r0, #5
    dfb6:	b002      	add	sp, #8
    dfb8:	bd70      	pop	{r4, r5, r6, pc}
    dfba:	bf00      	nop
    dfbc:	40010000 	.word	0x40010000

0000dfc0 <am_hal_gpio_interrupt_clear>:
    dfc0:	b570      	push	{r4, r5, r6, lr}
    dfc2:	0c8b      	lsrs	r3, r1, #18
    dfc4:	2500      	movs	r5, #0
    dfc6:	462a      	mov	r2, r5
    dfc8:	049b      	lsls	r3, r3, #18
    dfca:	4313      	orrs	r3, r2
    dfcc:	b082      	sub	sp, #8
    dfce:	d10f      	bne.n	dff0 <am_hal_gpio_interrupt_clear+0x30>
    dfd0:	460c      	mov	r4, r1
    dfd2:	4606      	mov	r6, r0
    dfd4:	f000 f816 	bl	e004 <am_hal_interrupt_master_disable>
    dfd8:	4b07      	ldr	r3, [pc, #28]	; (dff8 <am_hal_gpio_interrupt_clear+0x38>)
    dfda:	9001      	str	r0, [sp, #4]
    dfdc:	f8c3 6208 	str.w	r6, [r3, #520]	; 0x208
    dfe0:	f8c3 4218 	str.w	r4, [r3, #536]	; 0x218
    dfe4:	9801      	ldr	r0, [sp, #4]
    dfe6:	f000 f811 	bl	e00c <am_hal_interrupt_master_set>
    dfea:	4628      	mov	r0, r5
    dfec:	b002      	add	sp, #8
    dfee:	bd70      	pop	{r4, r5, r6, pc}
    dff0:	2005      	movs	r0, #5
    dff2:	b002      	add	sp, #8
    dff4:	bd70      	pop	{r4, r5, r6, pc}
    dff6:	bf00      	nop
    dff8:	40010000 	.word	0x40010000

0000dffc <am_hal_interrupt_master_enable>:
    dffc:	f3ef 8010 	mrs	r0, PRIMASK
    e000:	b662      	cpsie	i
    e002:	4770      	bx	lr

0000e004 <am_hal_interrupt_master_disable>:
    e004:	f3ef 8010 	mrs	r0, PRIMASK
    e008:	b672      	cpsid	i
    e00a:	4770      	bx	lr

0000e00c <am_hal_interrupt_master_set>:
    e00c:	f380 8810 	msr	PRIMASK, r0
    e010:	4770      	bx	lr
    e012:	bf00      	nop

0000e014 <am_hal_pwrctrl_periph_enable>:
    e014:	b570      	push	{r4, r5, r6, lr}
    e016:	b082      	sub	sp, #8
    e018:	4604      	mov	r4, r0
    e01a:	f7ff fff3 	bl	e004 <am_hal_interrupt_master_disable>
    e01e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e022:	4e0f      	ldr	r6, [pc, #60]	; (e060 <am_hal_pwrctrl_periph_enable+0x4c>)
    e024:	4d0f      	ldr	r5, [pc, #60]	; (e064 <am_hal_pwrctrl_periph_enable+0x50>)
    e026:	9001      	str	r0, [sp, #4]
    e028:	00a4      	lsls	r4, r4, #2
    e02a:	68b3      	ldr	r3, [r6, #8]
    e02c:	592a      	ldr	r2, [r5, r4]
    e02e:	4313      	orrs	r3, r2
    e030:	60b3      	str	r3, [r6, #8]
    e032:	9801      	ldr	r0, [sp, #4]
    e034:	442c      	add	r4, r5
    e036:	f7ff ffe9 	bl	e00c <am_hal_interrupt_master_set>
    e03a:	20a0      	movs	r0, #160	; 0xa0
    e03c:	f7ff fde6 	bl	dc0c <am_hal_flash_delay>
    e040:	69b3      	ldr	r3, [r6, #24]
    e042:	6864      	ldr	r4, [r4, #4]
    e044:	4223      	tst	r3, r4
    e046:	d103      	bne.n	e050 <am_hal_pwrctrl_periph_enable+0x3c>
    e048:	20a0      	movs	r0, #160	; 0xa0
    e04a:	f7ff fddf 	bl	dc0c <am_hal_flash_delay>
    e04e:	69b3      	ldr	r3, [r6, #24]
    e050:	4b03      	ldr	r3, [pc, #12]	; (e060 <am_hal_pwrctrl_periph_enable+0x4c>)
    e052:	699b      	ldr	r3, [r3, #24]
    e054:	4223      	tst	r3, r4
    e056:	bf0c      	ite	eq
    e058:	2001      	moveq	r0, #1
    e05a:	2000      	movne	r0, #0
    e05c:	b002      	add	sp, #8
    e05e:	bd70      	pop	{r4, r5, r6, pc}
    e060:	40021000 	.word	0x40021000
    e064:	0000f0a4 	.word	0x0000f0a4

0000e068 <am_hal_pwrctrl_periph_disable>:
    e068:	b570      	push	{r4, r5, r6, lr}
    e06a:	b082      	sub	sp, #8
    e06c:	4604      	mov	r4, r0
    e06e:	f7ff ffc9 	bl	e004 <am_hal_interrupt_master_disable>
    e072:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e076:	4e10      	ldr	r6, [pc, #64]	; (e0b8 <am_hal_pwrctrl_periph_disable+0x50>)
    e078:	4d10      	ldr	r5, [pc, #64]	; (e0bc <am_hal_pwrctrl_periph_disable+0x54>)
    e07a:	9001      	str	r0, [sp, #4]
    e07c:	00a4      	lsls	r4, r4, #2
    e07e:	68b3      	ldr	r3, [r6, #8]
    e080:	592a      	ldr	r2, [r5, r4]
    e082:	ea23 0302 	bic.w	r3, r3, r2
    e086:	60b3      	str	r3, [r6, #8]
    e088:	9801      	ldr	r0, [sp, #4]
    e08a:	442c      	add	r4, r5
    e08c:	f7ff ffbe 	bl	e00c <am_hal_interrupt_master_set>
    e090:	20a0      	movs	r0, #160	; 0xa0
    e092:	f7ff fdbb 	bl	dc0c <am_hal_flash_delay>
    e096:	69b3      	ldr	r3, [r6, #24]
    e098:	6864      	ldr	r4, [r4, #4]
    e09a:	4223      	tst	r3, r4
    e09c:	d003      	beq.n	e0a6 <am_hal_pwrctrl_periph_disable+0x3e>
    e09e:	20a0      	movs	r0, #160	; 0xa0
    e0a0:	f7ff fdb4 	bl	dc0c <am_hal_flash_delay>
    e0a4:	69b3      	ldr	r3, [r6, #24]
    e0a6:	4b04      	ldr	r3, [pc, #16]	; (e0b8 <am_hal_pwrctrl_periph_disable+0x50>)
    e0a8:	699b      	ldr	r3, [r3, #24]
    e0aa:	4223      	tst	r3, r4
    e0ac:	bf14      	ite	ne
    e0ae:	2001      	movne	r0, #1
    e0b0:	2000      	moveq	r0, #0
    e0b2:	b002      	add	sp, #8
    e0b4:	bd70      	pop	{r4, r5, r6, pc}
    e0b6:	bf00      	nop
    e0b8:	40021000 	.word	0x40021000
    e0bc:	0000f0a4 	.word	0x0000f0a4

0000e0c0 <am_hal_pwrctrl_blebuck_trim>:
    e0c0:	b510      	push	{r4, lr}
    e0c2:	4c12      	ldr	r4, [pc, #72]	; (e10c <am_hal_pwrctrl_blebuck_trim+0x4c>)
    e0c4:	68e3      	ldr	r3, [r4, #12]
    e0c6:	b2db      	uxtb	r3, r3
    e0c8:	2b11      	cmp	r3, #17
    e0ca:	b082      	sub	sp, #8
    e0cc:	d801      	bhi.n	e0d2 <am_hal_pwrctrl_blebuck_trim+0x12>
    e0ce:	b002      	add	sp, #8
    e0d0:	bd10      	pop	{r4, pc}
    e0d2:	f7ff ff97 	bl	e004 <am_hal_interrupt_master_disable>
    e0d6:	9001      	str	r0, [sp, #4]
    e0d8:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e0dc:	2219      	movs	r2, #25
    e0de:	f362 138b 	bfi	r3, r2, #6, #6
    e0e2:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e0e6:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e0ea:	230c      	movs	r3, #12
    e0ec:	f363 0205 	bfi	r2, r3, #0, #6
    e0f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e0f4:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e0f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e0fa:	f36f 5296 	bfc	r2, #22, #1
    e0fe:	63da      	str	r2, [r3, #60]	; 0x3c
    e100:	9801      	ldr	r0, [sp, #4]
    e102:	b002      	add	sp, #8
    e104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e108:	f7ff bf80 	b.w	e00c <am_hal_interrupt_master_set>
    e10c:	40020000 	.word	0x40020000

0000e110 <am_hal_reset_control>:
    e110:	2803      	cmp	r0, #3
    e112:	d819      	bhi.n	e148 <am_hal_reset_control+0x38>
    e114:	e8df f000 	tbb	[pc, r0]
    e118:	02140e08 	.word	0x02140e08
    e11c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e120:	2201      	movs	r2, #1
    e122:	615a      	str	r2, [r3, #20]
    e124:	2000      	movs	r0, #0
    e126:	4770      	bx	lr
    e128:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e12c:	22d4      	movs	r2, #212	; 0xd4
    e12e:	609a      	str	r2, [r3, #8]
    e130:	2000      	movs	r0, #0
    e132:	4770      	bx	lr
    e134:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e138:	221b      	movs	r2, #27
    e13a:	605a      	str	r2, [r3, #4]
    e13c:	2000      	movs	r0, #0
    e13e:	4770      	bx	lr
    e140:	4b02      	ldr	r3, [pc, #8]	; (e14c <am_hal_reset_control+0x3c>)
    e142:	2000      	movs	r0, #0
    e144:	6018      	str	r0, [r3, #0]
    e146:	4770      	bx	lr
    e148:	2006      	movs	r0, #6
    e14a:	4770      	bx	lr
    e14c:	4ffff000 	.word	0x4ffff000

0000e150 <am_hal_stimer_config>:
    e150:	4a03      	ldr	r2, [pc, #12]	; (e160 <am_hal_stimer_config+0x10>)
    e152:	4603      	mov	r3, r0
    e154:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
    e158:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    e15c:	4770      	bx	lr
    e15e:	bf00      	nop
    e160:	40008000 	.word	0x40008000

0000e164 <am_hal_stimer_counter_get>:
    e164:	4b01      	ldr	r3, [pc, #4]	; (e16c <am_hal_stimer_counter_get+0x8>)
    e166:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
    e16a:	4770      	bx	lr
    e16c:	40008000 	.word	0x40008000

0000e170 <am_hal_stimer_int_enable>:
    e170:	4a03      	ldr	r2, [pc, #12]	; (e180 <am_hal_stimer_int_enable+0x10>)
    e172:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
    e176:	4318      	orrs	r0, r3
    e178:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
    e17c:	4770      	bx	lr
    e17e:	bf00      	nop
    e180:	40008000 	.word	0x40008000

0000e184 <am_hal_stimer_int_disable>:
    e184:	4a03      	ldr	r2, [pc, #12]	; (e194 <am_hal_stimer_int_disable+0x10>)
    e186:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
    e18a:	ea23 0000 	bic.w	r0, r3, r0
    e18e:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
    e192:	4770      	bx	lr
    e194:	40008000 	.word	0x40008000

0000e198 <am_hal_stimer_int_clear>:
    e198:	4b01      	ldr	r3, [pc, #4]	; (e1a0 <am_hal_stimer_int_clear+0x8>)
    e19a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    e19e:	4770      	bx	lr
    e1a0:	40008000 	.word	0x40008000

0000e1a4 <am_hal_sysctrl_sleep>:
    e1a4:	b510      	push	{r4, lr}
    e1a6:	b082      	sub	sp, #8
    e1a8:	4604      	mov	r4, r0
    e1aa:	f7ff ff2b 	bl	e004 <am_hal_interrupt_master_disable>
    e1ae:	9001      	str	r0, [sp, #4]
    e1b0:	b124      	cbz	r4, e1bc <am_hal_sysctrl_sleep+0x18>
    e1b2:	4b12      	ldr	r3, [pc, #72]	; (e1fc <am_hal_sysctrl_sleep+0x58>)
    e1b4:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e1b8:	07db      	lsls	r3, r3, #31
    e1ba:	d513      	bpl.n	e1e4 <am_hal_sysctrl_sleep+0x40>
    e1bc:	4a10      	ldr	r2, [pc, #64]	; (e200 <am_hal_sysctrl_sleep+0x5c>)
    e1be:	6913      	ldr	r3, [r2, #16]
    e1c0:	f023 0304 	bic.w	r3, r3, #4
    e1c4:	6113      	str	r3, [r2, #16]
    e1c6:	f3bf 8f4f 	dsb	sy
    e1ca:	4a0e      	ldr	r2, [pc, #56]	; (e204 <am_hal_sysctrl_sleep+0x60>)
    e1cc:	4b0e      	ldr	r3, [pc, #56]	; (e208 <am_hal_sysctrl_sleep+0x64>)
    e1ce:	6812      	ldr	r2, [r2, #0]
    e1d0:	601a      	str	r2, [r3, #0]
    e1d2:	bf30      	wfi
    e1d4:	f3bf 8f6f 	isb	sy
    e1d8:	9801      	ldr	r0, [sp, #4]
    e1da:	b002      	add	sp, #8
    e1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e1e0:	f7ff bf14 	b.w	e00c <am_hal_interrupt_master_set>
    e1e4:	4b09      	ldr	r3, [pc, #36]	; (e20c <am_hal_sysctrl_sleep+0x68>)
    e1e6:	681a      	ldr	r2, [r3, #0]
    e1e8:	b912      	cbnz	r2, e1f0 <am_hal_sysctrl_sleep+0x4c>
    e1ea:	4a09      	ldr	r2, [pc, #36]	; (e210 <am_hal_sysctrl_sleep+0x6c>)
    e1ec:	6812      	ldr	r2, [r2, #0]
    e1ee:	601a      	str	r2, [r3, #0]
    e1f0:	4a03      	ldr	r2, [pc, #12]	; (e200 <am_hal_sysctrl_sleep+0x5c>)
    e1f2:	6913      	ldr	r3, [r2, #16]
    e1f4:	f043 0304 	orr.w	r3, r3, #4
    e1f8:	6113      	str	r3, [r2, #16]
    e1fa:	e7e4      	b.n	e1c6 <am_hal_sysctrl_sleep+0x22>
    e1fc:	40020000 	.word	0x40020000
    e200:	e000ed00 	.word	0xe000ed00
    e204:	5fff0000 	.word	0x5fff0000
    e208:	10000a70 	.word	0x10000a70
    e20c:	10000a6c 	.word	0x10000a6c
    e210:	4ffff000 	.word	0x4ffff000

0000e214 <am_hal_uart_initialize>:
    e214:	2801      	cmp	r0, #1
    e216:	d819      	bhi.n	e24c <am_hal_uart_initialize+0x38>
    e218:	b1e9      	cbz	r1, e256 <am_hal_uart_initialize+0x42>
    e21a:	b4f0      	push	{r4, r5, r6, r7}
    e21c:	2264      	movs	r2, #100	; 0x64
    e21e:	4d0f      	ldr	r5, [pc, #60]	; (e25c <am_hal_uart_initialize+0x48>)
    e220:	fb02 f200 	mul.w	r2, r2, r0
    e224:	18ac      	adds	r4, r5, r2
    e226:	78e3      	ldrb	r3, [r4, #3]
    e228:	f3c3 0700 	ubfx	r7, r3, #0, #1
    e22c:	f013 0301 	ands.w	r3, r3, #1
    e230:	d10e      	bne.n	e250 <am_hal_uart_initialize+0x3c>
    e232:	6260      	str	r0, [r4, #36]	; 0x24
    e234:	58ae      	ldr	r6, [r5, r2]
    e236:	480a      	ldr	r0, [pc, #40]	; (e260 <am_hal_uart_initialize+0x4c>)
    e238:	f006 467e 	and.w	r6, r6, #4261412864	; 0xfe000000
    e23c:	4330      	orrs	r0, r6
    e23e:	50a8      	str	r0, [r5, r2]
    e240:	7127      	strb	r7, [r4, #4]
    e242:	6623      	str	r3, [r4, #96]	; 0x60
    e244:	4618      	mov	r0, r3
    e246:	600c      	str	r4, [r1, #0]
    e248:	bcf0      	pop	{r4, r5, r6, r7}
    e24a:	4770      	bx	lr
    e24c:	2005      	movs	r0, #5
    e24e:	4770      	bx	lr
    e250:	2007      	movs	r0, #7
    e252:	bcf0      	pop	{r4, r5, r6, r7}
    e254:	4770      	bx	lr
    e256:	2006      	movs	r0, #6
    e258:	4770      	bx	lr
    e25a:	bf00      	nop
    e25c:	10000a74 	.word	0x10000a74
    e260:	01ea9e06 	.word	0x01ea9e06

0000e264 <am_hal_uart_power_control>:
    e264:	b5f0      	push	{r4, r5, r6, r7, lr}
    e266:	4604      	mov	r4, r0
    e268:	6800      	ldr	r0, [r0, #0]
    e26a:	4b39      	ldr	r3, [pc, #228]	; (e350 <am_hal_uart_power_control+0xec>)
    e26c:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    e270:	429e      	cmp	r6, r3
    e272:	b085      	sub	sp, #20
    e274:	d13f      	bne.n	e2f6 <am_hal_uart_power_control+0x92>
    e276:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e278:	f105 0008 	add.w	r0, r5, #8
    e27c:	b2c7      	uxtb	r7, r0
    e27e:	b1a1      	cbz	r1, e2aa <am_hal_uart_power_control+0x46>
    e280:	3901      	subs	r1, #1
    e282:	2901      	cmp	r1, #1
    e284:	d80e      	bhi.n	e2a4 <am_hal_uart_power_control+0x40>
    e286:	2a00      	cmp	r2, #0
    e288:	d138      	bne.n	e2fc <am_hal_uart_power_control+0x98>
    e28a:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e28e:	351c      	adds	r5, #28
    e290:	032d      	lsls	r5, r5, #12
    e292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e296:	646b      	str	r3, [r5, #68]	; 0x44
    e298:	4638      	mov	r0, r7
    e29a:	f7ff fee5 	bl	e068 <am_hal_pwrctrl_periph_disable>
    e29e:	2000      	movs	r0, #0
    e2a0:	b005      	add	sp, #20
    e2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e2a4:	2006      	movs	r0, #6
    e2a6:	b005      	add	sp, #20
    e2a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e2aa:	2a00      	cmp	r2, #0
    e2ac:	d047      	beq.n	e33e <am_hal_uart_power_control+0xda>
    e2ae:	7923      	ldrb	r3, [r4, #4]
    e2b0:	2b00      	cmp	r3, #0
    e2b2:	d04b      	beq.n	e34c <am_hal_uart_power_control+0xe8>
    e2b4:	4638      	mov	r0, r7
    e2b6:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e2ba:	9101      	str	r1, [sp, #4]
    e2bc:	351c      	adds	r5, #28
    e2be:	f7ff fea9 	bl	e014 <am_hal_pwrctrl_periph_enable>
    e2c2:	f7ff fe9f 	bl	e004 <am_hal_interrupt_master_disable>
    e2c6:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
    e2ca:	032d      	lsls	r5, r5, #12
    e2cc:	9002      	str	r0, [sp, #8]
    e2ce:	6922      	ldr	r2, [r4, #16]
    e2d0:	622b      	str	r3, [r5, #32]
    e2d2:	6963      	ldr	r3, [r4, #20]
    e2d4:	69a0      	ldr	r0, [r4, #24]
    e2d6:	626e      	str	r6, [r5, #36]	; 0x24
    e2d8:	62aa      	str	r2, [r5, #40]	; 0x28
    e2da:	69e2      	ldr	r2, [r4, #28]
    e2dc:	62eb      	str	r3, [r5, #44]	; 0x2c
    e2de:	6a23      	ldr	r3, [r4, #32]
    e2e0:	9901      	ldr	r1, [sp, #4]
    e2e2:	6328      	str	r0, [r5, #48]	; 0x30
    e2e4:	636a      	str	r2, [r5, #52]	; 0x34
    e2e6:	63ab      	str	r3, [r5, #56]	; 0x38
    e2e8:	9802      	ldr	r0, [sp, #8]
    e2ea:	7121      	strb	r1, [r4, #4]
    e2ec:	f7ff fe8e 	bl	e00c <am_hal_interrupt_master_set>
    e2f0:	9901      	ldr	r1, [sp, #4]
    e2f2:	4608      	mov	r0, r1
    e2f4:	e7d7      	b.n	e2a6 <am_hal_uart_power_control+0x42>
    e2f6:	2002      	movs	r0, #2
    e2f8:	b005      	add	sp, #20
    e2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e2fc:	f7ff fe82 	bl	e004 <am_hal_interrupt_master_disable>
    e300:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e304:	351c      	adds	r5, #28
    e306:	032d      	lsls	r5, r5, #12
    e308:	9003      	str	r0, [sp, #12]
    e30a:	6a2a      	ldr	r2, [r5, #32]
    e30c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e30e:	60a2      	str	r2, [r4, #8]
    e310:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    e312:	60e3      	str	r3, [r4, #12]
    e314:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e316:	6b29      	ldr	r1, [r5, #48]	; 0x30
    e318:	6163      	str	r3, [r4, #20]
    e31a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    e31c:	6122      	str	r2, [r4, #16]
    e31e:	6baa      	ldr	r2, [r5, #56]	; 0x38
    e320:	61e3      	str	r3, [r4, #28]
    e322:	2301      	movs	r3, #1
    e324:	7123      	strb	r3, [r4, #4]
    e326:	9803      	ldr	r0, [sp, #12]
    e328:	61a1      	str	r1, [r4, #24]
    e32a:	6222      	str	r2, [r4, #32]
    e32c:	f7ff fe6e 	bl	e00c <am_hal_interrupt_master_set>
    e330:	6823      	ldr	r3, [r4, #0]
    e332:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e336:	42b3      	cmp	r3, r6
    e338:	d1ae      	bne.n	e298 <am_hal_uart_power_control+0x34>
    e33a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e33c:	e7a5      	b.n	e28a <am_hal_uart_power_control+0x26>
    e33e:	4638      	mov	r0, r7
    e340:	9201      	str	r2, [sp, #4]
    e342:	f7ff fe67 	bl	e014 <am_hal_pwrctrl_periph_enable>
    e346:	9a01      	ldr	r2, [sp, #4]
    e348:	4610      	mov	r0, r2
    e34a:	e7ac      	b.n	e2a6 <am_hal_uart_power_control+0x42>
    e34c:	2007      	movs	r0, #7
    e34e:	e7aa      	b.n	e2a6 <am_hal_uart_power_control+0x42>
    e350:	01ea9e06 	.word	0x01ea9e06

0000e354 <am_hal_uart_configure>:
    e354:	6803      	ldr	r3, [r0, #0]
    e356:	4a78      	ldr	r2, [pc, #480]	; (e538 <am_hal_uart_configure+0x1e4>)
    e358:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e35c:	4293      	cmp	r3, r2
    e35e:	d001      	beq.n	e364 <am_hal_uart_configure+0x10>
    e360:	2002      	movs	r0, #2
    e362:	4770      	bx	lr
    e364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e368:	6a44      	ldr	r4, [r0, #36]	; 0x24
    e36a:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
    e36e:	341c      	adds	r4, #28
    e370:	0324      	lsls	r4, r4, #12
    e372:	2700      	movs	r7, #0
    e374:	b084      	sub	sp, #16
    e376:	6327      	str	r7, [r4, #48]	; 0x30
    e378:	460e      	mov	r6, r1
    e37a:	4605      	mov	r5, r0
    e37c:	f7ff fe42 	bl	e004 <am_hal_interrupt_master_disable>
    e380:	9001      	str	r0, [sp, #4]
    e382:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e384:	f043 0308 	orr.w	r3, r3, #8
    e388:	8623      	strh	r3, [r4, #48]	; 0x30
    e38a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e38c:	2201      	movs	r2, #1
    e38e:	f362 1306 	bfi	r3, r2, #4, #3
    e392:	8623      	strh	r3, [r4, #48]	; 0x30
    e394:	9801      	ldr	r0, [sp, #4]
    e396:	f7ff fe39 	bl	e00c <am_hal_interrupt_master_set>
    e39a:	f7ff fe33 	bl	e004 <am_hal_interrupt_master_disable>
    e39e:	9002      	str	r0, [sp, #8]
    e3a0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e3a2:	f367 0300 	bfi	r3, r7, #0, #1
    e3a6:	8623      	strh	r3, [r4, #48]	; 0x30
    e3a8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e3aa:	f367 2349 	bfi	r3, r7, #9, #1
    e3ae:	8623      	strh	r3, [r4, #48]	; 0x30
    e3b0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e3b2:	f367 2308 	bfi	r3, r7, #8, #1
    e3b6:	8623      	strh	r3, [r4, #48]	; 0x30
    e3b8:	9802      	ldr	r0, [sp, #8]
    e3ba:	f7ff fe27 	bl	e00c <am_hal_interrupt_master_set>
    e3be:	4b5f      	ldr	r3, [pc, #380]	; (e53c <am_hal_uart_configure+0x1e8>)
    e3c0:	6832      	ldr	r2, [r6, #0]
    e3c2:	68db      	ldr	r3, [r3, #12]
    e3c4:	b2db      	uxtb	r3, r3
    e3c6:	2b12      	cmp	r3, #18
    e3c8:	d076      	beq.n	e4b8 <am_hal_uart_configure+0x164>
    e3ca:	4b5c      	ldr	r3, [pc, #368]	; (e53c <am_hal_uart_configure+0x1e8>)
    e3cc:	68db      	ldr	r3, [r3, #12]
    e3ce:	b2db      	uxtb	r3, r3
    e3d0:	2b20      	cmp	r3, #32
    e3d2:	d902      	bls.n	e3da <am_hal_uart_configure+0x86>
    e3d4:	4b5a      	ldr	r3, [pc, #360]	; (e540 <am_hal_uart_configure+0x1ec>)
    e3d6:	429a      	cmp	r2, r3
    e3d8:	d871      	bhi.n	e4be <am_hal_uart_configure+0x16a>
    e3da:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e3dc:	f3c3 1302 	ubfx	r3, r3, #4, #3
    e3e0:	3b01      	subs	r3, #1
    e3e2:	b2db      	uxtb	r3, r3
    e3e4:	2b03      	cmp	r3, #3
    e3e6:	d86c      	bhi.n	e4c2 <am_hal_uart_configure+0x16e>
    e3e8:	4956      	ldr	r1, [pc, #344]	; (e544 <am_hal_uart_configure+0x1f0>)
    e3ea:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    e3ee:	0112      	lsls	r2, r2, #4
    e3f0:	4291      	cmp	r1, r2
    e3f2:	ea4f 1381 	mov.w	r3, r1, lsl #6
    e3f6:	fbb1 f0f2 	udiv	r0, r1, r2
    e3fa:	fbb3 f3f2 	udiv	r3, r3, r2
    e3fe:	eba3 1380 	sub.w	r3, r3, r0, lsl #6
    e402:	d364      	bcc.n	e4ce <am_hal_uart_configure+0x17a>
    e404:	089a      	lsrs	r2, r3, #2
    e406:	6260      	str	r0, [r4, #36]	; 0x24
    e408:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    e40c:	6260      	str	r0, [r4, #36]	; 0x24
    e40e:	fbb1 f1f2 	udiv	r1, r1, r2
    e412:	62a3      	str	r3, [r4, #40]	; 0x28
    e414:	6629      	str	r1, [r5, #96]	; 0x60
    e416:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e418:	f36f 338e 	bfc	r3, #14, #1
    e41c:	8623      	strh	r3, [r4, #48]	; 0x30
    e41e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e420:	f36f 33cf 	bfc	r3, #15, #1
    e424:	8623      	strh	r3, [r4, #48]	; 0x30
    e426:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
    e42a:	6873      	ldr	r3, [r6, #4]
    e42c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    e42e:	430b      	orrs	r3, r1
    e430:	6931      	ldr	r1, [r6, #16]
    e432:	4303      	orrs	r3, r0
    e434:	430a      	orrs	r2, r1
    e436:	f043 0310 	orr.w	r3, r3, #16
    e43a:	6971      	ldr	r1, [r6, #20]
    e43c:	6322      	str	r2, [r4, #48]	; 0x30
    e43e:	6361      	str	r1, [r4, #52]	; 0x34
    e440:	62e3      	str	r3, [r4, #44]	; 0x2c
    e442:	f7ff fddf 	bl	e004 <am_hal_interrupt_master_disable>
    e446:	9003      	str	r0, [sp, #12]
    e448:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e44a:	f043 0301 	orr.w	r3, r3, #1
    e44e:	8623      	strh	r3, [r4, #48]	; 0x30
    e450:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e456:	8623      	strh	r3, [r4, #48]	; 0x30
    e458:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e45a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e45e:	8623      	strh	r3, [r4, #48]	; 0x30
    e460:	9803      	ldr	r0, [sp, #12]
    e462:	f7ff fdd3 	bl	e00c <am_hal_interrupt_master_set>
    e466:	682a      	ldr	r2, [r5, #0]
    e468:	4b33      	ldr	r3, [pc, #204]	; (e538 <am_hal_uart_configure+0x1e4>)
    e46a:	f022 487e 	bic.w	r8, r2, #4261412864	; 0xfe000000
    e46e:	4598      	cmp	r8, r3
    e470:	d11e      	bne.n	e4b0 <am_hal_uart_configure+0x15c>
    e472:	69b1      	ldr	r1, [r6, #24]
    e474:	e9d6 4708 	ldrd	r4, r7, [r6, #32]
    e478:	b109      	cbz	r1, e47e <am_hal_uart_configure+0x12a>
    e47a:	69f3      	ldr	r3, [r6, #28]
    e47c:	bb5b      	cbnz	r3, e4d6 <am_hal_uart_configure+0x182>
    e47e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e480:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e484:	331c      	adds	r3, #28
    e486:	031b      	lsls	r3, r3, #12
    e488:	2100      	movs	r1, #0
    e48a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e48c:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
    e490:	f022 0220 	bic.w	r2, r2, #32
    e494:	639a      	str	r2, [r3, #56]	; 0x38
    e496:	b10c      	cbz	r4, e49c <am_hal_uart_configure+0x148>
    e498:	2f00      	cmp	r7, #0
    e49a:	d132      	bne.n	e502 <am_hal_uart_configure+0x1ae>
    e49c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e49e:	2000      	movs	r0, #0
    e4a0:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    e4a4:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    e4a8:	639a      	str	r2, [r3, #56]	; 0x38
    e4aa:	b004      	add	sp, #16
    e4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4b0:	2000      	movs	r0, #0
    e4b2:	b004      	add	sp, #16
    e4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4b8:	f5b2 2f61 	cmp.w	r2, #921600	; 0xe1000
    e4bc:	d985      	bls.n	e3ca <am_hal_uart_configure+0x76>
    e4be:	4822      	ldr	r0, [pc, #136]	; (e548 <am_hal_uart_configure+0x1f4>)
    e4c0:	e7f3      	b.n	e4aa <am_hal_uart_configure+0x156>
    e4c2:	4822      	ldr	r0, [pc, #136]	; (e54c <am_hal_uart_configure+0x1f8>)
    e4c4:	2300      	movs	r3, #0
    e4c6:	662b      	str	r3, [r5, #96]	; 0x60
    e4c8:	b004      	add	sp, #16
    e4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4ce:	2300      	movs	r3, #0
    e4d0:	481d      	ldr	r0, [pc, #116]	; (e548 <am_hal_uart_configure+0x1f4>)
    e4d2:	662b      	str	r3, [r5, #96]	; 0x60
    e4d4:	e7e9      	b.n	e4aa <am_hal_uart_configure+0x156>
    e4d6:	2201      	movs	r2, #1
    e4d8:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    e4dc:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    e4e0:	f000 fb18 	bl	eb14 <am_hal_queue_init>
    e4e4:	682b      	ldr	r3, [r5, #0]
    e4e6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e4ea:	4543      	cmp	r3, r8
    e4ec:	d1e0      	bne.n	e4b0 <am_hal_uart_configure+0x15c>
    e4ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e4f0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e4f4:	331c      	adds	r3, #28
    e4f6:	031b      	lsls	r3, r3, #12
    e4f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e4fa:	f042 0220 	orr.w	r2, r2, #32
    e4fe:	639a      	str	r2, [r3, #56]	; 0x38
    e500:	e7c9      	b.n	e496 <am_hal_uart_configure+0x142>
    e502:	2201      	movs	r2, #1
    e504:	463b      	mov	r3, r7
    e506:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    e50a:	4621      	mov	r1, r4
    e50c:	f105 0048 	add.w	r0, r5, #72	; 0x48
    e510:	f000 fb00 	bl	eb14 <am_hal_queue_init>
    e514:	682b      	ldr	r3, [r5, #0]
    e516:	4a08      	ldr	r2, [pc, #32]	; (e538 <am_hal_uart_configure+0x1e4>)
    e518:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e51c:	4293      	cmp	r3, r2
    e51e:	d1c7      	bne.n	e4b0 <am_hal_uart_configure+0x15c>
    e520:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e522:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e526:	331c      	adds	r3, #28
    e528:	031b      	lsls	r3, r3, #12
    e52a:	2000      	movs	r0, #0
    e52c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e52e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    e532:	639a      	str	r2, [r3, #56]	; 0x38
    e534:	e7b9      	b.n	e4aa <am_hal_uart_configure+0x156>
    e536:	bf00      	nop
    e538:	01ea9e06 	.word	0x01ea9e06
    e53c:	40020000 	.word	0x40020000
    e540:	0016e360 	.word	0x0016e360
    e544:	0000f158 	.word	0x0000f158
    e548:	08000003 	.word	0x08000003
    e54c:	08000002 	.word	0x08000002

0000e550 <am_hal_uart_transfer>:
    e550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e554:	ed2d 8b02 	vpush	{d8}
    e558:	680d      	ldr	r5, [r1, #0]
    e55a:	b091      	sub	sp, #68	; 0x44
    e55c:	4604      	mov	r4, r0
    e55e:	b14d      	cbz	r5, e574 <am_hal_uart_transfer+0x24>
    e560:	2d01      	cmp	r5, #1
    e562:	f000 8091 	beq.w	e688 <am_hal_uart_transfer+0x138>
    e566:	2507      	movs	r5, #7
    e568:	4628      	mov	r0, r5
    e56a:	b011      	add	sp, #68	; 0x44
    e56c:	ecbd 8b02 	vpop	{d8}
    e570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e574:	f8d1 900c 	ldr.w	r9, [r1, #12]
    e578:	684b      	ldr	r3, [r1, #4]
    e57a:	690a      	ldr	r2, [r1, #16]
    e57c:	688e      	ldr	r6, [r1, #8]
    e57e:	9301      	str	r3, [sp, #4]
    e580:	9203      	str	r2, [sp, #12]
    e582:	f1b9 0f00 	cmp.w	r9, #0
    e586:	f000 8113 	beq.w	e7b0 <am_hal_uart_transfer+0x260>
    e58a:	2e00      	cmp	r6, #0
    e58c:	f000 8179 	beq.w	e882 <am_hal_uart_transfer+0x332>
    e590:	2800      	cmp	r0, #0
    e592:	f000 8168 	beq.w	e866 <am_hal_uart_transfer+0x316>
    e596:	46aa      	mov	sl, r5
    e598:	462f      	mov	r7, r5
    e59a:	9502      	str	r5, [sp, #8]
    e59c:	4605      	mov	r5, r0
    e59e:	4619      	mov	r1, r3
    e5a0:	682a      	ldr	r2, [r5, #0]
    e5a2:	4bb4      	ldr	r3, [pc, #720]	; (e874 <am_hal_uart_transfer+0x324>)
    e5a4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e5a8:	429a      	cmp	r2, r3
    e5aa:	d12f      	bne.n	e60c <am_hal_uart_transfer+0xbc>
    e5ac:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    e5b0:	2a00      	cmp	r2, #0
    e5b2:	d133      	bne.n	e61c <am_hal_uart_transfer+0xcc>
    e5b4:	6a68      	ldr	r0, [r5, #36]	; 0x24
    e5b6:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    e5ba:	301c      	adds	r0, #28
    e5bc:	3901      	subs	r1, #1
    e5be:	0300      	lsls	r0, r0, #12
    e5c0:	e005      	b.n	e5ce <am_hal_uart_transfer+0x7e>
    e5c2:	3201      	adds	r2, #1
    e5c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e5c8:	6003      	str	r3, [r0, #0]
    e5ca:	42b2      	cmp	r2, r6
    e5cc:	d023      	beq.n	e616 <am_hal_uart_transfer+0xc6>
    e5ce:	6983      	ldr	r3, [r0, #24]
    e5d0:	069c      	lsls	r4, r3, #26
    e5d2:	d5f6      	bpl.n	e5c2 <am_hal_uart_transfer+0x72>
    e5d4:	4417      	add	r7, r2
    e5d6:	1ab6      	subs	r6, r6, r2
    e5d8:	b936      	cbnz	r6, e5e8 <am_hal_uart_transfer+0x98>
    e5da:	9d02      	ldr	r5, [sp, #8]
    e5dc:	9b03      	ldr	r3, [sp, #12]
    e5de:	2b00      	cmp	r3, #0
    e5e0:	f000 808d 	beq.w	e6fe <am_hal_uart_transfer+0x1ae>
    e5e4:	601f      	str	r7, [r3, #0]
    e5e6:	e7bf      	b.n	e568 <am_hal_uart_transfer+0x18>
    e5e8:	2010      	movs	r0, #16
    e5ea:	f7ff fb0f 	bl	dc0c <am_hal_flash_delay>
    e5ee:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    e5f2:	bf18      	it	ne
    e5f4:	f10a 0a01 	addne.w	sl, sl, #1
    e5f8:	45d1      	cmp	r9, sl
    e5fa:	d9ee      	bls.n	e5da <am_hal_uart_transfer+0x8a>
    e5fc:	9b01      	ldr	r3, [sp, #4]
    e5fe:	682a      	ldr	r2, [r5, #0]
    e600:	19d9      	adds	r1, r3, r7
    e602:	4b9c      	ldr	r3, [pc, #624]	; (e874 <am_hal_uart_transfer+0x324>)
    e604:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e608:	429a      	cmp	r2, r3
    e60a:	d0cf      	beq.n	e5ac <am_hal_uart_transfer+0x5c>
    e60c:	9b03      	ldr	r3, [sp, #12]
    e60e:	b103      	cbz	r3, e612 <am_hal_uart_transfer+0xc2>
    e610:	601f      	str	r7, [r3, #0]
    e612:	2502      	movs	r5, #2
    e614:	e7a8      	b.n	e568 <am_hal_uart_transfer+0x18>
    e616:	9d02      	ldr	r5, [sp, #8]
    e618:	4417      	add	r7, r2
    e61a:	e7df      	b.n	e5dc <am_hal_uart_transfer+0x8c>
    e61c:	e9d5 020d 	ldrd	r0, r2, [r5, #52]	; 0x34
    e620:	eba2 0b00 	sub.w	fp, r2, r0
    e624:	45b3      	cmp	fp, r6
    e626:	bf28      	it	cs
    e628:	46b3      	movcs	fp, r6
    e62a:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    e62e:	465a      	mov	r2, fp
    e630:	4620      	mov	r0, r4
    e632:	f000 fa7b 	bl	eb2c <am_hal_queue_item_add>
    e636:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
    e63a:	f7ff fce3 	bl	e004 <am_hal_interrupt_master_disable>
    e63e:	f508 2880 	add.w	r8, r8, #262144	; 0x40000
    e642:	f108 081c 	add.w	r8, r8, #28
    e646:	ea4f 3808 	mov.w	r8, r8, lsl #12
    e64a:	9008      	str	r0, [sp, #32]
    e64c:	e00d      	b.n	e66a <am_hal_uart_transfer+0x11a>
    e64e:	f000 faab 	bl	eba8 <am_hal_queue_item_get>
    e652:	b190      	cbz	r0, e67a <am_hal_uart_transfer+0x12a>
    e654:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e656:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e65a:	331c      	adds	r3, #28
    e65c:	031b      	lsls	r3, r3, #12
    e65e:	699a      	ldr	r2, [r3, #24]
    e660:	0692      	lsls	r2, r2, #26
    e662:	bf5c      	itt	pl
    e664:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    e668:	601a      	strpl	r2, [r3, #0]
    e66a:	f8d8 3018 	ldr.w	r3, [r8, #24]
    e66e:	069b      	lsls	r3, r3, #26
    e670:	f04f 0201 	mov.w	r2, #1
    e674:	a907      	add	r1, sp, #28
    e676:	4620      	mov	r0, r4
    e678:	d5e9      	bpl.n	e64e <am_hal_uart_transfer+0xfe>
    e67a:	9808      	ldr	r0, [sp, #32]
    e67c:	445f      	add	r7, fp
    e67e:	eba6 060b 	sub.w	r6, r6, fp
    e682:	f7ff fcc3 	bl	e00c <am_hal_interrupt_master_set>
    e686:	e7a7      	b.n	e5d8 <am_hal_uart_transfer+0x88>
    e688:	68cd      	ldr	r5, [r1, #12]
    e68a:	690b      	ldr	r3, [r1, #16]
    e68c:	9301      	str	r3, [sp, #4]
    e68e:	e9d1 b701 	ldrd	fp, r7, [r1, #4]
    e692:	2d00      	cmp	r5, #0
    e694:	f000 80b8 	beq.w	e808 <am_hal_uart_transfer+0x2b8>
    e698:	2f00      	cmp	r7, #0
    e69a:	f000 8123 	beq.w	e8e4 <am_hal_uart_transfer+0x394>
    e69e:	2800      	cmp	r0, #0
    e6a0:	f000 80ec 	beq.w	e87c <am_hal_uart_transfer+0x32c>
    e6a4:	6822      	ldr	r2, [r4, #0]
    e6a6:	f8df a1cc 	ldr.w	sl, [pc, #460]	; e874 <am_hal_uart_transfer+0x324>
    e6aa:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e6ae:	f04f 0900 	mov.w	r9, #0
    e6b2:	f100 0348 	add.w	r3, r0, #72	; 0x48
    e6b6:	4552      	cmp	r2, sl
    e6b8:	ee08 3a10 	vmov	s16, r3
    e6bc:	46c8      	mov	r8, r9
    e6be:	465e      	mov	r6, fp
    e6c0:	d134      	bne.n	e72c <am_hal_uart_transfer+0x1dc>
    e6c2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    e6c6:	2a00      	cmp	r2, #0
    e6c8:	d138      	bne.n	e73c <am_hal_uart_transfer+0x1ec>
    e6ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e6cc:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e6d0:	311c      	adds	r1, #28
    e6d2:	1e73      	subs	r3, r6, #1
    e6d4:	0309      	lsls	r1, r1, #12
    e6d6:	e008      	b.n	e6ea <am_hal_uart_transfer+0x19a>
    e6d8:	6808      	ldr	r0, [r1, #0]
    e6da:	f410 6f70 	tst.w	r0, #3840	; 0xf00
    e6de:	d163      	bne.n	e7a8 <am_hal_uart_transfer+0x258>
    e6e0:	3201      	adds	r2, #1
    e6e2:	42ba      	cmp	r2, r7
    e6e4:	f803 0f01 	strb.w	r0, [r3, #1]!
    e6e8:	d056      	beq.n	e798 <am_hal_uart_transfer+0x248>
    e6ea:	6988      	ldr	r0, [r1, #24]
    e6ec:	06c0      	lsls	r0, r0, #27
    e6ee:	d5f3      	bpl.n	e6d8 <am_hal_uart_transfer+0x188>
    e6f0:	4490      	add	r8, r2
    e6f2:	1abf      	subs	r7, r7, r2
    e6f4:	b957      	cbnz	r7, e70c <am_hal_uart_transfer+0x1bc>
    e6f6:	9b01      	ldr	r3, [sp, #4]
    e6f8:	b10b      	cbz	r3, e6fe <am_hal_uart_transfer+0x1ae>
    e6fa:	f8c3 8000 	str.w	r8, [r3]
    e6fe:	2500      	movs	r5, #0
    e700:	4628      	mov	r0, r5
    e702:	b011      	add	sp, #68	; 0x44
    e704:	ecbd 8b02 	vpop	{d8}
    e708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e70c:	2010      	movs	r0, #16
    e70e:	f7ff fa7d 	bl	dc0c <am_hal_flash_delay>
    e712:	1c6b      	adds	r3, r5, #1
    e714:	bf18      	it	ne
    e716:	f109 0901 	addne.w	r9, r9, #1
    e71a:	454d      	cmp	r5, r9
    e71c:	d9eb      	bls.n	e6f6 <am_hal_uart_transfer+0x1a6>
    e71e:	6822      	ldr	r2, [r4, #0]
    e720:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e724:	4552      	cmp	r2, sl
    e726:	eb0b 0608 	add.w	r6, fp, r8
    e72a:	d0ca      	beq.n	e6c2 <am_hal_uart_transfer+0x172>
    e72c:	2502      	movs	r5, #2
    e72e:	9b01      	ldr	r3, [sp, #4]
    e730:	2b00      	cmp	r3, #0
    e732:	f43f af19 	beq.w	e568 <am_hal_uart_transfer+0x18>
    e736:	f8c3 8000 	str.w	r8, [r3]
    e73a:	e715      	b.n	e568 <am_hal_uart_transfer+0x18>
    e73c:	f7ff fc62 	bl	e004 <am_hal_interrupt_master_disable>
    e740:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e742:	9007      	str	r0, [sp, #28]
    e744:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e748:	321c      	adds	r2, #28
    e74a:	0310      	lsls	r0, r2, #12
    e74c:	f10d 0c20 	add.w	ip, sp, #32
    e750:	2200      	movs	r2, #0
    e752:	6983      	ldr	r3, [r0, #24]
    e754:	06db      	lsls	r3, r3, #27
    e756:	d409      	bmi.n	e76c <am_hal_uart_transfer+0x21c>
    e758:	6803      	ldr	r3, [r0, #0]
    e75a:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e75e:	f102 0201 	add.w	r2, r2, #1
    e762:	d11b      	bne.n	e79c <am_hal_uart_transfer+0x24c>
    e764:	2a20      	cmp	r2, #32
    e766:	f80c 3b01 	strb.w	r3, [ip], #1
    e76a:	d1f2      	bne.n	e752 <am_hal_uart_transfer+0x202>
    e76c:	ee18 0a10 	vmov	r0, s16
    e770:	a908      	add	r1, sp, #32
    e772:	f000 f9db 	bl	eb2c <am_hal_queue_item_add>
    e776:	2800      	cmp	r0, #0
    e778:	d077      	beq.n	e86a <am_hal_uart_transfer+0x31a>
    e77a:	9807      	ldr	r0, [sp, #28]
    e77c:	f7ff fc46 	bl	e00c <am_hal_interrupt_master_set>
    e780:	6d22      	ldr	r2, [r4, #80]	; 0x50
    e782:	42ba      	cmp	r2, r7
    e784:	bf28      	it	cs
    e786:	463a      	movcs	r2, r7
    e788:	ee18 0a10 	vmov	r0, s16
    e78c:	4631      	mov	r1, r6
    e78e:	4490      	add	r8, r2
    e790:	1abf      	subs	r7, r7, r2
    e792:	f000 fa09 	bl	eba8 <am_hal_queue_item_get>
    e796:	e7ad      	b.n	e6f4 <am_hal_uart_transfer+0x1a4>
    e798:	4490      	add	r8, r2
    e79a:	e7ac      	b.n	e6f6 <am_hal_uart_transfer+0x1a6>
    e79c:	9807      	ldr	r0, [sp, #28]
    e79e:	f7ff fc35 	bl	e00c <am_hal_interrupt_master_set>
    e7a2:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e7a6:	e7c2      	b.n	e72e <am_hal_uart_transfer+0x1de>
    e7a8:	4490      	add	r8, r2
    e7aa:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e7ae:	e7be      	b.n	e72e <am_hal_uart_transfer+0x1de>
    e7b0:	2800      	cmp	r0, #0
    e7b2:	f43f af2e 	beq.w	e612 <am_hal_uart_transfer+0xc2>
    e7b6:	6803      	ldr	r3, [r0, #0]
    e7b8:	4a2e      	ldr	r2, [pc, #184]	; (e874 <am_hal_uart_transfer+0x324>)
    e7ba:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e7be:	4293      	cmp	r3, r2
    e7c0:	f47f af27 	bne.w	e612 <am_hal_uart_transfer+0xc2>
    e7c4:	9b03      	ldr	r3, [sp, #12]
    e7c6:	b10b      	cbz	r3, e7cc <am_hal_uart_transfer+0x27c>
    e7c8:	f8c3 9000 	str.w	r9, [r3]
    e7cc:	2e00      	cmp	r6, #0
    e7ce:	d096      	beq.n	e6fe <am_hal_uart_transfer+0x1ae>
    e7d0:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    e7d4:	2d00      	cmp	r5, #0
    e7d6:	d156      	bne.n	e886 <am_hal_uart_transfer+0x336>
    e7d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e7da:	9b01      	ldr	r3, [sp, #4]
    e7dc:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e7e0:	321c      	adds	r2, #28
    e7e2:	0312      	lsls	r2, r2, #12
    e7e4:	3b01      	subs	r3, #1
    e7e6:	e005      	b.n	e7f4 <am_hal_uart_transfer+0x2a4>
    e7e8:	3501      	adds	r5, #1
    e7ea:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    e7ee:	6011      	str	r1, [r2, #0]
    e7f0:	42ae      	cmp	r6, r5
    e7f2:	d002      	beq.n	e7fa <am_hal_uart_transfer+0x2aa>
    e7f4:	6991      	ldr	r1, [r2, #24]
    e7f6:	0689      	lsls	r1, r1, #26
    e7f8:	d5f6      	bpl.n	e7e8 <am_hal_uart_transfer+0x298>
    e7fa:	9b03      	ldr	r3, [sp, #12]
    e7fc:	2b00      	cmp	r3, #0
    e7fe:	f43f af7e 	beq.w	e6fe <am_hal_uart_transfer+0x1ae>
    e802:	601d      	str	r5, [r3, #0]
    e804:	2500      	movs	r5, #0
    e806:	e6af      	b.n	e568 <am_hal_uart_transfer+0x18>
    e808:	2800      	cmp	r0, #0
    e80a:	f43f af02 	beq.w	e612 <am_hal_uart_transfer+0xc2>
    e80e:	6802      	ldr	r2, [r0, #0]
    e810:	4918      	ldr	r1, [pc, #96]	; (e874 <am_hal_uart_transfer+0x324>)
    e812:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e816:	428a      	cmp	r2, r1
    e818:	f47f aefb 	bne.w	e612 <am_hal_uart_transfer+0xc2>
    e81c:	b103      	cbz	r3, e820 <am_hal_uart_transfer+0x2d0>
    e81e:	601d      	str	r5, [r3, #0]
    e820:	2f00      	cmp	r7, #0
    e822:	f43f af6c 	beq.w	e6fe <am_hal_uart_transfer+0x1ae>
    e826:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    e82a:	2a00      	cmp	r2, #0
    e82c:	d15c      	bne.n	e8e8 <am_hal_uart_transfer+0x398>
    e82e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    e830:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    e834:	301c      	adds	r0, #28
    e836:	0300      	lsls	r0, r0, #12
    e838:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    e83c:	4614      	mov	r4, r2
    e83e:	e009      	b.n	e854 <am_hal_uart_transfer+0x304>
    e840:	6801      	ldr	r1, [r0, #0]
    e842:	f411 6270 	ands.w	r2, r1, #3840	; 0xf00
    e846:	f040 8080 	bne.w	e94a <am_hal_uart_transfer+0x3fa>
    e84a:	3401      	adds	r4, #1
    e84c:	42a7      	cmp	r7, r4
    e84e:	f803 1f01 	strb.w	r1, [r3, #1]!
    e852:	d07d      	beq.n	e950 <am_hal_uart_transfer+0x400>
    e854:	6982      	ldr	r2, [r0, #24]
    e856:	06d2      	lsls	r2, r2, #27
    e858:	d5f2      	bpl.n	e840 <am_hal_uart_transfer+0x2f0>
    e85a:	9b01      	ldr	r3, [sp, #4]
    e85c:	2b00      	cmp	r3, #0
    e85e:	f43f ae83 	beq.w	e568 <am_hal_uart_transfer+0x18>
    e862:	601c      	str	r4, [r3, #0]
    e864:	e680      	b.n	e568 <am_hal_uart_transfer+0x18>
    e866:	4607      	mov	r7, r0
    e868:	e6d0      	b.n	e60c <am_hal_uart_transfer+0xbc>
    e86a:	9807      	ldr	r0, [sp, #28]
    e86c:	4d02      	ldr	r5, [pc, #8]	; (e878 <am_hal_uart_transfer+0x328>)
    e86e:	f7ff fbcd 	bl	e00c <am_hal_interrupt_master_set>
    e872:	e75c      	b.n	e72e <am_hal_uart_transfer+0x1de>
    e874:	01ea9e06 	.word	0x01ea9e06
    e878:	08000001 	.word	0x08000001
    e87c:	4680      	mov	r8, r0
    e87e:	2502      	movs	r5, #2
    e880:	e755      	b.n	e72e <am_hal_uart_transfer+0x1de>
    e882:	462f      	mov	r7, r5
    e884:	e6aa      	b.n	e5dc <am_hal_uart_transfer+0x8c>
    e886:	e9d4 530d 	ldrd	r5, r3, [r4, #52]	; 0x34
    e88a:	1b5d      	subs	r5, r3, r5
    e88c:	42b5      	cmp	r5, r6
    e88e:	bf28      	it	cs
    e890:	4635      	movcs	r5, r6
    e892:	f104 072c 	add.w	r7, r4, #44	; 0x2c
    e896:	9901      	ldr	r1, [sp, #4]
    e898:	462a      	mov	r2, r5
    e89a:	4638      	mov	r0, r7
    e89c:	f000 f946 	bl	eb2c <am_hal_queue_item_add>
    e8a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
    e8a2:	f7ff fbaf 	bl	e004 <am_hal_interrupt_master_disable>
    e8a6:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
    e8aa:	361c      	adds	r6, #28
    e8ac:	0336      	lsls	r6, r6, #12
    e8ae:	9005      	str	r0, [sp, #20]
    e8b0:	e00d      	b.n	e8ce <am_hal_uart_transfer+0x37e>
    e8b2:	f000 f979 	bl	eba8 <am_hal_queue_item_get>
    e8b6:	b188      	cbz	r0, e8dc <am_hal_uart_transfer+0x38c>
    e8b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e8ba:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e8be:	321c      	adds	r2, #28
    e8c0:	0312      	lsls	r2, r2, #12
    e8c2:	6993      	ldr	r3, [r2, #24]
    e8c4:	0699      	lsls	r1, r3, #26
    e8c6:	bf5c      	itt	pl
    e8c8:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
    e8cc:	6013      	strpl	r3, [r2, #0]
    e8ce:	69b3      	ldr	r3, [r6, #24]
    e8d0:	069b      	lsls	r3, r3, #26
    e8d2:	f04f 0201 	mov.w	r2, #1
    e8d6:	a908      	add	r1, sp, #32
    e8d8:	4638      	mov	r0, r7
    e8da:	d5ea      	bpl.n	e8b2 <am_hal_uart_transfer+0x362>
    e8dc:	9805      	ldr	r0, [sp, #20]
    e8de:	f7ff fb95 	bl	e00c <am_hal_interrupt_master_set>
    e8e2:	e78a      	b.n	e7fa <am_hal_uart_transfer+0x2aa>
    e8e4:	46b8      	mov	r8, r7
    e8e6:	e706      	b.n	e6f6 <am_hal_uart_transfer+0x1a6>
    e8e8:	f7ff fb8c 	bl	e004 <am_hal_interrupt_master_disable>
    e8ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e8ee:	9006      	str	r0, [sp, #24]
    e8f0:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e8f4:	321c      	adds	r2, #28
    e8f6:	0310      	lsls	r0, r2, #12
    e8f8:	ae08      	add	r6, sp, #32
    e8fa:	2200      	movs	r2, #0
    e8fc:	6983      	ldr	r3, [r0, #24]
    e8fe:	06d9      	lsls	r1, r3, #27
    e900:	d409      	bmi.n	e916 <am_hal_uart_transfer+0x3c6>
    e902:	6803      	ldr	r3, [r0, #0]
    e904:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e908:	f102 0201 	add.w	r2, r2, #1
    e90c:	d117      	bne.n	e93e <am_hal_uart_transfer+0x3ee>
    e90e:	2a20      	cmp	r2, #32
    e910:	f806 3b01 	strb.w	r3, [r6], #1
    e914:	d1f2      	bne.n	e8fc <am_hal_uart_transfer+0x3ac>
    e916:	f104 0648 	add.w	r6, r4, #72	; 0x48
    e91a:	a908      	add	r1, sp, #32
    e91c:	4630      	mov	r0, r6
    e91e:	f000 f905 	bl	eb2c <am_hal_queue_item_add>
    e922:	b1b8      	cbz	r0, e954 <am_hal_uart_transfer+0x404>
    e924:	9806      	ldr	r0, [sp, #24]
    e926:	f7ff fb71 	bl	e00c <am_hal_interrupt_master_set>
    e92a:	6d24      	ldr	r4, [r4, #80]	; 0x50
    e92c:	42bc      	cmp	r4, r7
    e92e:	bf28      	it	cs
    e930:	463c      	movcs	r4, r7
    e932:	4659      	mov	r1, fp
    e934:	4630      	mov	r0, r6
    e936:	4622      	mov	r2, r4
    e938:	f000 f936 	bl	eba8 <am_hal_queue_item_get>
    e93c:	e78d      	b.n	e85a <am_hal_uart_transfer+0x30a>
    e93e:	9806      	ldr	r0, [sp, #24]
    e940:	f7ff fb64 	bl	e00c <am_hal_interrupt_master_set>
    e944:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e948:	e60e      	b.n	e568 <am_hal_uart_transfer+0x18>
    e94a:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e94e:	e784      	b.n	e85a <am_hal_uart_transfer+0x30a>
    e950:	4615      	mov	r5, r2
    e952:	e782      	b.n	e85a <am_hal_uart_transfer+0x30a>
    e954:	9806      	ldr	r0, [sp, #24]
    e956:	4d02      	ldr	r5, [pc, #8]	; (e960 <am_hal_uart_transfer+0x410>)
    e958:	f7ff fb58 	bl	e00c <am_hal_interrupt_master_set>
    e95c:	e604      	b.n	e568 <am_hal_uart_transfer+0x18>
    e95e:	bf00      	nop
    e960:	08000001 	.word	0x08000001

0000e964 <am_hal_uart_interrupt_service>:
    e964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e968:	4604      	mov	r4, r0
    e96a:	4847      	ldr	r0, [pc, #284]	; (ea88 <am_hal_uart_interrupt_service+0x124>)
    e96c:	6823      	ldr	r3, [r4, #0]
    e96e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e972:	4283      	cmp	r3, r0
    e974:	b08a      	sub	sp, #40	; 0x28
    e976:	d124      	bne.n	e9c2 <am_hal_uart_interrupt_service+0x5e>
    e978:	f011 0f50 	tst.w	r1, #80	; 0x50
    e97c:	6a67      	ldr	r7, [r4, #36]	; 0x24
    e97e:	460d      	mov	r5, r1
    e980:	4616      	mov	r6, r2
    e982:	d002      	beq.n	e98a <am_hal_uart_interrupt_service+0x26>
    e984:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    e988:	bb63      	cbnz	r3, e9e4 <am_hal_uart_interrupt_service+0x80>
    e98a:	06a9      	lsls	r1, r5, #26
    e98c:	d409      	bmi.n	e9a2 <am_hal_uart_interrupt_service+0x3e>
    e98e:	b126      	cbz	r6, e99a <am_hal_uart_interrupt_service+0x36>
    e990:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e994:	b15b      	cbz	r3, e9ae <am_hal_uart_interrupt_service+0x4a>
    e996:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e998:	b1bb      	cbz	r3, e9ca <am_hal_uart_interrupt_service+0x66>
    e99a:	2000      	movs	r0, #0
    e99c:	b00a      	add	sp, #40	; 0x28
    e99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9a2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e9a6:	2b00      	cmp	r3, #0
    e9a8:	d13d      	bne.n	ea26 <am_hal_uart_interrupt_service+0xc2>
    e9aa:	2e00      	cmp	r6, #0
    e9ac:	d0f5      	beq.n	e99a <am_hal_uart_interrupt_service+0x36>
    e9ae:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e9b2:	371c      	adds	r7, #28
    e9b4:	033f      	lsls	r7, r7, #12
    e9b6:	69bb      	ldr	r3, [r7, #24]
    e9b8:	071b      	lsls	r3, r3, #28
    e9ba:	d40e      	bmi.n	e9da <am_hal_uart_interrupt_service+0x76>
    e9bc:	2301      	movs	r3, #1
    e9be:	6033      	str	r3, [r6, #0]
    e9c0:	e7eb      	b.n	e99a <am_hal_uart_interrupt_service+0x36>
    e9c2:	2002      	movs	r0, #2
    e9c4:	b00a      	add	sp, #40	; 0x28
    e9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9ca:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e9ce:	371c      	adds	r7, #28
    e9d0:	033f      	lsls	r7, r7, #12
    e9d2:	69bb      	ldr	r3, [r7, #24]
    e9d4:	071a      	lsls	r2, r3, #28
    e9d6:	d4e0      	bmi.n	e99a <am_hal_uart_interrupt_service+0x36>
    e9d8:	e7f0      	b.n	e9bc <am_hal_uart_interrupt_service+0x58>
    e9da:	2000      	movs	r0, #0
    e9dc:	6030      	str	r0, [r6, #0]
    e9de:	b00a      	add	sp, #40	; 0x28
    e9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9e4:	f7ff fb0e 	bl	e004 <am_hal_interrupt_master_disable>
    e9e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e9ea:	9001      	str	r0, [sp, #4]
    e9ec:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e9f0:	311c      	adds	r1, #28
    e9f2:	0309      	lsls	r1, r1, #12
    e9f4:	a802      	add	r0, sp, #8
    e9f6:	2200      	movs	r2, #0
    e9f8:	698b      	ldr	r3, [r1, #24]
    e9fa:	06db      	lsls	r3, r3, #27
    e9fc:	d409      	bmi.n	ea12 <am_hal_uart_interrupt_service+0xae>
    e9fe:	680b      	ldr	r3, [r1, #0]
    ea00:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ea04:	f102 0201 	add.w	r2, r2, #1
    ea08:	d132      	bne.n	ea70 <am_hal_uart_interrupt_service+0x10c>
    ea0a:	2a20      	cmp	r2, #32
    ea0c:	f800 3b01 	strb.w	r3, [r0], #1
    ea10:	d1f2      	bne.n	e9f8 <am_hal_uart_interrupt_service+0x94>
    ea12:	a902      	add	r1, sp, #8
    ea14:	f104 0048 	add.w	r0, r4, #72	; 0x48
    ea18:	f000 f888 	bl	eb2c <am_hal_queue_item_add>
    ea1c:	b370      	cbz	r0, ea7c <am_hal_uart_interrupt_service+0x118>
    ea1e:	9801      	ldr	r0, [sp, #4]
    ea20:	f7ff faf4 	bl	e00c <am_hal_interrupt_master_set>
    ea24:	e7b1      	b.n	e98a <am_hal_uart_interrupt_service+0x26>
    ea26:	6a65      	ldr	r5, [r4, #36]	; 0x24
    ea28:	f7ff faec 	bl	e004 <am_hal_interrupt_master_disable>
    ea2c:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    ea30:	351c      	adds	r5, #28
    ea32:	032d      	lsls	r5, r5, #12
    ea34:	9002      	str	r0, [sp, #8]
    ea36:	f104 082c 	add.w	r8, r4, #44	; 0x2c
    ea3a:	e00d      	b.n	ea58 <am_hal_uart_interrupt_service+0xf4>
    ea3c:	f000 f8b4 	bl	eba8 <am_hal_queue_item_get>
    ea40:	b190      	cbz	r0, ea68 <am_hal_uart_interrupt_service+0x104>
    ea42:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ea44:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ea48:	331c      	adds	r3, #28
    ea4a:	031b      	lsls	r3, r3, #12
    ea4c:	699a      	ldr	r2, [r3, #24]
    ea4e:	0692      	lsls	r2, r2, #26
    ea50:	bf5c      	itt	pl
    ea52:	f89d 2003 	ldrbpl.w	r2, [sp, #3]
    ea56:	601a      	strpl	r2, [r3, #0]
    ea58:	69ab      	ldr	r3, [r5, #24]
    ea5a:	069b      	lsls	r3, r3, #26
    ea5c:	f04f 0201 	mov.w	r2, #1
    ea60:	f10d 0103 	add.w	r1, sp, #3
    ea64:	4640      	mov	r0, r8
    ea66:	d5e9      	bpl.n	ea3c <am_hal_uart_interrupt_service+0xd8>
    ea68:	9802      	ldr	r0, [sp, #8]
    ea6a:	f7ff facf 	bl	e00c <am_hal_interrupt_master_set>
    ea6e:	e78e      	b.n	e98e <am_hal_uart_interrupt_service+0x2a>
    ea70:	9801      	ldr	r0, [sp, #4]
    ea72:	f7ff facb 	bl	e00c <am_hal_interrupt_master_set>
    ea76:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ea7a:	e78f      	b.n	e99c <am_hal_uart_interrupt_service+0x38>
    ea7c:	9801      	ldr	r0, [sp, #4]
    ea7e:	f7ff fac5 	bl	e00c <am_hal_interrupt_master_set>
    ea82:	4802      	ldr	r0, [pc, #8]	; (ea8c <am_hal_uart_interrupt_service+0x128>)
    ea84:	e78a      	b.n	e99c <am_hal_uart_interrupt_service+0x38>
    ea86:	bf00      	nop
    ea88:	01ea9e06 	.word	0x01ea9e06
    ea8c:	08000001 	.word	0x08000001

0000ea90 <am_hal_uart_interrupt_enable>:
    ea90:	6803      	ldr	r3, [r0, #0]
    ea92:	4a08      	ldr	r2, [pc, #32]	; (eab4 <am_hal_uart_interrupt_enable+0x24>)
    ea94:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ea98:	4293      	cmp	r3, r2
    ea9a:	d109      	bne.n	eab0 <am_hal_uart_interrupt_enable+0x20>
    ea9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ea9e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    eaa2:	331c      	adds	r3, #28
    eaa4:	031b      	lsls	r3, r3, #12
    eaa6:	2000      	movs	r0, #0
    eaa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    eaaa:	4311      	orrs	r1, r2
    eaac:	6399      	str	r1, [r3, #56]	; 0x38
    eaae:	4770      	bx	lr
    eab0:	2002      	movs	r0, #2
    eab2:	4770      	bx	lr
    eab4:	01ea9e06 	.word	0x01ea9e06

0000eab8 <am_hal_uart_interrupt_clear>:
    eab8:	6803      	ldr	r3, [r0, #0]
    eaba:	4a07      	ldr	r2, [pc, #28]	; (ead8 <am_hal_uart_interrupt_clear+0x20>)
    eabc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eac0:	4293      	cmp	r3, r2
    eac2:	d107      	bne.n	ead4 <am_hal_uart_interrupt_clear+0x1c>
    eac4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    eac6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    eaca:	331c      	adds	r3, #28
    eacc:	031b      	lsls	r3, r3, #12
    eace:	2000      	movs	r0, #0
    ead0:	6459      	str	r1, [r3, #68]	; 0x44
    ead2:	4770      	bx	lr
    ead4:	2002      	movs	r0, #2
    ead6:	4770      	bx	lr
    ead8:	01ea9e06 	.word	0x01ea9e06

0000eadc <am_hal_uart_interrupt_status_get>:
    eadc:	6803      	ldr	r3, [r0, #0]
    eade:	b410      	push	{r4}
    eae0:	4c0b      	ldr	r4, [pc, #44]	; (eb10 <am_hal_uart_interrupt_status_get+0x34>)
    eae2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eae6:	42a3      	cmp	r3, r4
    eae8:	d10d      	bne.n	eb06 <am_hal_uart_interrupt_status_get+0x2a>
    eaea:	6a43      	ldr	r3, [r0, #36]	; 0x24
    eaec:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    eaf0:	331c      	adds	r3, #28
    eaf2:	031b      	lsls	r3, r3, #12
    eaf4:	b92a      	cbnz	r2, eb02 <am_hal_uart_interrupt_status_get+0x26>
    eaf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    eaf8:	f85d 4b04 	ldr.w	r4, [sp], #4
    eafc:	600b      	str	r3, [r1, #0]
    eafe:	2000      	movs	r0, #0
    eb00:	4770      	bx	lr
    eb02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    eb04:	e7f8      	b.n	eaf8 <am_hal_uart_interrupt_status_get+0x1c>
    eb06:	2002      	movs	r0, #2
    eb08:	f85d 4b04 	ldr.w	r4, [sp], #4
    eb0c:	4770      	bx	lr
    eb0e:	bf00      	nop
    eb10:	01ea9e06 	.word	0x01ea9e06

0000eb14 <am_hal_queue_init>:
    eb14:	b410      	push	{r4}
    eb16:	2400      	movs	r4, #0
    eb18:	e9c0 4400 	strd	r4, r4, [r0]
    eb1c:	6084      	str	r4, [r0, #8]
    eb1e:	e9c0 2104 	strd	r2, r1, [r0, #16]
    eb22:	f85d 4b04 	ldr.w	r4, [sp], #4
    eb26:	60c3      	str	r3, [r0, #12]
    eb28:	4770      	bx	lr
    eb2a:	bf00      	nop

0000eb2c <am_hal_queue_item_add>:
    eb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb2e:	6906      	ldr	r6, [r0, #16]
    eb30:	b083      	sub	sp, #12
    eb32:	4604      	mov	r4, r0
    eb34:	fb06 f602 	mul.w	r6, r6, r2
    eb38:	460d      	mov	r5, r1
    eb3a:	f7ff fa63 	bl	e004 <am_hal_interrupt_master_disable>
    eb3e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    eb42:	1a53      	subs	r3, r2, r1
    eb44:	42b3      	cmp	r3, r6
    eb46:	9001      	str	r0, [sp, #4]
    eb48:	d31c      	bcc.n	eb84 <am_hal_queue_item_add+0x58>
    eb4a:	b196      	cbz	r6, eb72 <am_hal_queue_item_add+0x46>
    eb4c:	6823      	ldr	r3, [r4, #0]
    eb4e:	b305      	cbz	r5, eb92 <am_hal_queue_item_add+0x66>
    eb50:	1e68      	subs	r0, r5, #1
    eb52:	1987      	adds	r7, r0, r6
    eb54:	6962      	ldr	r2, [r4, #20]
    eb56:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    eb5a:	54d1      	strb	r1, [r2, r3]
    eb5c:	6823      	ldr	r3, [r4, #0]
    eb5e:	68e5      	ldr	r5, [r4, #12]
    eb60:	1c59      	adds	r1, r3, #1
    eb62:	4287      	cmp	r7, r0
    eb64:	fbb1 f3f5 	udiv	r3, r1, r5
    eb68:	fb05 1313 	mls	r3, r5, r3, r1
    eb6c:	6023      	str	r3, [r4, #0]
    eb6e:	d1f1      	bne.n	eb54 <am_hal_queue_item_add+0x28>
    eb70:	68a1      	ldr	r1, [r4, #8]
    eb72:	9801      	ldr	r0, [sp, #4]
    eb74:	440e      	add	r6, r1
    eb76:	60a6      	str	r6, [r4, #8]
    eb78:	f7ff fa48 	bl	e00c <am_hal_interrupt_master_set>
    eb7c:	2401      	movs	r4, #1
    eb7e:	4620      	mov	r0, r4
    eb80:	b003      	add	sp, #12
    eb82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb84:	9801      	ldr	r0, [sp, #4]
    eb86:	f7ff fa41 	bl	e00c <am_hal_interrupt_master_set>
    eb8a:	2400      	movs	r4, #0
    eb8c:	4620      	mov	r0, r4
    eb8e:	b003      	add	sp, #12
    eb90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb92:	4628      	mov	r0, r5
    eb94:	3001      	adds	r0, #1
    eb96:	3301      	adds	r3, #1
    eb98:	4286      	cmp	r6, r0
    eb9a:	fbb3 f5f2 	udiv	r5, r3, r2
    eb9e:	fb02 3315 	mls	r3, r2, r5, r3
    eba2:	d1f7      	bne.n	eb94 <am_hal_queue_item_add+0x68>
    eba4:	6023      	str	r3, [r4, #0]
    eba6:	e7e4      	b.n	eb72 <am_hal_queue_item_add+0x46>

0000eba8 <am_hal_queue_item_get>:
    eba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ebaa:	6906      	ldr	r6, [r0, #16]
    ebac:	4604      	mov	r4, r0
    ebae:	b083      	sub	sp, #12
    ebb0:	fb06 f602 	mul.w	r6, r6, r2
    ebb4:	460d      	mov	r5, r1
    ebb6:	f7ff fa25 	bl	e004 <am_hal_interrupt_master_disable>
    ebba:	68a2      	ldr	r2, [r4, #8]
    ebbc:	9001      	str	r0, [sp, #4]
    ebbe:	42b2      	cmp	r2, r6
    ebc0:	d31c      	bcc.n	ebfc <am_hal_queue_item_get+0x54>
    ebc2:	b196      	cbz	r6, ebea <am_hal_queue_item_get+0x42>
    ebc4:	6863      	ldr	r3, [r4, #4]
    ebc6:	b305      	cbz	r5, ec0a <am_hal_queue_item_get+0x62>
    ebc8:	1e68      	subs	r0, r5, #1
    ebca:	1987      	adds	r7, r0, r6
    ebcc:	6962      	ldr	r2, [r4, #20]
    ebce:	5cd3      	ldrb	r3, [r2, r3]
    ebd0:	f800 3f01 	strb.w	r3, [r0, #1]!
    ebd4:	6863      	ldr	r3, [r4, #4]
    ebd6:	68e5      	ldr	r5, [r4, #12]
    ebd8:	1c59      	adds	r1, r3, #1
    ebda:	4287      	cmp	r7, r0
    ebdc:	fbb1 f3f5 	udiv	r3, r1, r5
    ebe0:	fb05 1313 	mls	r3, r5, r3, r1
    ebe4:	6063      	str	r3, [r4, #4]
    ebe6:	d1f1      	bne.n	ebcc <am_hal_queue_item_get+0x24>
    ebe8:	68a2      	ldr	r2, [r4, #8]
    ebea:	9801      	ldr	r0, [sp, #4]
    ebec:	1b92      	subs	r2, r2, r6
    ebee:	60a2      	str	r2, [r4, #8]
    ebf0:	f7ff fa0c 	bl	e00c <am_hal_interrupt_master_set>
    ebf4:	2401      	movs	r4, #1
    ebf6:	4620      	mov	r0, r4
    ebf8:	b003      	add	sp, #12
    ebfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ebfc:	9801      	ldr	r0, [sp, #4]
    ebfe:	f7ff fa05 	bl	e00c <am_hal_interrupt_master_set>
    ec02:	2400      	movs	r4, #0
    ec04:	4620      	mov	r0, r4
    ec06:	b003      	add	sp, #12
    ec08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec0a:	68e1      	ldr	r1, [r4, #12]
    ec0c:	4628      	mov	r0, r5
    ec0e:	3001      	adds	r0, #1
    ec10:	3301      	adds	r3, #1
    ec12:	42b0      	cmp	r0, r6
    ec14:	fbb3 f5f1 	udiv	r5, r3, r1
    ec18:	fb01 3315 	mls	r3, r1, r5, r3
    ec1c:	d1f7      	bne.n	ec0e <am_hal_queue_item_get+0x66>
    ec1e:	6063      	str	r3, [r4, #4]
    ec20:	e7e3      	b.n	ebea <am_hal_queue_item_get+0x42>
    ec22:	bf00      	nop

0000ec24 <__init_array_end>:
    ec24:	72410a0a 	.word	0x72410a0a
    ec28:	696d6574 	.word	0x696d6574
    ec2c:	56532073 	.word	0x56532073
    ec30:	6f42204c 	.word	0x6f42204c
    ec34:	6f6c746f 	.word	0x6f6c746f
    ec38:	72656461 	.word	0x72656461
    ec3c:	44202d20 	.word	0x44202d20
    ec40:	47554245 	.word	0x47554245
    ec44:	00000a0a 	.word	0x00000a0a
    ec48:	73616870 	.word	0x73616870
    ec4c:	63093a65 	.word	0x63093a65
    ec50:	69666e6f 	.word	0x69666e6f
    ec54:	62206d72 	.word	0x62206d72
    ec58:	6c746f6f 	.word	0x6c746f6f
    ec5c:	6964616f 	.word	0x6964616f
    ec60:	6520676e 	.word	0x6520676e
    ec64:	7972746e 	.word	0x7972746e
    ec68:	0000000a 	.word	0x0000000a
    ec6c:	6e657309 	.word	0x6e657309
    ec70:	676e6964 	.word	0x676e6964
    ec74:	74724120 	.word	0x74724120
    ec78:	73696d65 	.word	0x73696d65
    ec7c:	4c565320 	.word	0x4c565320
    ec80:	72657620 	.word	0x72657620
    ec84:	6e6f6973 	.word	0x6e6f6973
    ec88:	63617020 	.word	0x63617020
    ec8c:	0a74656b 	.word	0x0a74656b
    ec90:	00000000 	.word	0x00000000
    ec94:	69617709 	.word	0x69617709
    ec98:	676e6974 	.word	0x676e6974
    ec9c:	726f6620 	.word	0x726f6620
    eca0:	6f6f6220 	.word	0x6f6f6220
    eca4:	616f6c74 	.word	0x616f6c74
    eca8:	20726564 	.word	0x20726564
    ecac:	666e6f63 	.word	0x666e6f63
    ecb0:	616d7269 	.word	0x616d7269
    ecb4:	6e6f6974 	.word	0x6e6f6974
    ecb8:	0000000a 	.word	0x0000000a
    ecbc:	206f6e09 	.word	0x206f6e09
    ecc0:	666e6f63 	.word	0x666e6f63
    ecc4:	616d7269 	.word	0x616d7269
    ecc8:	6e6f6974 	.word	0x6e6f6974
    eccc:	63657220 	.word	0x63657220
    ecd0:	65766965 	.word	0x65766965
    ecd4:	00000a64 	.word	0x00000a64
    ecd8:	746e6509 	.word	0x746e6509
    ecdc:	6e697265 	.word	0x6e697265
    ece0:	6f622067 	.word	0x6f622067
    ece4:	6f6c746f 	.word	0x6f6c746f
    ece8:	72656461 	.word	0x72656461
    ecec:	00000a0a 	.word	0x00000a0a
    ecf0:	4f525245 	.word	0x4f525245
    ecf4:	202d2052 	.word	0x202d2052
    ecf8:	6f6e7572 	.word	0x6f6e7572
    ecfc:	00006666 	.word	0x00006666
    ed00:	73616870 	.word	0x73616870
    ed04:	64093a65 	.word	0x64093a65
    ed08:	63657465 	.word	0x63657465
    ed0c:	61622074 	.word	0x61622074
    ed10:	72206475 	.word	0x72206475
    ed14:	0a657461 	.word	0x0a657461
    ed18:	00000000 	.word	0x00000000
    ed1c:	75616209 	.word	0x75616209
    ed20:	61722064 	.word	0x61722064
    ed24:	6e206574 	.word	0x6e206574
    ed28:	6420746f 	.word	0x6420746f
    ed2c:	63657465 	.word	0x63657465
    ed30:	2e646574 	.word	0x2e646574
    ed34:	7209090a 	.word	0x7209090a
    ed38:	6e697369 	.word	0x6e697369
    ed3c:	64652067 	.word	0x64652067
    ed40:	3a736567 	.word	0x3a736567
    ed44:	0a642509 	.word	0x0a642509
    ed48:	69740909 	.word	0x69740909
    ed4c:	2064656d 	.word	0x2064656d
    ed50:	3a74756f 	.word	0x3a74756f
    ed54:	0a642509 	.word	0x0a642509
    ed58:	0000000a 	.word	0x0000000a
    ed5c:	74656409 	.word	0x74656409
    ed60:	65746365 	.word	0x65746365
    ed64:	61762064 	.word	0x61762064
    ed68:	2064696c 	.word	0x2064696c
    ed6c:	64756162 	.word	0x64756162
    ed70:	74617220 	.word	0x74617220
    ed74:	25093a65 	.word	0x25093a65
    ed78:	000a0a64 	.word	0x000a0a64
    ed7c:	73616870 	.word	0x73616870
    ed80:	62093a65 	.word	0x62093a65
    ed84:	6c746f6f 	.word	0x6c746f6f
    ed88:	0a64616f 	.word	0x0a64616f
    ed8c:	00000000 	.word	0x00000000
    ed90:	71657209 	.word	0x71657209
    ed94:	74736575 	.word	0x74736575
    ed98:	20676e69 	.word	0x20676e69
    ed9c:	72746572 	.word	0x72746572
    eda0:	6d736e61 	.word	0x6d736e61
    eda4:	69737369 	.word	0x69737369
    eda8:	000a6e6f 	.word	0x000a6e6f
    edac:	71657209 	.word	0x71657209
    edb0:	74736575 	.word	0x74736575
    edb4:	20676e69 	.word	0x20676e69
    edb8:	7478656e 	.word	0x7478656e
    edbc:	70706120 	.word	0x70706120
    edc0:	61726620 	.word	0x61726620
    edc4:	000a656d 	.word	0x000a656d
    edc8:	72650909 	.word	0x72650909
    edcc:	20726f72 	.word	0x20726f72
    edd0:	65636572 	.word	0x65636572
    edd4:	6e697669 	.word	0x6e697669
    edd8:	61702067 	.word	0x61702067
    eddc:	74656b63 	.word	0x74656b63
    ede0:	64252820 	.word	0x64252820
    ede4:	00000a29 	.word	0x00000a29
    ede8:	65720909 	.word	0x65720909
    edec:	76696563 	.word	0x76696563
    edf0:	61206465 	.word	0x61206465
    edf4:	7061206e 	.word	0x7061206e
    edf8:	72662070 	.word	0x72662070
    edfc:	0a656d61 	.word	0x0a656d61
    ee00:	00000000 	.word	0x00000000
    ee04:	65720909 	.word	0x65720909
    ee08:	76696563 	.word	0x76696563
    ee0c:	64206465 	.word	0x64206465
    ee10:	20656e6f 	.word	0x20656e6f
    ee14:	6e676973 	.word	0x6e676973
    ee18:	0a216c61 	.word	0x0a216c61
    ee1c:	0000000a 	.word	0x0000000a
    ee20:	746f6f62 	.word	0x746f6f62
    ee24:	64616f6c 	.word	0x64616f6c
    ee28:	72726520 	.word	0x72726520
    ee2c:	2d20726f 	.word	0x2d20726f
    ee30:	6b6e7520 	.word	0x6b6e7520
    ee34:	6e776f6e 	.word	0x6e776f6e
    ee38:	6d6f6320 	.word	0x6d6f6320
    ee3c:	646e616d 	.word	0x646e616d
    ee40:	0000000a 	.word	0x0000000a
    ee44:	00000004 	.word	0x00000004
    ee48:	1000023c 	.word	0x1000023c
    ee4c:	08000800 	.word	0x08000800
    ee50:	00000004 	.word	0x00000004
    ee54:	00090000 	.word	0x00090000
    ee58:	02000200 	.word	0x02000200
    ee5c:	72660909 	.word	0x72660909
    ee60:	5f656d61 	.word	0x5f656d61
    ee64:	72646461 	.word	0x72646461
    ee68:	20737365 	.word	0x20737365
    ee6c:	7830203d 	.word	0x7830203d
    ee70:	58383025 	.word	0x58383025
    ee74:	756e202c 	.word	0x756e202c
    ee78:	6f775f6d 	.word	0x6f775f6d
    ee7c:	20736472 	.word	0x20736472
    ee80:	6425203d 	.word	0x6425203d
    ee84:	0000000a 	.word	0x0000000a
    ee88:	6f727245 	.word	0x6f727245
    ee8c:	66203a72 	.word	0x66203a72
    ee90:	656d6172 	.word	0x656d6172
    ee94:	63617020 	.word	0x63617020
    ee98:	2074656b 	.word	0x2074656b
    ee9c:	20746f6e 	.word	0x20746f6e
    eea0:	65746e69 	.word	0x65746e69
    eea4:	20726567 	.word	0x20726567
    eea8:	746c756d 	.word	0x746c756d
    eeac:	656c7069 	.word	0x656c7069
    eeb0:	20666f20 	.word	0x20666f20
    eeb4:	64726f77 	.word	0x64726f77
    eeb8:	34282073 	.word	0x34282073
    eebc:	74796220 	.word	0x74796220
    eec0:	70207365 	.word	0x70207365
    eec4:	77207265 	.word	0x77207265
    eec8:	2964726f 	.word	0x2964726f
    eecc:	0000000a 	.word	0x0000000a
    eed0:	53414c46 	.word	0x53414c46
    eed4:	414d5f48 	.word	0x414d5f48
    eed8:	455f5353 	.word	0x455f5353
    eedc:	45534152 	.word	0x45534152
    eee0:	32336920 	.word	0x32336920
    eee4:	75746552 	.word	0x75746552
    eee8:	6f436e72 	.word	0x6f436e72
    eeec:	3d206564 	.word	0x3d206564
    eef0:	25783020 	.word	0x25783020
    eef4:	0d0a2e78 	.word	0x0d0a2e78
    eef8:	00000000 	.word	0x00000000
    eefc:	53414c46 	.word	0x53414c46
    ef00:	52575f48 	.word	0x52575f48
    ef04:	20455449 	.word	0x20455449
    ef08:	6f727265 	.word	0x6f727265
    ef0c:	203d2072 	.word	0x203d2072
    ef10:	78257830 	.word	0x78257830
    ef14:	000d0a2e 	.word	0x000d0a2e
    ef18:	6d754a0a 	.word	0x6d754a0a
    ef1c:	6f742070 	.word	0x6f742070
    ef20:	70704120 	.word	0x70704120
    ef24:	20746120 	.word	0x20746120
    ef28:	30257830 	.word	0x30257830
    ef2c:	0a0a5838 	.word	0x0a0a5838
    ef30:	00000000 	.word	0x00000000

0000ef34 <am_hal_cachectrl_defaults>:
    ef34:	00000308                                ....

0000ef38 <g_AM_HAL_GPIO_DISABLE>:
    ef38:	00000003                                ....

0000ef3c <g_AM_HAL_GPIO_INPUT_PULLUP>:
    ef3c:	00001023                                #...

0000ef40 <g_ui8Bit76Capabilities>:
    ef40:	02800101 80010180 80800101 80808080     ................
    ef50:	80808080 80808008 01800180 80808080     ................
    ef60:	80808080 01800402 01010401 80808080     ................
    ef70:	00000101                                ....

0000ef74 <g_ui8Inpen>:
    ef74:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    ef84:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    ef94:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    efa4:	00003130                                01..

0000efa8 <g_ui8NCEtable>:
    efa8:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    efb8:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    efc8:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    efd8:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    efe8:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    eff8:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    f008:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    f018:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    f028:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    f038:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    f048:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    f058:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    f068:	32221202 43231303                       .."2..#C

0000f070 <g_ui8nCEpins>:
    f070:	02070707 00080802 01020202 01010101     ................
    f080:	01010101 01010101 01010101 01010101     ................
    f090:	01010101 08010101 01010008 01010101     ................
    f0a0:	00000101                                ....

0000f0a4 <am_hal_pwrctrl_peripheral_control>:
	...
    f0b0:	00000001 00000004 00000004 00000002     ................
    f0c0:	00000008 00000008 00000004 00000008     ................
    f0d0:	00000008 00000008 00000008 00000008     ................
    f0e0:	00000010 00000010 00000010 00000020     ............ ...
    f0f0:	00000010 00000010 00000040 00000010     ........@.......
    f100:	00000010 00000080 00000004 00000004     ................
    f110:	00000100 00000004 00000004 00000200     ................
    f120:	00000020 00000020 00000400 00000004      ... ...........
    f130:	00000004 00000800 00000040 00000040     ........@...@...
    f140:	00001000 00000080 00000080 00002000     ............. ..
    f150:	00000100 00000100                       ........

0000f158 <CSWTCH.20>:
    f158:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.
